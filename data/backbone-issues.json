[
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3465",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3465/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3465/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3465/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3465",
    "id": 55424653,
    "number": 3465,
    "title": "Test trigger arguments behavior",
    "user": {
      "login": "jridgewell",
      "id": 112982,
      "avatar_url": "https://avatars.githubusercontent.com/u/112982?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jridgewell",
      "html_url": "https://github.com/jridgewell",
      "followers_url": "https://api.github.com/users/jridgewell/followers",
      "following_url": "https://api.github.com/users/jridgewell/following{/other_user}",
      "gists_url": "https://api.github.com/users/jridgewell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jridgewell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jridgewell/subscriptions",
      "organizations_url": "https://api.github.com/users/jridgewell/orgs",
      "repos_url": "https://api.github.com/users/jridgewell/repos",
      "events_url": "https://api.github.com/users/jridgewell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jridgewell/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2015-01-25T18:41:13Z",
    "updated_at": "2015-01-28T20:42:55Z",
    "closed_at": "2015-01-28T20:42:51Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3465",
      "html_url": "https://github.com/jashkenas/backbone/pull/3465",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3465.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3465.patch"
    },
    "body": "To be clear, I think the trigger with object behavior is silly. But I needed tests to ensure that my [`eventsApi` refactor](https://github.com/jridgewell/backbone/tree/eventsApi-refactor) kept the current functionality.\r\n\r\nRe: https://github.com/jashkenas/backbone/issues/3460"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3404",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3404/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3404/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3404/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3404",
    "id": 50785908,
    "number": 3404,
    "title": "Backbone's support for blob data-type",
    "user": {
      "login": "karthiks",
      "id": 130831,
      "avatar_url": "https://avatars.githubusercontent.com/u/130831?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karthiks",
      "html_url": "https://github.com/karthiks",
      "followers_url": "https://api.github.com/users/karthiks/followers",
      "following_url": "https://api.github.com/users/karthiks/following{/other_user}",
      "gists_url": "https://api.github.com/users/karthiks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karthiks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karthiks/subscriptions",
      "organizations_url": "https://api.github.com/users/karthiks/orgs",
      "repos_url": "https://api.github.com/users/karthiks/repos",
      "events_url": "https://api.github.com/users/karthiks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karthiks/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-12-03T06:05:46Z",
    "updated_at": "2014-12-03T15:19:22Z",
    "closed_at": "2014-12-03T15:19:15Z",
    "body": "The lack of support for blob data type like images, pdf, etc is a very inconvenient and  unpleasant experience. Support for this would be an awesome thing in the kitty and it is indeed a much need thingy, IMHO."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3386",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3386/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3386/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3386/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3386",
    "id": 49221825,
    "number": 3386,
    "title": "Added `sparse` option to `set`",
    "user": {
      "login": "Prinzhorn",
      "id": 679144,
      "avatar_url": "https://avatars.githubusercontent.com/u/679144?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Prinzhorn",
      "html_url": "https://github.com/Prinzhorn",
      "followers_url": "https://api.github.com/users/Prinzhorn/followers",
      "following_url": "https://api.github.com/users/Prinzhorn/following{/other_user}",
      "gists_url": "https://api.github.com/users/Prinzhorn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Prinzhorn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Prinzhorn/subscriptions",
      "organizations_url": "https://api.github.com/users/Prinzhorn/orgs",
      "repos_url": "https://api.github.com/users/Prinzhorn/repos",
      "events_url": "https://api.github.com/users/Prinzhorn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Prinzhorn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-11-18T12:51:21Z",
    "updated_at": "2014-11-18T18:37:57Z",
    "closed_at": "2014-11-18T17:04:45Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3386",
      "html_url": "https://github.com/jashkenas/backbone/pull/3386",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3386.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3386.patch"
    },
    "body": "This option is useful for nested `change` events where Backbone would normally recursively trigger the event while collecting all the changed attributes. With `sparse` enabled, the `changedAttributes` and `hasChanged` methods will only consider the attributes that have been change by the most recent call to `set`.\r\n\r\nActual use case of mine: I'm writing a layout engine backed by `Backbone.Model`. Many of the attributes depend on the value of others (think `width` depends on `leftGuide` and `rightGuide`). This means if one attribute is changed, many others may have to be recomputed. This dependency chain can get multiple levels deep, as some attributes depend on other computed attributes up until at the top where there are only known or root properties (think `leftGuide` depends on `guides` and `viewportWidth`).\r\n\r\nThe way Backbone currently does the `change` event the layout engine recomputes the same values multiple times, since `changedAttributes()` will get bigger and bigger and always contain all the properties that changed since the beginning of the chain.\r\n\r\nAs you can see the diff is very simple and I was able to implement this in my subclass by overriding `set`. But I thought others might benefit from it. There's also a Stackoverflow question I created yesterday with some discussion http://stackoverflow.com/questions/26979021/backbone-model-how-to-listen-for-changes-on-multiple-attributes-only-once/26994282#26994282"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3384",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3384/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3384/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3384/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3384",
    "id": 49013113,
    "number": 3384,
    "title": "Add Collection cid",
    "user": {
      "login": "jasonLaster",
      "id": 254562,
      "avatar_url": "https://avatars.githubusercontent.com/u/254562?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasonLaster",
      "html_url": "https://github.com/jasonLaster",
      "followers_url": "https://api.github.com/users/jasonLaster/followers",
      "following_url": "https://api.github.com/users/jasonLaster/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasonLaster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasonLaster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasonLaster/subscriptions",
      "organizations_url": "https://api.github.com/users/jasonLaster/orgs",
      "repos_url": "https://api.github.com/users/jasonLaster/repos",
      "events_url": "https://api.github.com/users/jasonLaster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasonLaster/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-11-16T19:48:38Z",
    "updated_at": "2014-11-17T16:49:20Z",
    "closed_at": "2014-11-17T16:49:17Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3384",
      "html_url": "https://github.com/jashkenas/backbone/pull/3384",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3384.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3384.patch"
    },
    "body": "Cid's are a useful field for keeping track of class instances. The `cid` field in this case is modeled after Model's `cid` field and prepends the 'c' to the unique id.\r\n\r\nI'm curious to see what opinions you have. We're discussing adding cids to our classes in marionette so that it is easy to track references while debugging. Cids are also useful when building inspector tools that want a unique reference to primary class instances in the system. [marionette discussion](https://github.com/marionettejs/backbone.marionette/issues/2059)."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3380",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3380/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3380/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3380/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3380",
    "id": 48482373,
    "number": 3380,
    "title": "Added splice to collections",
    "user": {
      "login": "fastest963",
      "id": 112555,
      "avatar_url": "https://avatars.githubusercontent.com/u/112555?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fastest963",
      "html_url": "https://github.com/fastest963",
      "followers_url": "https://api.github.com/users/fastest963/followers",
      "following_url": "https://api.github.com/users/fastest963/following{/other_user}",
      "gists_url": "https://api.github.com/users/fastest963/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fastest963/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fastest963/subscriptions",
      "organizations_url": "https://api.github.com/users/fastest963/orgs",
      "repos_url": "https://api.github.com/users/fastest963/repos",
      "events_url": "https://api.github.com/users/fastest963/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fastest963/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-11-12T07:47:29Z",
    "updated_at": "2014-11-13T16:33:44Z",
    "closed_at": "2014-11-12T22:25:03Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3380",
      "html_url": "https://github.com/jashkenas/backbone/pull/3380",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3380.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3380.patch"
    },
    "body": "Adding `splice` to collections which is just a wrapper for slicing and then removing. Optionally also allows you to replace models just like `Array.prototype.splice`. Like `slice` it has the same arguments as `Array.prototype.splice`.\r\n\r\nThe only problem I see with this is that we don't have a good place to put `options`. We can't really just shove it on the end since we couldn't distinguish someone not passing options from someone passing an object that should be added. We could put it after `howMany` but that would break the format from being the same as `Array.prototype.splice`. I didn't put it anywhere for now, I thought I'd wait for others to weigh in."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3375",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3375/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3375/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3375/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3375",
    "id": 48184968,
    "number": 3375,
    "title": "CSS support in backbone views",
    "user": {
      "login": "alamgird",
      "id": 3112211,
      "avatar_url": "https://avatars.githubusercontent.com/u/3112211?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alamgird",
      "html_url": "https://github.com/alamgird",
      "followers_url": "https://api.github.com/users/alamgird/followers",
      "following_url": "https://api.github.com/users/alamgird/following{/other_user}",
      "gists_url": "https://api.github.com/users/alamgird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alamgird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alamgird/subscriptions",
      "organizations_url": "https://api.github.com/users/alamgird/orgs",
      "repos_url": "https://api.github.com/users/alamgird/repos",
      "events_url": "https://api.github.com/users/alamgird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alamgird/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-11-08T23:47:38Z",
    "updated_at": "2014-11-12T20:28:46Z",
    "closed_at": "2014-11-12T13:35:59Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3375",
      "html_url": "https://github.com/jashkenas/backbone/pull/3375",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3375.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3375.patch"
    },
    "body": "Be able to provide css properties using a hash in a view element. This can either be a javascript object or a function. This provides clients the ability to either specify css properties within the view it self or to pull a determine / pull / apply logic to a property from a  source within the view."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3356",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3356/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3356/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3356/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3356",
    "id": 46562352,
    "number": 3356,
    "title": "Documentation: warn of potential for conflict between id and cid",
    "user": {
      "login": "kvcrawford",
      "id": 504158,
      "avatar_url": "https://avatars.githubusercontent.com/u/504158?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kvcrawford",
      "html_url": "https://github.com/kvcrawford",
      "followers_url": "https://api.github.com/users/kvcrawford/followers",
      "following_url": "https://api.github.com/users/kvcrawford/following{/other_user}",
      "gists_url": "https://api.github.com/users/kvcrawford/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kvcrawford/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kvcrawford/subscriptions",
      "organizations_url": "https://api.github.com/users/kvcrawford/orgs",
      "repos_url": "https://api.github.com/users/kvcrawford/repos",
      "events_url": "https://api.github.com/users/kvcrawford/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kvcrawford/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-10-22T21:22:09Z",
    "updated_at": "2014-10-22T21:39:16Z",
    "closed_at": "2014-10-22T21:28:35Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3356",
      "html_url": "https://github.com/jashkenas/backbone/pull/3356",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3356.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3356.patch"
    },
    "body": "Addresses #2920"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3331",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3331/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3331/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3331/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3331",
    "id": 44766128,
    "number": 3331,
    "title": "Use matches in .where",
    "user": {
      "login": "megawac",
      "id": 3475472,
      "avatar_url": "https://avatars.githubusercontent.com/u/3475472?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/megawac",
      "html_url": "https://github.com/megawac",
      "followers_url": "https://api.github.com/users/megawac/followers",
      "following_url": "https://api.github.com/users/megawac/following{/other_user}",
      "gists_url": "https://api.github.com/users/megawac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/megawac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/megawac/subscriptions",
      "organizations_url": "https://api.github.com/users/megawac/orgs",
      "repos_url": "https://api.github.com/users/megawac/repos",
      "events_url": "https://api.github.com/users/megawac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/megawac/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-10-03T04:21:39Z",
    "updated_at": "2014-11-16T21:11:05Z",
    "closed_at": "2014-11-12T20:20:29Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3331",
      "html_url": "https://github.com/jashkenas/backbone/pull/3331",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3331.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3331.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3309",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3309/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3309/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3309/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3309",
    "id": 42639675,
    "number": 3309,
    "title": "Add version to minified script",
    "user": {
      "login": "mkleehammer",
      "id": 27421,
      "avatar_url": "https://avatars.githubusercontent.com/u/27421?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkleehammer",
      "html_url": "https://github.com/mkleehammer",
      "followers_url": "https://api.github.com/users/mkleehammer/followers",
      "following_url": "https://api.github.com/users/mkleehammer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkleehammer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkleehammer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkleehammer/subscriptions",
      "organizations_url": "https://api.github.com/users/mkleehammer/orgs",
      "repos_url": "https://api.github.com/users/mkleehammer/repos",
      "events_url": "https://api.github.com/users/mkleehammer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkleehammer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-09-12T15:18:07Z",
    "updated_at": "2014-09-23T21:15:19Z",
    "closed_at": "2014-09-12T15:32:53Z",
    "body": "This makes it easier to take inventory of minified, local scripts."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3307",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3307/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3307/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3307/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3307",
    "id": 42548209,
    "number": 3307,
    "title": "Add `Model::matches` as special-cased proxy to `_.matches`",
    "user": {
      "login": "gf3",
      "id": 18397,
      "avatar_url": "https://avatars.githubusercontent.com/u/18397?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gf3",
      "html_url": "https://github.com/gf3",
      "followers_url": "https://api.github.com/users/gf3/followers",
      "following_url": "https://api.github.com/users/gf3/following{/other_user}",
      "gists_url": "https://api.github.com/users/gf3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gf3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gf3/subscriptions",
      "organizations_url": "https://api.github.com/users/gf3/orgs",
      "repos_url": "https://api.github.com/users/gf3/repos",
      "events_url": "https://api.github.com/users/gf3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gf3/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2014-09-11T17:12:04Z",
    "updated_at": "2014-12-15T17:26:36Z",
    "closed_at": "2014-12-15T17:15:33Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3307",
      "html_url": "https://github.com/jashkenas/backbone/pull/3307",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3307.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3307.patch"
    },
    "body": "Discussion → #3070"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3301",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3301/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3301/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3301/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3301",
    "id": 42307827,
    "number": 3301,
    "title": "Enhancing Model with isEmpty function",
    "user": {
      "login": "AndrewEastwood",
      "id": 1483306,
      "avatar_url": "https://avatars.githubusercontent.com/u/1483306?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndrewEastwood",
      "html_url": "https://github.com/AndrewEastwood",
      "followers_url": "https://api.github.com/users/AndrewEastwood/followers",
      "following_url": "https://api.github.com/users/AndrewEastwood/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndrewEastwood/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndrewEastwood/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndrewEastwood/subscriptions",
      "organizations_url": "https://api.github.com/users/AndrewEastwood/orgs",
      "repos_url": "https://api.github.com/users/AndrewEastwood/repos",
      "events_url": "https://api.github.com/users/AndrewEastwood/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndrewEastwood/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 24,
    "created_at": "2014-09-09T13:47:55Z",
    "updated_at": "2014-09-23T20:32:38Z",
    "closed_at": "2014-09-23T19:37:45Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3301",
      "html_url": "https://github.com/jashkenas/backbone/pull/3301",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3301.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3301.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3294",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3294/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3294/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3294/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3294",
    "id": 41980289,
    "number": 3294,
    "title": "Adding of \"at\" option on removing model from collection.",
    "user": {
      "login": "skotchio",
      "id": 1432812,
      "avatar_url": "https://avatars.githubusercontent.com/u/1432812?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skotchio",
      "html_url": "https://github.com/skotchio",
      "followers_url": "https://api.github.com/users/skotchio/followers",
      "following_url": "https://api.github.com/users/skotchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/skotchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skotchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skotchio/subscriptions",
      "organizations_url": "https://api.github.com/users/skotchio/orgs",
      "repos_url": "https://api.github.com/users/skotchio/repos",
      "events_url": "https://api.github.com/users/skotchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skotchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-09-04T20:17:07Z",
    "updated_at": "2014-10-01T17:39:11Z",
    "closed_at": "2014-09-05T14:34:12Z",
    "body": "This is the feature request to add `at` option to be possible remove model by specified index. I think it could be looks like the following:\r\n\r\n    var indexOfModel = 5;\r\n    collection.remove(null, {at: indexOfModel});\r\n\r\nSo basically if the first argument if null and there is at options we want to remove model by specified index.\r\n\r\nYour thoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3276",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3276/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3276/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3276/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3276",
    "id": 40984586,
    "number": 3276,
    "title": "Adding index() method to Backbone.Model",
    "user": {
      "login": "skotchio",
      "id": 1432812,
      "avatar_url": "https://avatars.githubusercontent.com/u/1432812?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skotchio",
      "html_url": "https://github.com/skotchio",
      "followers_url": "https://api.github.com/users/skotchio/followers",
      "following_url": "https://api.github.com/users/skotchio/following{/other_user}",
      "gists_url": "https://api.github.com/users/skotchio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skotchio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skotchio/subscriptions",
      "organizations_url": "https://api.github.com/users/skotchio/orgs",
      "repos_url": "https://api.github.com/users/skotchio/repos",
      "events_url": "https://api.github.com/users/skotchio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skotchio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-08-23T20:56:19Z",
    "updated_at": "2014-08-25T18:27:54Z",
    "closed_at": "2014-08-25T16:35:52Z",
    "body": "Often, it's necessary to get index of specific model. To resolve this case we all use the following approach:\r\n\r\n    var index = model.collection.indexOf(model);\r\n\r\nit looks ugly and could be better if you add something like `index()` method to be possible to get index of specific model like the following:\r\n\r\n    var index = model.index();"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3263",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3263/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3263/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3263/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3263",
    "id": 39910478,
    "number": 3263,
    "title": "Add default value support for optional routes",
    "user": {
      "login": "liorch88",
      "id": 1992187,
      "avatar_url": "https://avatars.githubusercontent.com/u/1992187?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liorch88",
      "html_url": "https://github.com/liorch88",
      "followers_url": "https://api.github.com/users/liorch88/followers",
      "following_url": "https://api.github.com/users/liorch88/following{/other_user}",
      "gists_url": "https://api.github.com/users/liorch88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liorch88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liorch88/subscriptions",
      "organizations_url": "https://api.github.com/users/liorch88/orgs",
      "repos_url": "https://api.github.com/users/liorch88/repos",
      "events_url": "https://api.github.com/users/liorch88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liorch88/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-08-10T15:56:33Z",
    "updated_at": "2014-08-11T22:53:13Z",
    "closed_at": "2014-08-11T22:53:08Z",
    "body": "Let say I have the following route:\r\n```javascript\r\nroutes: {  \r\n  '/category(/:catname)'  : 'category',\r\n}\r\n```\r\nNow, the \"catname\" parameter is optional. It would be great if I could set a default value to it.\r\nA lot of PHP frameworks support this functionallity (such as ZF2).\r\nI know I can just check if its defined in the mapped function, but I think it makes more logic to define a default value in the route itself.\r\n\r\nI can think of  some implementations\r\n```javascript\r\nroutes: {  \r\n  '/category(/:catname=home)'  : 'category',\r\n}\r\n```\r\nOr perhaps, more similar to ZF2 and more customizable\r\n```javascript\r\n\"routes\": {\r\n    \"/category(/:catname)\": {\r\n        \"function\": \"category\",\r\n        \"defaults\": {\r\n            \"type\": \"home\"\r\n        }\r\n    }\r\n},\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3261",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3261/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3261/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3261/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3261",
    "id": 39747970,
    "number": 3261,
    "title": "If an object passed to listenTo does not extend from Backbone.Events throw a descriptive error.",
    "user": {
      "login": "samccone",
      "id": 883126,
      "avatar_url": "https://avatars.githubusercontent.com/u/883126?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samccone",
      "html_url": "https://github.com/samccone",
      "followers_url": "https://api.github.com/users/samccone/followers",
      "following_url": "https://api.github.com/users/samccone/following{/other_user}",
      "gists_url": "https://api.github.com/users/samccone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samccone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samccone/subscriptions",
      "organizations_url": "https://api.github.com/users/samccone/orgs",
      "repos_url": "https://api.github.com/users/samccone/repos",
      "events_url": "https://api.github.com/users/samccone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samccone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2014-08-07T17:22:35Z",
    "updated_at": "2014-08-12T20:19:41Z",
    "closed_at": "2014-08-11T22:57:58Z",
    "body": "Currently the message is a bit confusing to people who are not familiar with the implementation of listenTo.\r\n\r\n-----\r\n\r\nIf you are open to this I am more than happy to PR it."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3246",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3246/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3246/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3246/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3246",
    "id": 38925935,
    "number": 3246,
    "title": "Added support for arrays to `model.unset()`",
    "user": {
      "login": "AMKohn",
      "id": 2001842,
      "avatar_url": "https://avatars.githubusercontent.com/u/2001842?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AMKohn",
      "html_url": "https://github.com/AMKohn",
      "followers_url": "https://api.github.com/users/AMKohn/followers",
      "following_url": "https://api.github.com/users/AMKohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/AMKohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AMKohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AMKohn/subscriptions",
      "organizations_url": "https://api.github.com/users/AMKohn/orgs",
      "repos_url": "https://api.github.com/users/AMKohn/repos",
      "events_url": "https://api.github.com/users/AMKohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AMKohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/duplicate",
        "name": "duplicate",
        "color": "f7c6c7"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-07-28T19:52:06Z",
    "updated_at": "2014-08-18T17:51:10Z",
    "closed_at": "2014-08-18T17:51:05Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3246",
      "html_url": "https://github.com/jashkenas/backbone/pull/3246",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3246.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3246.patch"
    },
    "body": "I hope I kept the writing and test styles consistent.\r\n\r\nThis adds support for the `attr` argument in `model.unset()` to be an array.  It uses concat to ensure that attrs will always be an array and `_.object()` so the hash sent to `set` will be an object. Since the second argument is an empty array all values are set to `undefined`.\r\n\r\nThe contributing guide said not to update the documentation so I left the comment above the function unchanged.\r\n\r\nAvi"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3245",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3245/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3245/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3245/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3245",
    "id": 38886802,
    "number": 3245,
    "title": "Add option to validate a single property on model.set",
    "user": {
      "login": "vyarmak",
      "id": 1929693,
      "avatar_url": "https://avatars.githubusercontent.com/u/1929693?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vyarmak",
      "html_url": "https://github.com/vyarmak",
      "followers_url": "https://api.github.com/users/vyarmak/followers",
      "following_url": "https://api.github.com/users/vyarmak/following{/other_user}",
      "gists_url": "https://api.github.com/users/vyarmak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vyarmak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vyarmak/subscriptions",
      "organizations_url": "https://api.github.com/users/vyarmak/orgs",
      "repos_url": "https://api.github.com/users/vyarmak/repos",
      "events_url": "https://api.github.com/users/vyarmak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vyarmak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-07-28T12:52:27Z",
    "updated_at": "2014-07-28T14:34:14Z",
    "closed_at": "2014-07-28T14:34:09Z",
    "body": "Suggestion to add an option \"single\" (or any other name) to validate only property that was set and not the whole model. Backbone.model._validate can look similar to this:\r\n\r\n```javascript\r\n_validate: function(attrs, options) {\r\n  if (!options.validate || !this.validate) return true;\r\n  if (options.single === undefined || !options.single) { attrs = _.extend({}, this.attributes, attrs); }\r\n  var error = this.validationError = this.validate(attrs, options) || null;\r\n  if (!error) return true;\r\n  this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\r\n  return false;\r\n}\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3210",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3210/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3210/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3210/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3210",
    "id": 37017059,
    "number": 3210,
    "title": "History should accept a route matching behavior",
    "user": {
      "login": "ramoncaldeira",
      "id": 789733,
      "avatar_url": "https://avatars.githubusercontent.com/u/789733?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramoncaldeira",
      "html_url": "https://github.com/ramoncaldeira",
      "followers_url": "https://api.github.com/users/ramoncaldeira/followers",
      "following_url": "https://api.github.com/users/ramoncaldeira/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramoncaldeira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramoncaldeira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramoncaldeira/subscriptions",
      "organizations_url": "https://api.github.com/users/ramoncaldeira/orgs",
      "repos_url": "https://api.github.com/users/ramoncaldeira/repos",
      "events_url": "https://api.github.com/users/ramoncaldeira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramoncaldeira/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-07-02T19:43:41Z",
    "updated_at": "2014-07-02T21:51:31Z",
    "closed_at": "2014-07-02T21:51:27Z",
    "body": "By default, the Backbone.History resolves a route by its first match. I think it should be possible to also use another strategies, like match all matching routes or match the most specific route.\r\n\r\ni.e:\r\nIf I have multiple routers, distributed in many modules and one module defines `:category/:slug` and another module defines `user/:id`, the most specific route strategy would avoid conflicts and wouldn't trigger the `:category/:slug`'s callback for a route starting with `user/`."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3198",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3198/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3198/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3198/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3198",
    "id": 36174370,
    "number": 3198,
    "title": "Model.fetch options setting custom parse",
    "user": {
      "login": "Nadoedalo",
      "id": 4013151,
      "avatar_url": "https://avatars.githubusercontent.com/u/4013151?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nadoedalo",
      "html_url": "https://github.com/Nadoedalo",
      "followers_url": "https://api.github.com/users/Nadoedalo/followers",
      "following_url": "https://api.github.com/users/Nadoedalo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nadoedalo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nadoedalo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nadoedalo/subscriptions",
      "organizations_url": "https://api.github.com/users/Nadoedalo/orgs",
      "repos_url": "https://api.github.com/users/Nadoedalo/repos",
      "events_url": "https://api.github.com/users/Nadoedalo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nadoedalo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-06-20T14:58:50Z",
    "updated_at": "2014-06-20T15:24:39Z",
    "closed_at": "2014-06-20T15:24:35Z",
    "body": "If we can set url of the model temporary just for one fetch request, why we can't change the way it is parsed?\r\nI'm suggesting to have way to set custom parse for every fetch.\r\n```javascript\r\n    // Fetch the model from the server. If the server's representation of the\r\n    // model differs from its current attributes, they will be overridden,\r\n    // triggering a `\"change\"` event.\r\n    fetch: function(options) {\r\n      options = options ? _.clone(options) : {};\r\n      var model = this;\r\n      var parse = model.parse;\r\n      var success = options.success;\r\n      if (options.parse === void 0) options.parse = true;\r\n      else if(typeof options.parse === 'function') parse = options.parse;\r\n      options.success = function(resp) {\r\n        if (!model.set(parse(resp, options), options)) return false;\r\n        if (success) success(model, resp, options);\r\n        model.trigger('sync', model, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3133",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3133/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3133/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3133/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3133",
    "id": 32084417,
    "number": 3133,
    "title": "Allow Collections to determine uniqueness, not Models",
    "user": {
      "login": "caseywebdev",
      "id": 1181237,
      "avatar_url": "https://avatars.githubusercontent.com/u/1181237?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caseywebdev",
      "html_url": "https://github.com/caseywebdev",
      "followers_url": "https://api.github.com/users/caseywebdev/followers",
      "following_url": "https://api.github.com/users/caseywebdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/caseywebdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caseywebdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caseywebdev/subscriptions",
      "organizations_url": "https://api.github.com/users/caseywebdev/orgs",
      "repos_url": "https://api.github.com/users/caseywebdev/repos",
      "events_url": "https://api.github.com/users/caseywebdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caseywebdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 16,
    "created_at": "2014-04-23T18:03:22Z",
    "updated_at": "2014-06-30T14:54:47Z",
    "closed_at": "2014-06-27T20:39:20Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3133",
      "html_url": "https://github.com/jashkenas/backbone/pull/3133",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3133.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3133.patch"
    },
    "body": "Here's the approach from the other side. Tim made some good points regarding who should be determining uniqueness in #3080. With this setup, collections will never care about `model.id` and bookkeep purely by a customizable `Collection#generateId`. This means models can be in many collections and uniquely identified appropriately across all of them, all without having to alter the data in the model. After all, a model can't know how to distinguish itself from others in a collection as well as the collection can. This is a first draft, but I feel this may be the better way.\r\n\r\nRFC @jashkenas @braddunbar @tgriesser\r\n\r\nRE: #2976, #2985, #3080, #3132"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3126",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3126/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3126/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3126/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3126",
    "id": 31769576,
    "number": 3126,
    "title": "Add Model.prototype.hasAll",
    "user": {
      "login": "athaeryn",
      "id": 1226972,
      "avatar_url": "https://avatars.githubusercontent.com/u/1226972?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/athaeryn",
      "html_url": "https://github.com/athaeryn",
      "followers_url": "https://api.github.com/users/athaeryn/followers",
      "following_url": "https://api.github.com/users/athaeryn/following{/other_user}",
      "gists_url": "https://api.github.com/users/athaeryn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/athaeryn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/athaeryn/subscriptions",
      "organizations_url": "https://api.github.com/users/athaeryn/orgs",
      "repos_url": "https://api.github.com/users/athaeryn/repos",
      "events_url": "https://api.github.com/users/athaeryn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/athaeryn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-04-17T22:49:33Z",
    "updated_at": "2014-04-18T18:40:59Z",
    "closed_at": "2014-04-18T16:58:36Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3126",
      "html_url": "https://github.com/jashkenas/backbone/pull/3126",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3126.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3126.patch"
    },
    "body": "I don't know if my implementation is the best, but having the ability to check if a Model has all of a list of properties set would be useful."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3101",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3101/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3101/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3101/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3101",
    "id": 30566895,
    "number": 3101,
    "title": "No way to execute route without mutating history first",
    "user": {
      "login": "asakusuma",
      "id": 597574,
      "avatar_url": "https://avatars.githubusercontent.com/u/597574?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asakusuma",
      "html_url": "https://github.com/asakusuma",
      "followers_url": "https://api.github.com/users/asakusuma/followers",
      "following_url": "https://api.github.com/users/asakusuma/following{/other_user}",
      "gists_url": "https://api.github.com/users/asakusuma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asakusuma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asakusuma/subscriptions",
      "organizations_url": "https://api.github.com/users/asakusuma/orgs",
      "repos_url": "https://api.github.com/users/asakusuma/repos",
      "events_url": "https://api.github.com/users/asakusuma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asakusuma/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2014-04-01T02:31:19Z",
    "updated_at": "2014-06-10T21:15:58Z",
    "closed_at": "2014-04-03T19:17:32Z",
    "body": "I'm working on an extension that allows programatic execution of a route where the callback is fired first, and if the callback succeeds, then the hash and history are mutated. One issue with such an approach is that, just as it was [discussed in a previous issue](https://github.com/jashkenas/backbone/pull/3016#issuecomment-35826941), the only way to retrieve the hash in the Router ``execute()`` function is by accessing ``Backbone.history``. If ``Backbone.history`` has not yet been updated, **I don't see any way to access the hash** in order to push it onto the history stack.\r\n\r\nAs far as I can tell, the simplest workaround is to add a ``fragment`` parameter to execute, right after the ``name`` parameter. Another option would be to roll the ``name`` and ``fragment`` into an ``options`` object. With the later solution, we could additionally add an ``options`` parameter to ``loadUrl()`` that could be mixed in to the ``options`` object passed to ``execute()``. This could potentially add greater flexibility for extending how routes are handled. If either of these solutions sound reasonable, I can submit a pull request."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3098",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3098/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3098/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3098/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3098",
    "id": 30460467,
    "number": 3098,
    "title": "Fix for delayed networking data overwrite bug",
    "user": {
      "login": "dts",
      "id": 273856,
      "avatar_url": "https://avatars.githubusercontent.com/u/273856?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dts",
      "html_url": "https://github.com/dts",
      "followers_url": "https://api.github.com/users/dts/followers",
      "following_url": "https://api.github.com/users/dts/following{/other_user}",
      "gists_url": "https://api.github.com/users/dts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dts/subscriptions",
      "organizations_url": "https://api.github.com/users/dts/orgs",
      "repos_url": "https://api.github.com/users/dts/repos",
      "events_url": "https://api.github.com/users/dts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dts/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-03-30T06:56:11Z",
    "updated_at": "2014-04-01T21:33:27Z",
    "closed_at": "2014-04-01T21:33:23Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3098",
      "html_url": "https://github.com/jashkenas/backbone/pull/3098",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3098.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3098.patch"
    },
    "body": "When you change a field between a save() and the success() that comes back, the changed data is erased.  I have added a test case that demonstrates this behavior, and changed Backbone.Model.save to resolve this issue."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3092",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3092/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3092/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3092/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3092",
    "id": 30328139,
    "number": 3092,
    "title": "Remove unnecessary checks and variables.",
    "user": {
      "login": "braddunbar",
      "id": 11674,
      "avatar_url": "https://avatars.githubusercontent.com/u/11674?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/braddunbar",
      "html_url": "https://github.com/braddunbar",
      "followers_url": "https://api.github.com/users/braddunbar/followers",
      "following_url": "https://api.github.com/users/braddunbar/following{/other_user}",
      "gists_url": "https://api.github.com/users/braddunbar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/braddunbar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/braddunbar/subscriptions",
      "organizations_url": "https://api.github.com/users/braddunbar/orgs",
      "repos_url": "https://api.github.com/users/braddunbar/repos",
      "events_url": "https://api.github.com/users/braddunbar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/braddunbar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-03-27T18:20:51Z",
    "updated_at": "2014-03-27T18:32:22Z",
    "closed_at": "2014-03-27T18:32:17Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3092",
      "html_url": "https://github.com/jashkenas/backbone/pull/3092",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3092.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3092.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3089",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3089/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3089/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3089/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3089",
    "id": 29999005,
    "number": 3089,
    "title": "Fix #3078 - Router#execute receives route name.",
    "user": {
      "login": "braddunbar",
      "id": 11674,
      "avatar_url": "https://avatars.githubusercontent.com/u/11674?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/braddunbar",
      "html_url": "https://github.com/braddunbar",
      "followers_url": "https://api.github.com/users/braddunbar/followers",
      "following_url": "https://api.github.com/users/braddunbar/following{/other_user}",
      "gists_url": "https://api.github.com/users/braddunbar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/braddunbar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/braddunbar/subscriptions",
      "organizations_url": "https://api.github.com/users/braddunbar/orgs",
      "repos_url": "https://api.github.com/users/braddunbar/repos",
      "events_url": "https://api.github.com/users/braddunbar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/braddunbar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-03-23T21:37:43Z",
    "updated_at": "2014-03-24T14:39:11Z",
    "closed_at": "2014-03-24T14:39:11Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3089",
      "html_url": "https://github.com/jashkenas/backbone/pull/3089",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3089.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3089.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3078",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3078/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3078/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3078/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3078",
    "id": 29742006,
    "number": 3078,
    "title": "Proposal: Backbone.Router.execute add action name to arguments",
    "user": {
      "login": "ufologist",
      "id": 167221,
      "avatar_url": "https://avatars.githubusercontent.com/u/167221?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ufologist",
      "html_url": "https://github.com/ufologist",
      "followers_url": "https://api.github.com/users/ufologist/followers",
      "following_url": "https://api.github.com/users/ufologist/following{/other_user}",
      "gists_url": "https://api.github.com/users/ufologist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ufologist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ufologist/subscriptions",
      "organizations_url": "https://api.github.com/users/ufologist/orgs",
      "repos_url": "https://api.github.com/users/ufologist/repos",
      "events_url": "https://api.github.com/users/ufologist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ufologist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-03-19T15:27:22Z",
    "updated_at": "2014-03-24T14:39:49Z",
    "closed_at": "2014-03-24T14:39:11Z",
    "body": "Hey, I usually override execute for judging where callback is come from.\r\nlike this\r\n\r\n```javascript\r\n// Backbone.Router.extend({\r\nexecute: function(callback, args) {\r\n    var actionName = this.getActionName(callback);\r\n    // super\r\n    Backbone.Router.prototype.execute.apply(this, arguments);\r\n},\r\ngetActionName: function(callback) {\r\n    if (!this.routes) {\r\n        return;\r\n    }\r\n\r\n    var actionName;\r\n    var matched;\r\n    for (var routePattern in this.routes) {\r\n        actionName = this.routes[routePattern];\r\n        if (callback === this[actionName]) {\r\n            matched = actionName;\r\n            break;\r\n        }\r\n    }\r\n    return matched;\r\n}\r\n```\r\n\r\nI don't know if anyone else did this, so I show the code, someone who like this can reuse it.\r\n\r\nIf this is a common requirement, I suggest to add this argument."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3048",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3048/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3048/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3048/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3048",
    "id": 28919583,
    "number": 3048,
    "title": "Pass along `textStatus` and `errorThrown`.",
    "user": {
      "login": "braddunbar",
      "id": 11674,
      "avatar_url": "https://avatars.githubusercontent.com/u/11674?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/braddunbar",
      "html_url": "https://github.com/braddunbar",
      "followers_url": "https://api.github.com/users/braddunbar/followers",
      "following_url": "https://api.github.com/users/braddunbar/following{/other_user}",
      "gists_url": "https://api.github.com/users/braddunbar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/braddunbar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/braddunbar/subscriptions",
      "organizations_url": "https://api.github.com/users/braddunbar/orgs",
      "repos_url": "https://api.github.com/users/braddunbar/repos",
      "events_url": "https://api.github.com/users/braddunbar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/braddunbar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-03-06T22:08:42Z",
    "updated_at": "2014-03-15T18:33:08Z",
    "closed_at": "2014-03-15T18:32:53Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3048",
      "html_url": "https://github.com/jashkenas/backbone/pull/3048",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3048.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3048.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3029",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3029/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3029/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3029/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3029",
    "id": 28501767,
    "number": 3029,
    "title": "Add new `_.partition`",
    "user": {
      "login": "Crisfole",
      "id": 413237,
      "avatar_url": "https://avatars.githubusercontent.com/u/413237?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crisfole",
      "html_url": "https://github.com/Crisfole",
      "followers_url": "https://api.github.com/users/Crisfole/followers",
      "following_url": "https://api.github.com/users/Crisfole/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crisfole/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crisfole/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crisfole/subscriptions",
      "organizations_url": "https://api.github.com/users/Crisfole/orgs",
      "repos_url": "https://api.github.com/users/Crisfole/repos",
      "events_url": "https://api.github.com/users/Crisfole/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crisfole/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2014-02-28T13:51:51Z",
    "updated_at": "2014-02-28T19:00:04Z",
    "closed_at": "2014-02-28T18:59:42Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3029",
      "html_url": "https://github.com/jashkenas/backbone/pull/3029",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3029.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3029.patch"
    },
    "body": "Also considered updating comment to say \"91%\", but I had self-restraint."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3012",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3012/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3012/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3012/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3012",
    "id": 28003234,
    "number": 3012,
    "title": "Add settings attr to options on Backbone.sync",
    "user": {
      "login": "jaridmargolin",
      "id": 933685,
      "avatar_url": "https://avatars.githubusercontent.com/u/933685?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaridmargolin",
      "html_url": "https://github.com/jaridmargolin",
      "followers_url": "https://api.github.com/users/jaridmargolin/followers",
      "following_url": "https://api.github.com/users/jaridmargolin/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaridmargolin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaridmargolin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaridmargolin/subscriptions",
      "organizations_url": "https://api.github.com/users/jaridmargolin/orgs",
      "repos_url": "https://api.github.com/users/jaridmargolin/repos",
      "events_url": "https://api.github.com/users/jaridmargolin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaridmargolin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2014-02-20T22:44:03Z",
    "updated_at": "2014-03-06T22:36:03Z",
    "closed_at": "2014-03-06T22:12:20Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3012",
      "html_url": "https://github.com/jashkenas/backbone/pull/3012",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3012.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3012.patch"
    },
    "body": "A alternative solution for obtaining the ajax settings within success and error callbacks (#3008).\r\n\r\n**example usage**:\r\n\r\n```\r\nmodel.fetch({\r\n  error: function (model, resp, options) {\r\n    if (options.xhr.statusText == 'timeout') { Backbone.ajax(options.settings); }\r\n  }\r\n});\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3011",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3011/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3011/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3011/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3011",
    "id": 28002710,
    "number": 3011,
    "title": "Add a comment about clearInterval.",
    "user": {
      "login": "braddunbar",
      "id": 11674,
      "avatar_url": "https://avatars.githubusercontent.com/u/11674?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/braddunbar",
      "html_url": "https://github.com/braddunbar",
      "followers_url": "https://api.github.com/users/braddunbar/followers",
      "following_url": "https://api.github.com/users/braddunbar/following{/other_user}",
      "gists_url": "https://api.github.com/users/braddunbar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/braddunbar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/braddunbar/subscriptions",
      "organizations_url": "https://api.github.com/users/braddunbar/orgs",
      "repos_url": "https://api.github.com/users/braddunbar/repos",
      "events_url": "https://api.github.com/users/braddunbar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/braddunbar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-02-20T22:36:28Z",
    "updated_at": "2014-02-23T15:11:54Z",
    "closed_at": "2014-02-20T22:59:35Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3011",
      "html_url": "https://github.com/jashkenas/backbone/pull/3011",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3011.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3011.patch"
    },
    "body": "I'll never remember this otherwise and then I'll be the one who breaks it.  :smiley:"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3003",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3003/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3003/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3003/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/3003",
    "id": 27835424,
    "number": 3003,
    "title": "View hooks for native and non-jQuery libraries",
    "user": {
      "login": "akre54",
      "id": 931368,
      "avatar_url": "https://avatars.githubusercontent.com/u/931368?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akre54",
      "html_url": "https://github.com/akre54",
      "followers_url": "https://api.github.com/users/akre54/followers",
      "following_url": "https://api.github.com/users/akre54/following{/other_user}",
      "gists_url": "https://api.github.com/users/akre54/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akre54/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akre54/subscriptions",
      "organizations_url": "https://api.github.com/users/akre54/orgs",
      "repos_url": "https://api.github.com/users/akre54/repos",
      "events_url": "https://api.github.com/users/akre54/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akre54/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 136,
    "created_at": "2014-02-18T22:47:06Z",
    "updated_at": "2014-09-26T04:41:53Z",
    "closed_at": "2014-03-16T23:13:18Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/3003",
      "html_url": "https://github.com/jashkenas/backbone/pull/3003",
      "diff_url": "https://github.com/jashkenas/backbone/pull/3003.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/3003.patch"
    },
    "body": "This is a continuation of the discussion in #2959, and focuses on making View easier to extend by users wishing to use non-jQuery libraries. It's similar in plugability to `Backbone.ajax` or other overridable parts of Backbone.\r\n\r\nNative Views and non-jQuery DOM libraries would be able to create a native View implementation by overriding `$`, `make`, `remove`, `setElement`, `delegate`, and `undelegateEvents` (see the [NativeView reference implementation](https://github.com/akre54/Backbone.NativeView)). This preserves the majority of the public contract of View (with the notable exception of `View#$` and `view.$el`), and the public interface of the constructor (including passing options), `delegateEvents`/`undelegateEvents`, `render`, `remove`, and `setElement` would be virtually unchanged. The PR also re-adds `View#make`.\r\n\r\nThe next step would be to remove Backbone.$() calls from History and perhaps extend `View#setElement` and `View#make` to use a common exposed `createElement` utility.\r\n\r\n----\r\n\r\n**Update for folks tuning in late**: The final list of overridable methods is [available on the wiki](https://github.com/jashkenas/backbone/wiki/Using-Backbone-without-jQuery) with instructions for how to use it in your own project."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2993",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2993/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2993/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2993/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2993",
    "id": 27508758,
    "number": 2993,
    "title": "Backbone.History to trigger 'load' event when loadUrl call happens",
    "user": {
      "login": "hippich",
      "id": 361630,
      "avatar_url": "https://avatars.githubusercontent.com/u/361630?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hippich",
      "html_url": "https://github.com/hippich",
      "followers_url": "https://api.github.com/users/hippich/followers",
      "following_url": "https://api.github.com/users/hippich/following{/other_user}",
      "gists_url": "https://api.github.com/users/hippich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hippich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hippich/subscriptions",
      "organizations_url": "https://api.github.com/users/hippich/orgs",
      "repos_url": "https://api.github.com/users/hippich/repos",
      "events_url": "https://api.github.com/users/hippich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hippich/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-13T10:42:46Z",
    "updated_at": "2014-02-13T20:38:15Z",
    "closed_at": "2014-02-13T18:40:14Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2993",
      "html_url": "https://github.com/jashkenas/backbone/pull/2993",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2993.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2993.patch"
    },
    "body": "I am looking to make Views in my application rely on current state of URL and having 'load' event for Backbone.History will complement Backbone.History.getFragment() function.\r\n\r\nI also see this very minimal change to allow building more flexible routers which might allow matching several different route-regexps to allow reusing smaller actions. I.e. for example if both routes /app/route1 and /app/route2 need to call function prepareApp(), this function could be added as a listener to 'load' event."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2990",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2990/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2990/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2990/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2990",
    "id": 27192019,
    "number": 2990,
    "title": "Add __parent__ property inside extend",
    "user": {
      "login": "jasonLaster",
      "id": 254562,
      "avatar_url": "https://avatars.githubusercontent.com/u/254562?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasonLaster",
      "html_url": "https://github.com/jasonLaster",
      "followers_url": "https://api.github.com/users/jasonLaster/followers",
      "following_url": "https://api.github.com/users/jasonLaster/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasonLaster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasonLaster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasonLaster/subscriptions",
      "organizations_url": "https://api.github.com/users/jasonLaster/orgs",
      "repos_url": "https://api.github.com/users/jasonLaster/repos",
      "events_url": "https://api.github.com/users/jasonLaster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasonLaster/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-08T03:16:45Z",
    "updated_at": "2014-02-08T15:21:06Z",
    "closed_at": "2014-02-08T15:20:50Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2990",
      "html_url": "https://github.com/jashkenas/backbone/pull/2990",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2990.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2990.patch"
    },
    "body": "### Overview\r\n\r\nI'd like to update `extend`, so that the child has a refernce to its parent's constructor (`__parent__ = parent`). The main motivation is that I'd like to check to see if model B is a subclass of model A without instanciating it and using `instanceof`. \r\n\r\nAs a disclaimer, `__parent__` would be used in a small ancestor-esque util, not product code.\r\n\r\n### Relevant issues / tests\r\nI checked #787, #1348, #342 and I don't think this solution addressed. I looked for relevant tests and could not find any. \r\n\r\n\r\n### Sample Code\r\nHere's some throw-away code that could be written if `__parent__` were availble.\r\n\r\n``` js\r\nModel.childOf = function(objB) {\r\n    var objA = this;\r\n    while ((objA = objA.__parent__) !== undefined) {\r\n        if (objA === objB) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nModel.ancestors = function() {\r\n    var ancestors = [],\r\n        ancestor = this;\r\n    while ((ancestor = ancestor.__parent__) !== undefined) {\r\n        ancestors.push(ancestor)\r\n    }\r\n\r\n    return ancestors;\r\n}\r\n\r\nvar A = Backbone.Model.extend({}),\r\n    B = A.extend({}),\r\n    C = B.extend({}),\r\n    D = C.extend({});\r\n\r\nconsole.log('D, A', D.childOf(B));          // => true\r\nconsole.log('A, B', A.childOf(B));          // => false\r\nconsole.log('A, A', A.childOf(A));          // => false\r\nconsole.log('Bs ancestors', B.ancestors()); // => [A, Backbone.Model]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2978",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2978/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2978/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2978/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2978",
    "id": 26558327,
    "number": 2978,
    "title": "View `scroll` events do not delegate",
    "user": {
      "login": "jessehouchins",
      "id": 402873,
      "avatar_url": "https://avatars.githubusercontent.com/u/402873?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jessehouchins",
      "html_url": "https://github.com/jessehouchins",
      "followers_url": "https://api.github.com/users/jessehouchins/followers",
      "following_url": "https://api.github.com/users/jessehouchins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jessehouchins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jessehouchins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jessehouchins/subscriptions",
      "organizations_url": "https://api.github.com/users/jessehouchins/orgs",
      "repos_url": "https://api.github.com/users/jessehouchins/repos",
      "events_url": "https://api.github.com/users/jessehouchins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jessehouchins/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-01-29T22:15:46Z",
    "updated_at": "2014-09-05T17:57:06Z",
    "closed_at": "2014-01-30T13:56:46Z",
    "body": "The following code does not run the event handler:\r\n\r\n```\r\nevents: {\r\n  'scroll .selector' : 'scrollHandler'\r\n}\r\n```\r\n\r\nThe problem is that scroll events do not bubble. Backbone tries to bind the scroll event using the delegated syntax, like this:\r\n\r\n```\r\nthis.$el.on('scroll', '.selector', this['scrollHandler'], this)\r\n```\r\n\r\nHowever, this fails since the event never bubbles to this.$el. Would it be appropriate to patch backbone events to treat scroll bindings differently, like:\r\n\r\n```\r\nif (!selector) {\r\n  this.$el.on(event, handler)\r\n} else if (isScrollEvent) {\r\n  this.$(selector).on(event, handler)\r\n} else {\r\n  this.$el.on(event, selector, handler)\r\n}\r\n```\r\n\r\nThe limitation of this is elements would need to be children of this.$el already, but at least it would work in some cases.\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2959",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2959/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2959/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2959/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2959",
    "id": 25672543,
    "number": 2959,
    "title": "Native view and jQuery-less History",
    "user": {
      "login": "wyuenho",
      "id": 160028,
      "avatar_url": "https://avatars.githubusercontent.com/u/160028?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyuenho",
      "html_url": "https://github.com/wyuenho",
      "followers_url": "https://api.github.com/users/wyuenho/followers",
      "following_url": "https://api.github.com/users/wyuenho/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyuenho/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyuenho/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyuenho/subscriptions",
      "organizations_url": "https://api.github.com/users/wyuenho/orgs",
      "repos_url": "https://api.github.com/users/wyuenho/repos",
      "events_url": "https://api.github.com/users/wyuenho/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyuenho/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 67,
    "created_at": "2014-01-15T19:13:49Z",
    "updated_at": "2014-04-07T20:00:43Z",
    "closed_at": "2014-02-21T15:17:22Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2959",
      "html_url": "https://github.com/jashkenas/backbone/pull/2959",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2959.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2959.patch"
    },
    "body": "### This PR improves on PR #2865:\r\n\r\n- Adds a very small polyfill of `addEventListener` and `removeEventListener` for IE8.\r\n- Slightly faster, a much more compact and more compatible `matchesSelector` implementation\r\n- Fixes a bug with `remove` where PR#2865 confuses removal with detachment. `$.fn.remove` will remove event handlers while PR#2865 does not. Failure to do so will make some event handlers depending on this behavior fail. This broke Backgrid.\r\n- A native `setElement` that's more faithful to jQuery's behavior. The code is improved from [Backbone.native](https://github.com/inkling/backbone.native/blob/master/backbone.native.js#L225). Specifically, you can supply an HTML snippet, a CSS selector or a DOM element, just like jQuery.\r\n- No more `useNative` flag and branching. The old `View` had been extracted into `BaseView` and `_ensureElement`, `setElement`, `delegateEvents` and `undelegateEvents` uses native APIs. So Backbone will have a baseline View that's fast by default.\r\n- `BaseView#$` just delegates to `this.el.querySelectorAll` and returns a node list.\r\n- Removes `View#find` and `View#findAll`. They add no value and it's not even the correct implementation of the proposed [Selectors API Level 2](http://www.w3.org/TR/2012/WD-selectors-api2-20120628/#the-apis) spec.\r\n- Introduces `_delegateEvents` and `_undelegateEvents` for subclasses to override.\r\n- Much much more compact implementation of `BaseView#_delegateEvent` and `BaseView#_undelegateEvents` in place of `util.delegate` and `util.undelegate`. `BaseView#_delegateEvent` will also work on IE8.\r\n- Removes the superfluous jQuery shim that's `utils`. This PR has effectively removes hard dependency on jQuery already by pulling out a BaseView that's basically the old view + 2 hooks and all native DOM API calls. The only remaining dep on `$.ajax` can be overcome easily by replacing Backbone.ajax with one of the many $.ajax alternative implementations out there.\r\n- The new `Backbone.View` is a 26 line extremely light weight subclass of `Backbone.BaseView` that's 100% backward compatible with the old jQuery-based View.\r\n- Comments everywhere and better tests.\r\n- A few less LOC in the Router than #2865 due to the event listener polyfills.\r\n\r\n### Tests passed on:\r\n- IE 8+\r\n- Chrome\r\n- Firefox\r\n- Safari\r\n- Opera\r\n\r\n### Performance:\r\nhttp://jsperf.com/backbone-patch-22be8f9/2\r\n\r\nAround 70% faster than the jQuery-based View and slightly faster than #2865, by a couple of percentages consistently.\r\n\r\n### Remaining issues:\r\n- Should `BaseView` be called something else? Should the native View subclass a refactored jQuery-based View instead? Code size will be exactly the same.\r\n- IE 8 support in `BaseView`? See options [here](https://github.com/jashkenas/backbone/pull/2959#issuecomment-35181926).\r\n\r\ncc. @paulmillr @akre54 "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2950",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2950/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2950/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2950/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2950",
    "id": 25399097,
    "number": 2950,
    "title": "Server interaction callback \"always\" (jQuery inspired)",
    "user": {
      "login": "darrrk",
      "id": 1832800,
      "avatar_url": "https://avatars.githubusercontent.com/u/1832800?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darrrk",
      "html_url": "https://github.com/darrrk",
      "followers_url": "https://api.github.com/users/darrrk/followers",
      "following_url": "https://api.github.com/users/darrrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/darrrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darrrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darrrk/subscriptions",
      "organizations_url": "https://api.github.com/users/darrrk/orgs",
      "repos_url": "https://api.github.com/users/darrrk/repos",
      "events_url": "https://api.github.com/users/darrrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darrrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2014-01-10T14:50:57Z",
    "updated_at": "2014-01-13T20:36:06Z",
    "closed_at": "2014-01-10T16:40:51Z",
    "body": "In many cases more useful to use always callback for avoiding excess code.\r\n\r\n    some_model.fetch\r\n      success: ->\r\n        # code\r\n      error: ->\r\n        # similar code\r\n\r\nBetter:\r\n\r\n    some_model.fetch\r\n      always: ->\r\n        # laconic code\r\n\r\nAnd built-in events too:\r\n\r\n    some_model.once \"sync\", ->\r\n      # I must clear error event\r\n    some_model.once \"error\", ->\r\n      # I must clear sync event\r\n\r\nMaybe:\r\n\r\n    some_model.once \"always\", ->\r\n      # I forgot about clear events"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2944",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2944/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2944/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2944/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2944",
    "id": 25112037,
    "number": 2944,
    "title": "In newer versions of Backbone, cannot get query from Backbone.history",
    "user": {
      "login": "jisaacks",
      "id": 1355481,
      "avatar_url": "https://avatars.githubusercontent.com/u/1355481?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jisaacks",
      "html_url": "https://github.com/jisaacks",
      "followers_url": "https://api.github.com/users/jisaacks/followers",
      "following_url": "https://api.github.com/users/jisaacks/following{/other_user}",
      "gists_url": "https://api.github.com/users/jisaacks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jisaacks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jisaacks/subscriptions",
      "organizations_url": "https://api.github.com/users/jisaacks/orgs",
      "repos_url": "https://api.github.com/users/jisaacks/repos",
      "events_url": "https://api.github.com/users/jisaacks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jisaacks/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-01-06T16:33:55Z",
    "updated_at": "2014-01-06T22:18:36Z",
    "closed_at": "2014-01-06T22:18:36Z",
    "body": "I am writing a plugin for route management for Backbone.js.\r\n\r\nI have noticed that a recent change in commit f0572b0e511d25d982c4c022d1824adb37bbee7e for issue #2765 makes it so that `Backbone.history.fragment` no longer returns the query. Getting the full fragment with query is very useful. I know It can be manually parsed from the URL but then you have to worry about if **pushState** is on and whatever other options effect how Backbone.history works. So I find it would be best to get it directly from `Backbone.history`.\r\n\r\nThe fix could be as simple as keeping a reference called something like **Backbone.history.queryfragment** (or whatever name makes most sense) and storing a reference just before replacing with `pathStripper`\r\n\r\nI would be interested doing a PR for this. Please let me know.\r\n\r\nThanks."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2943",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2943/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2943/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2943/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2943",
    "id": 25104788,
    "number": 2943,
    "title": "Add an event for Collection#create so the request is not lost when using { wait: true }",
    "user": {
      "login": "TheCloudlessSky",
      "id": 613788,
      "avatar_url": "https://avatars.githubusercontent.com/u/613788?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheCloudlessSky",
      "html_url": "https://github.com/TheCloudlessSky",
      "followers_url": "https://api.github.com/users/TheCloudlessSky/followers",
      "following_url": "https://api.github.com/users/TheCloudlessSky/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheCloudlessSky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheCloudlessSky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheCloudlessSky/subscriptions",
      "organizations_url": "https://api.github.com/users/TheCloudlessSky/orgs",
      "repos_url": "https://api.github.com/users/TheCloudlessSky/repos",
      "events_url": "https://api.github.com/users/TheCloudlessSky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheCloudlessSky/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-01-06T14:36:58Z",
    "updated_at": "2014-01-14T19:30:26Z",
    "closed_at": "2014-01-14T19:03:27Z",
    "body": "We listen to `sync`/`request` events and hook into the promise nature of the `xhr` to show loading status, disable buttons etc. For example, when adding a new comment, we use `{ wait: true}` and freeze the textarea and button. \r\n\r\n```javascript\r\n// This could be in a view that is different than the code that does the request.\r\nthis.listentTo(model, 'request', function(model, xhr) {\r\n  this.freezeAddComment();\r\n  xhr.always(this.thawAddComment)\r\n  .done(this.resetComment)\r\n  .fail(this.showCommentError);\r\n});\r\n```\r\n\r\nWhen using `Collection#create()` with `{ wait: true }`, the request to save the new model is lost.\r\n\r\nTherefore, I suggest we add something like a `create` event that occurs on the collection after the request is made. Currently, we have a custom `sync` that does this:\r\n\r\n```javascript\r\nsync: function(method, model, options) {\r\n\r\n  var xhr = Model.prototype.sync.apply(this, arguments);\r\n\r\n  var collection = model.collection;\r\n  if (method === 'create' && collection) {\r\n    collection.trigger('create', model, collection, xhr, options);\r\n  }\r\n\r\n  return xhr;\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2928",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2928/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2928/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2928/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2928",
    "id": 24490803,
    "number": 2928,
    "title": "Pass along jqXhr, status and errorThrown from jqXhr callbacks",
    "user": {
      "login": "c960657",
      "id": 111346,
      "avatar_url": "https://avatars.githubusercontent.com/u/111346?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/c960657",
      "html_url": "https://github.com/c960657",
      "followers_url": "https://api.github.com/users/c960657/followers",
      "following_url": "https://api.github.com/users/c960657/following{/other_user}",
      "gists_url": "https://api.github.com/users/c960657/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/c960657/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/c960657/subscriptions",
      "organizations_url": "https://api.github.com/users/c960657/orgs",
      "repos_url": "https://api.github.com/users/c960657/repos",
      "events_url": "https://api.github.com/users/c960657/events{/privacy}",
      "received_events_url": "https://api.github.com/users/c960657/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 18,
    "created_at": "2013-12-18T13:54:33Z",
    "updated_at": "2014-03-16T12:43:50Z",
    "closed_at": "2014-03-16T12:43:50Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2928",
      "html_url": "https://github.com/jashkenas/backbone/pull/2928",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2928.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2928.patch"
    },
    "body": "In options.error() it would be useful to get access to the statusText argument passed to jqXhr.error() to know some more about the error.\r\n\r\nThis patch passes along all parameters from the jqXhr callbacks to callbacks and event handlers.\r\n\r\nThis was previously suggested in #485, but I don't think it was actually implemented (or it has been changed again later). Simply getting the response object is not sufficient - AFAICT the statusText and errorThrown arguments are not available on the response object. It was also suggested in #2147, but this PR was closed without any discussion.\r\n\r\nThe order of the arguments is not consistent between success() and error(). This just maintains status quo, but it does make the issue more visible. Not sure what to do about this without breaking BC."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2922",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2922/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2922/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2922/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2922",
    "id": 24362774,
    "number": 2922,
    "title": "Model with id \"undefined\" returned by collection.get(obj)",
    "user": {
      "login": "TrevorBurnham",
      "id": 224895,
      "avatar_url": "https://avatars.githubusercontent.com/u/224895?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrevorBurnham",
      "html_url": "https://github.com/TrevorBurnham",
      "followers_url": "https://api.github.com/users/TrevorBurnham/followers",
      "following_url": "https://api.github.com/users/TrevorBurnham/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrevorBurnham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrevorBurnham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrevorBurnham/subscriptions",
      "organizations_url": "https://api.github.com/users/TrevorBurnham/orgs",
      "repos_url": "https://api.github.com/users/TrevorBurnham/repos",
      "events_url": "https://api.github.com/users/TrevorBurnham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrevorBurnham/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-12-16T16:58:13Z",
    "updated_at": "2014-03-12T14:38:50Z",
    "closed_at": "2014-01-14T19:06:53Z",
    "body": "@caseywebdev The `Collection::get` method defined by 01d9f0f9b1e85cb21a2940902bc8ba4280c8bca9 has this odd behavior when the collection contains a model with the id `\"undefined\"`: `collection.get(obj)` will return that model whenever `obj.id` is `undefined`. An odd edge case, I know, but believe it or not I ran into this in a production application... among other things, it means that\r\n\r\n    new Backbone.Collection([{id: 'undefined'}, {id: 'foo'}, {id: 'bar'}])\r\n\r\nwill create a collection with length `1`.\r\n\r\nWhat was wrong with the [Backbone 1.0.0 definition](https://github.com/jashkenas/backbone/blob/1.0.0/backbone.js#L786) of `get`, which explicitly checked for this case?\r\n\r\n    return this._byId[obj.id != null ? obj.id : obj.cid || obj];\r\n\r\nRelated to #2847."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2899",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2899/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2899/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2899/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2899",
    "id": 23428120,
    "number": 2899,
    "title": "add field for using cookies in addition to urls",
    "user": {
      "login": "L8D",
      "id": 2355315,
      "avatar_url": "https://avatars.githubusercontent.com/u/2355315?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/L8D",
      "html_url": "https://github.com/L8D",
      "followers_url": "https://api.github.com/users/L8D/followers",
      "following_url": "https://api.github.com/users/L8D/following{/other_user}",
      "gists_url": "https://api.github.com/users/L8D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/L8D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/L8D/subscriptions",
      "organizations_url": "https://api.github.com/users/L8D/orgs",
      "repos_url": "https://api.github.com/users/L8D/repos",
      "events_url": "https://api.github.com/users/L8D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/L8D/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-11-28T03:01:36Z",
    "updated_at": "2013-12-02T15:59:16Z",
    "closed_at": "2013-12-02T15:51:51Z",
    "body": "Just an idea that I think will be very complementary to Backbone would be cookie io\r\n\r\nBasically, there is a `cookie` attribute that is equivalent to `url` in which `fetch()` would look for the url attribute and then fallback to the cookie one, and then try and parse data from `document.cookie` instead of doing an HTTP request to a server. Also, the save method for models and collections would then encode the data into `document.cookie`."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2861",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2861/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2861/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2861/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2861",
    "id": 22270481,
    "number": 2861,
    "title": "Global events delegation",
    "user": {
      "login": "arcanis",
      "id": 1037931,
      "avatar_url": "https://avatars.githubusercontent.com/u/1037931?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arcanis",
      "html_url": "https://github.com/arcanis",
      "followers_url": "https://api.github.com/users/arcanis/followers",
      "following_url": "https://api.github.com/users/arcanis/following{/other_user}",
      "gists_url": "https://api.github.com/users/arcanis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arcanis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arcanis/subscriptions",
      "organizations_url": "https://api.github.com/users/arcanis/orgs",
      "repos_url": "https://api.github.com/users/arcanis/repos",
      "events_url": "https://api.github.com/users/arcanis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arcanis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-11-07T14:52:10Z",
    "updated_at": "2014-01-17T23:36:34Z",
    "closed_at": "2013-11-07T15:16:59Z",
    "body": "Hi,\r\n\r\nIn some use case, the developer wants to bind an event on a specific element unrelated to the view. For example, when implementing a custom select box, the developer will want to close the select area when a click happens anywhere else.\r\n\r\nIt is currently possible by overloading the `delegateEvents` and `undelegateEvents` methods to manually attach and detach these events; however, this approach is a bit complex and more error-prone than standard `events` mapping.\r\n\r\nMy proposal would be to allow a special tag which would basically say that we don't want to stay in the scope of the view. If we take the select box example, we could have this kind of event definition :\r\n\r\n```js\r\nBackbone.View.extend( {\r\n    events : {\r\n        'click .toggle' : 'toggleEvent',\r\n        'click @global body' : 'closeEvent'\r\n    }\r\n} );\r\n```\r\n\r\nSuch thing would have multiple benefits :\r\n\r\n- It would allow an **easy global event handling** (which is the whole point ;)\r\n- It would **not break backward compatibility**, neither mess with jQuery / Sizzle\r\n- It would be **self-documented**, a reader would immediately know that the selector is not view-limited\r\n\r\nIt would have those inconvenients :\r\n\r\n- **A bit more code** to check if the selector starts by this keyword, but I don't think that performances would be very affected by an `indexOf` call (especially with Harmony's `String#startsWith`)\r\n- Some developers could be **encouraged to use global event instead of view-limited ones** without good reason. However, the same thing can be sayed for almost everything, and using a keyword such as `@global` allows to be sure that the developer is aware of the implications.\r\n\r\nI can write a draft implementation if you wish."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2779",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2779/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2779/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2779/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2779",
    "id": 19985666,
    "number": 2779,
    "title": "Allow passing of a custom merge function to Collection set()",
    "user": {
      "login": "blackvectrex",
      "id": 1772066,
      "avatar_url": "https://avatars.githubusercontent.com/u/1772066?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blackvectrex",
      "html_url": "https://github.com/blackvectrex",
      "followers_url": "https://api.github.com/users/blackvectrex/followers",
      "following_url": "https://api.github.com/users/blackvectrex/following{/other_user}",
      "gists_url": "https://api.github.com/users/blackvectrex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blackvectrex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blackvectrex/subscriptions",
      "organizations_url": "https://api.github.com/users/blackvectrex/orgs",
      "repos_url": "https://api.github.com/users/blackvectrex/repos",
      "events_url": "https://api.github.com/users/blackvectrex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blackvectrex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2013-09-24T15:28:29Z",
    "updated_at": "2013-09-24T22:50:52Z",
    "closed_at": "2013-09-24T21:57:30Z",
    "body": "The merge routine in Collection set() makes the assumption that if Model/Models are passed in, then merging using their model.attributes is sufficient. This is not always the case. You might have other important instance members on the model that are not in the model.attributes.\r\n\r\nAn optional merge function to Collection set() would allow total control on what should be merged from one model to the other. Or, the merge routine should be broken out of set() so it can be safely overridden without having to completely override set()."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2759",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2759/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2759/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2759/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2759",
    "id": 19471537,
    "number": 2759,
    "title": "Resort collection on model change",
    "user": {
      "login": "zakjan",
      "id": 173585,
      "avatar_url": "https://avatars.githubusercontent.com/u/173585?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zakjan",
      "html_url": "https://github.com/zakjan",
      "followers_url": "https://api.github.com/users/zakjan/followers",
      "following_url": "https://api.github.com/users/zakjan/following{/other_user}",
      "gists_url": "https://api.github.com/users/zakjan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zakjan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zakjan/subscriptions",
      "organizations_url": "https://api.github.com/users/zakjan/orgs",
      "repos_url": "https://api.github.com/users/zakjan/repos",
      "events_url": "https://api.github.com/users/zakjan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zakjan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2013-09-13T19:25:38Z",
    "updated_at": "2013-10-10T13:06:25Z",
    "closed_at": "2013-10-10T13:06:25Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2759",
      "html_url": "https://github.com/jashkenas/backbone/pull/2759",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2759.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2759.patch"
    },
    "body": "When a model is changed via set method, collection needed to be sorted manually.\r\nIf collection has comparator, it makes more sense to have automatic resorting capability in every possible case than to don't have it.\r\n\r\nThis pull request adds automatic resorting to `collection._onModelChange`, when it is triggered by model `change` event.\r\nAutomatic sorting can be disabled by passing `{sort: false}` to `model.set`.\r\n\r\nFixes #689\r\n\r\nIf performance is issue, like when making multiple changes in a row, automatic sorting can be disabled and then triggered manually."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2758",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2758/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2758/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2758/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2758",
    "id": 19400747,
    "number": 2758,
    "title": "Callback before element created",
    "user": {
      "login": "ghost",
      "id": 10137,
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-09-12T17:08:06Z",
    "updated_at": "2013-09-12T17:14:15Z",
    "closed_at": "2013-09-12T17:14:09Z",
    "body": "There is no callback before element will be created.\r\n\r\nSometimes needed to pass some attribues into constructor and extend default view attributes with attributes from constructor and apply to element.\r\n\r\nView.js\r\n<pre>\r\nvar View = Backbone.View.extend({\r\n    attributes: {\r\n        \"data-role\": \"view\"\r\n    },\r\n    beforeCreateElement: function () {\r\n        //apply all attribues\r\n        this.attributes = _.extend(this.attributes, this.options.attrs);\r\n    }\r\n});\r\n</pre>\r\napp.js\r\n<pre>\r\nvar view = new View({\r\n     attrs: {\r\n          \"class\": \"hello\",\r\n          \"data-type\": \"world\"\r\n     }\r\n});\r\n</pre>"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2721",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2721/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2721/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2721/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2721",
    "id": 17969316,
    "number": 2721,
    "title": "Router: Better Catch-All (/.*/) Route",
    "user": {
      "login": "machineghost",
      "id": 448908,
      "avatar_url": "https://avatars.githubusercontent.com/u/448908?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/machineghost",
      "html_url": "https://github.com/machineghost",
      "followers_url": "https://api.github.com/users/machineghost/followers",
      "following_url": "https://api.github.com/users/machineghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/machineghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/machineghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/machineghost/subscriptions",
      "organizations_url": "https://api.github.com/users/machineghost/orgs",
      "repos_url": "https://api.github.com/users/machineghost/repos",
      "events_url": "https://api.github.com/users/machineghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/machineghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2013-08-12T22:17:09Z",
    "updated_at": "2014-09-23T13:53:34Z",
    "closed_at": "2013-08-14T09:10:24Z",
    "body": "The inclusion of a \"*notFound\" route was a real improvement for Backbone ... but it's not quite perfect.  One major issue is that it has to be the last route defined, which isn't always so simple (eg. if you have multiple routers or routes being manually registered in Required files).  This is enough of a problem in fact that someone went and made a whole plug-in just to deal with it (https://github.com/STRML/backbone.routeNotFound).  Hopefully if you look at that plug-in's source you'll agree that it shouldn't need to exist.\r\n\r\nSo rather than making the 404 (or \"page not found\") route something implicit that people have to struggle to get in to the right position, could you please consider adding an explicit `Backbone.History.pageNotFound` (or something similar) method?\r\n\r\nIn other words, inside of `Backbone.History.loadUrl` instead of its current return line:\r\n\r\n    return matched;\r\n\r\nif it did:\r\n\r\n    return matched || this.pageNotFound();\r\n\r\nthat would be really great, and super easy.  It'd be a little dirty though, because what's supposed to get returned there is a matching route, not the output of a route, so maybe a slightly cleaner way of doing it would be to have a `Backbone.History.registerPageNotFound` method and then do:\r\n\r\n    return matched || this.getRegisteredPageNotFoundRoute();\r\n\r\nOr I could see at least a couple other variations; the important thing is just that it would be really awesome if I could say \"Backbone do this when there's no route defined\" instead of \"Backbone, do this if there's no route defined ... but god help me if I say that before all my routes are registered\" ;-)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2673",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2673/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2673/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2673/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2673",
    "id": 16729527,
    "number": 2673,
    "title": "Version bump",
    "user": {
      "login": "lukeasrodgers",
      "id": 816444,
      "avatar_url": "https://avatars.githubusercontent.com/u/816444?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukeasrodgers",
      "html_url": "https://github.com/lukeasrodgers",
      "followers_url": "https://api.github.com/users/lukeasrodgers/followers",
      "following_url": "https://api.github.com/users/lukeasrodgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukeasrodgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukeasrodgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukeasrodgers/subscriptions",
      "organizations_url": "https://api.github.com/users/lukeasrodgers/orgs",
      "repos_url": "https://api.github.com/users/lukeasrodgers/repos",
      "events_url": "https://api.github.com/users/lukeasrodgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukeasrodgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 21,
    "created_at": "2013-07-14T15:57:44Z",
    "updated_at": "2013-10-11T01:01:43Z",
    "closed_at": "2013-10-11T01:00:19Z",
    "body": "The desirability of a patch level version bump was first mentioned about 3 months ago (#2416), and this particular issue has tripped me (and apparently others) up a couple times. \r\n\r\nI haven't been following the issues and PRs religiously, but I don't recall anything making it into master that would necessitate minor version bump."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2660",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2660/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2660/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2660/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2660",
    "id": 16423360,
    "number": 2660,
    "title": "Make ajax a local method to Models/Collections",
    "user": {
      "login": "davidkaneda",
      "id": 21713,
      "avatar_url": "https://avatars.githubusercontent.com/u/21713?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidkaneda",
      "html_url": "https://github.com/davidkaneda",
      "followers_url": "https://api.github.com/users/davidkaneda/followers",
      "following_url": "https://api.github.com/users/davidkaneda/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidkaneda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidkaneda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidkaneda/subscriptions",
      "organizations_url": "https://api.github.com/users/davidkaneda/orgs",
      "repos_url": "https://api.github.com/users/davidkaneda/repos",
      "events_url": "https://api.github.com/users/davidkaneda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidkaneda/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2013-07-06T00:03:12Z",
    "updated_at": "2013-07-08T19:26:27Z",
    "closed_at": "2013-07-06T12:34:48Z",
    "body": "Currently it looks like Models use Backbone.ajax when syncing: which can be overridden and is global, but, for me, it would be great if I could manipulate the ajax request on a model-by-model basis. For example: If I have one model that connects to an API which requires a CSRF token, but another model requests to a different API that chokes on unnecessary parameters — I can't use $.ajaxOptions to set the CSRF everywhere, and am currently forced to review the request string in beforeSend.\r\n\r\nWould feel cleaner/more OO to me to be able to override an ajax method on Models. Please let me know if I'm making sense (I can drum up other examples where this would have been nice), or if I'm overlooking a better way to do this currently-\r\n\r\nThanks!\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2642",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2642/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2642/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2642/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2642",
    "id": 16119491,
    "number": 2642,
    "title": "collection.clone() supports options deep",
    "user": {
      "login": "docyes",
      "id": 52890,
      "avatar_url": "https://avatars.githubusercontent.com/u/52890?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/docyes",
      "html_url": "https://github.com/docyes",
      "followers_url": "https://api.github.com/users/docyes/followers",
      "following_url": "https://api.github.com/users/docyes/following{/other_user}",
      "gists_url": "https://api.github.com/users/docyes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/docyes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/docyes/subscriptions",
      "organizations_url": "https://api.github.com/users/docyes/orgs",
      "repos_url": "https://api.github.com/users/docyes/repos",
      "events_url": "https://api.github.com/users/docyes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/docyes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-06-27T23:07:56Z",
    "updated_at": "2013-06-29T07:33:17Z",
    "closed_at": "2013-06-29T07:33:17Z",
    "body": "It would be handy if collection.clone()  supported the option to perform a deep clone over shallow (collection only)\r\n\r\n<code>\r\ncollection.clone({deep: true}) -> collection and model(s) are new (toJSON())\r\ncollection.clone() -> collection is new and models are shared references\r\n<code>"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2636",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2636/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2636/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2636/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2636",
    "id": 16006188,
    "number": 2636,
    "title": "Give model.set a parse option",
    "user": {
      "login": "etler",
      "id": 854709,
      "avatar_url": "https://avatars.githubusercontent.com/u/854709?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etler",
      "html_url": "https://github.com/etler",
      "followers_url": "https://api.github.com/users/etler/followers",
      "following_url": "https://api.github.com/users/etler/following{/other_user}",
      "gists_url": "https://api.github.com/users/etler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etler/subscriptions",
      "organizations_url": "https://api.github.com/users/etler/orgs",
      "repos_url": "https://api.github.com/users/etler/repos",
      "events_url": "https://api.github.com/users/etler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 16,
    "created_at": "2013-06-25T22:47:37Z",
    "updated_at": "2014-11-04T00:32:03Z",
    "closed_at": "2013-10-10T19:57:03Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2636",
      "html_url": "https://github.com/jashkenas/backbone/pull/2636",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2636.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2636.patch"
    },
    "body": "Implementing #2627\r\n\r\nTo get the parse option into `model.set` I also created `options.defaults`  so the defaults can be applied after parsing. I'm not sure if we would want to support that, although I can see a use case for wanting to provide fallback values after creating a model the first time.\r\n\r\nTo prevent `options.defaults` from causing the side effect of re-applying defaults on merge in the `collection.set` method, I opted to extend the model constructor options when adding the defaults option. As a result of this, `_prepareModel` can no longer rely on the options side effect from `_validate` to access `options.validationError`, so I repopulate it instead. I think it's best to remove options side effects where possible as they're acting as a way to return extra data from a function, and as a result adds complexity to nested method calls and to the flow of data.\r\n\r\nBy moving parsing into `model.set`, I was also able to remove the `options._attrs` side effect hack for merging models. `options._attrs` was being used to return the post parsed attributes to `collection.set` for merging, but now that parsing is done within `model.set`, that is no longer necessary, and we can just send `model.set` the original copy of the attributes, and have it re-parse them there.\r\n\r\nIt would be better to find a way to do this without `options.defaults`, as that is out of the scope of this issue, but by doing things this way I was able to remove `options._attrs`, which to me seems worse than having `options.defaults`."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2624",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2624/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2624/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2624/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2624",
    "id": 15748742,
    "number": 2624,
    "title": "Merging Models recursively",
    "user": {
      "login": "michalochman",
      "id": 1628450,
      "avatar_url": "https://avatars.githubusercontent.com/u/1628450?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michalochman",
      "html_url": "https://github.com/michalochman",
      "followers_url": "https://api.github.com/users/michalochman/followers",
      "following_url": "https://api.github.com/users/michalochman/following{/other_user}",
      "gists_url": "https://api.github.com/users/michalochman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michalochman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michalochman/subscriptions",
      "organizations_url": "https://api.github.com/users/michalochman/orgs",
      "repos_url": "https://api.github.com/users/michalochman/repos",
      "events_url": "https://api.github.com/users/michalochman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michalochman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-06-19T14:50:29Z",
    "updated_at": "2013-06-19T15:42:17Z",
    "closed_at": "2013-06-19T15:42:17Z",
    "body": "I have encountered an issue trying to update Model in a Collection with partial data, when my Model had a collection in one of its attributes. I've been using `Collection#add` method with `{merge: true}` options hoping to have my nested collection merged too. Instead, it was completely replaced by the new value. The problem is that current `Model#set` method:\r\n\r\n    unset ? delete current[attr] : current[attr] = val;\r\n\r\nis simply replacing the attribute value not considering possible merge when current[attr] is an instance of `Backbone.Collection`, which I feel would be desired behavior.\r\n\r\nI have slightly changed it, only to check whether this \"recursive\" merging is desired and possible:\r\n\r\n    unset ?\r\n        delete current[attr] : \r\n            merge && recursive && current[attr] instanceof Backbone.Collection && val instanceof Backbone.Collection ?\r\n                current[attr].add(val.models, { merge: true }) : current[attr] = val;\r\n\r\nwhere `merge` and `recursive` are passed as `Model#set` options:\r\n\r\n    merge           = options.merge;\r\n    recursive       = options.recursive;\r\n\r\nThe reason I've included additional `recursive` option to `Model#set` is because I didn't want to break existing functionality which replaces nested collection instead of merging it.\r\n\r\nSimilar request was reported already (#2316) but in my opinion the proposed solution wasn't generic enough to be merged with Backbone itself.\r\n\r\nI have already created a patch and wrote the tests and it looks like it's working really well. I will push it to my fork in a minute and issue a pull request for you to consider."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2617",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2617/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2617/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2617/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2617",
    "id": 15625771,
    "number": 2617,
    "title": "Enhancement in Collection.add regarding 'add' events sent when adding an array of models ...",
    "user": {
      "login": "loicraux",
      "id": 3329077,
      "avatar_url": "https://avatars.githubusercontent.com/u/3329077?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/loicraux",
      "html_url": "https://github.com/loicraux",
      "followers_url": "https://api.github.com/users/loicraux/followers",
      "following_url": "https://api.github.com/users/loicraux/following{/other_user}",
      "gists_url": "https://api.github.com/users/loicraux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/loicraux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/loicraux/subscriptions",
      "organizations_url": "https://api.github.com/users/loicraux/orgs",
      "repos_url": "https://api.github.com/users/loicraux/repos",
      "events_url": "https://api.github.com/users/loicraux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/loicraux/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-06-17T10:30:47Z",
    "updated_at": "2014-01-20T19:42:21Z",
    "closed_at": "2013-06-17T12:52:42Z",
    "body": "When calling `Collection.add` with an array of models, the event `'add'` is triggered as many times as there are models in the array.\r\n\r\nAs an enhancement, could it be possible to also trigger 2 extra events (in `Collection.set` implementation) :\r\n\r\n* `'addStarted'` event, triggered before the loop of `'add'` events sent, with an index\r\n* `'addEnded'` event, triggered after the loop of `'add'` events sent\r\n\r\nThis way, Views for example can create the fragment of DOM when they receive the addStarted event, add sub-fragment of DOM each time they receive an 'add' event and eventually inject this whole fragment in the document when they receive the 'addEnded' event !"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2608",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2608/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2608/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2608/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2608",
    "id": 15391662,
    "number": 2608,
    "title": "A new Collection.refresh method to alias fetch({ reset: true })",
    "user": {
      "login": "danharper",
      "id": 510740,
      "avatar_url": "https://avatars.githubusercontent.com/u/510740?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danharper",
      "html_url": "https://github.com/danharper",
      "followers_url": "https://api.github.com/users/danharper/followers",
      "following_url": "https://api.github.com/users/danharper/following{/other_user}",
      "gists_url": "https://api.github.com/users/danharper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danharper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danharper/subscriptions",
      "organizations_url": "https://api.github.com/users/danharper/orgs",
      "repos_url": "https://api.github.com/users/danharper/repos",
      "events_url": "https://api.github.com/users/danharper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danharper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2013-06-11T10:18:16Z",
    "updated_at": "2013-06-11T15:26:23Z",
    "closed_at": "2013-06-11T15:26:23Z",
    "body": "I was wondering is there's a general interest in a Collection.refresh() method to function as an alias (or replacement) of Collection.fetch({ reset: true })?\r\n\r\nPassing an options object to `fetch` seems a pretty inelegant solution."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2603",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2603/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2603/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2603/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2603",
    "id": 15351376,
    "number": 2603,
    "title": "Nested attribute selector",
    "user": {
      "login": "PepijnSenders",
      "id": 2052659,
      "avatar_url": "https://avatars.githubusercontent.com/u/2052659?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PepijnSenders",
      "html_url": "https://github.com/PepijnSenders",
      "followers_url": "https://api.github.com/users/PepijnSenders/followers",
      "following_url": "https://api.github.com/users/PepijnSenders/following{/other_user}",
      "gists_url": "https://api.github.com/users/PepijnSenders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PepijnSenders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PepijnSenders/subscriptions",
      "organizations_url": "https://api.github.com/users/PepijnSenders/orgs",
      "repos_url": "https://api.github.com/users/PepijnSenders/repos",
      "events_url": "https://api.github.com/users/PepijnSenders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PepijnSenders/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-06-10T14:54:37Z",
    "updated_at": "2013-08-26T02:07:22Z",
    "closed_at": "2013-06-10T15:38:22Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2603",
      "html_url": "https://github.com/jashkenas/backbone/pull/2603",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2603.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2603.patch"
    },
    "body": "Ran into the problem, that it's quite ugly to get a value which is nested within an attribute. Momentarily this is done like this: model.get(\"address\").street_name. With my addition it is done like the the following: model.get(\"address.street_name\"), off course model.get(\"address\") also still works."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2601",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2601/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2601/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2601/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2601",
    "id": 15345779,
    "number": 2601,
    "title": "expose a Backbone.Object or Backbone.BaseObject to use as a base for our own object",
    "user": {
      "login": "opensas",
      "id": 481687,
      "avatar_url": "https://avatars.githubusercontent.com/u/481687?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/opensas",
      "html_url": "https://github.com/opensas",
      "followers_url": "https://api.github.com/users/opensas/followers",
      "following_url": "https://api.github.com/users/opensas/following{/other_user}",
      "gists_url": "https://api.github.com/users/opensas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/opensas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/opensas/subscriptions",
      "organizations_url": "https://api.github.com/users/opensas/orgs",
      "repos_url": "https://api.github.com/users/opensas/repos",
      "events_url": "https://api.github.com/users/opensas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/opensas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-06-10T13:09:17Z",
    "updated_at": "2013-06-11T01:15:19Z",
    "closed_at": "2013-06-10T23:29:47Z",
    "body": "I think that the initalize and extend methods are pretty useful for our own object\r\n\r\nSo I usually have a BaseObject like this in my projects:\r\n\r\n```javascript\r\nvar BaseObject = function(options) {\r\n  this.initialize.apply(this, arguments);\r\n};\r\n_.extend(BaseObject.prototype, Backbone.Events, {\r\n  initialize: function(options) {},\r\n});\r\n\r\n// The self-propagating extend function that Backbone classes use.\r\nBaseObject.extend = Backbone.Model.extend;\r\n```\r\n\r\n(I also added Events, as you can see)\r\n\r\nI know it's just a couple of trivial lines, but having it ready for using, and adding it to the documentation, would allow more people to be aware of this useful tip\r\n\r\nIf you think it's a good idea and accept pull-requests I'd be glad to help..."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2586",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2586/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2586/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2586/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2586",
    "id": 15147102,
    "number": 2586,
    "title": "Missing request method by sync events",
    "user": {
      "login": "inf3rno",
      "id": 408911,
      "avatar_url": "https://avatars.githubusercontent.com/u/408911?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/inf3rno",
      "html_url": "https://github.com/inf3rno",
      "followers_url": "https://api.github.com/users/inf3rno/followers",
      "following_url": "https://api.github.com/users/inf3rno/following{/other_user}",
      "gists_url": "https://api.github.com/users/inf3rno/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/inf3rno/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/inf3rno/subscriptions",
      "organizations_url": "https://api.github.com/users/inf3rno/orgs",
      "repos_url": "https://api.github.com/users/inf3rno/repos",
      "events_url": "https://api.github.com/users/inf3rno/events{/privacy}",
      "received_events_url": "https://api.github.com/users/inf3rno/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2013-06-04T23:38:23Z",
    "updated_at": "2013-10-21T15:14:18Z",
    "closed_at": "2013-06-05T14:36:32Z",
    "body": "By sync events: request, sync, error we cannot identify which method is currently called, or what was sent to the server. I think the method (create, update, patch, read, delete) can be an important thing. For example if you want to generate error messages automatically you can create a SyncStatusLabel which listens to these events and displays the current status of the request: pending, error / success... To display the proper status message this label should know what is the method of the message..."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2564",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2564/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2564/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2564/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2564",
    "id": 14832984,
    "number": 2564,
    "title": "Allow events object to bind to elements outside of views root element",
    "user": {
      "login": "aronallen",
      "id": 142278,
      "avatar_url": "https://avatars.githubusercontent.com/u/142278?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aronallen",
      "html_url": "https://github.com/aronallen",
      "followers_url": "https://api.github.com/users/aronallen/followers",
      "following_url": "https://api.github.com/users/aronallen/following{/other_user}",
      "gists_url": "https://api.github.com/users/aronallen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aronallen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aronallen/subscriptions",
      "organizations_url": "https://api.github.com/users/aronallen/orgs",
      "repos_url": "https://api.github.com/users/aronallen/repos",
      "events_url": "https://api.github.com/users/aronallen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aronallen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-05-28T10:27:44Z",
    "updated_at": "2013-05-29T09:35:22Z",
    "closed_at": "2013-05-29T00:34:01Z",
    "body": "Hi,\r\n\r\nI often find myself in situations, where an event that occurs outside an elements boundaries, has relevance for a backbone view, especially when doing complex operations with a mouse. \r\n\r\nLet me give an example, I want a toolbar to appear when I shake the mouse, but it should appear if I shake the mouse anywhere in the document, to get this to work properly now i need to make my own bindings in the initialize function to the correct DOM object, I would love the ability  to bind events in the event object that occur on elements outside the views 'el'.\r\n\r\nI suggest using some keyword as DOCUMENT, and allowing to use css selectors after that to be more specific.\r\n\r\n```javascript\r\nevents {\r\n//this would fire every time the mousemove event fires on the document\r\n \"mousemove DOCUMENT\" : \"show\",\r\n//this would fire every time the mousemove event fires on any .body element in the DOCUMENT\r\n \"mousemove DOCUMENT .body\" : \"show\"\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2549",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2549/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2549/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2549/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2549",
    "id": 14558451,
    "number": 2549,
    "title": "validationAttr",
    "user": {
      "login": "Mystist",
      "id": 1188812,
      "avatar_url": "https://avatars.githubusercontent.com/u/1188812?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mystist",
      "html_url": "https://github.com/Mystist",
      "followers_url": "https://api.github.com/users/Mystist/followers",
      "following_url": "https://api.github.com/users/Mystist/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mystist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mystist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mystist/subscriptions",
      "organizations_url": "https://api.github.com/users/Mystist/orgs",
      "repos_url": "https://api.github.com/users/Mystist/repos",
      "events_url": "https://api.github.com/users/Mystist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mystist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2013-05-21T09:21:14Z",
    "updated_at": "2013-05-22T03:27:09Z",
    "closed_at": "2013-05-22T03:12:54Z",
    "body": "Can we have a `validationAttr` like the `validationError` cause we may want to know the Attr that occurs the error."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2548",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2548/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2548/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2548/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2548",
    "id": 14536165,
    "number": 2548,
    "title": "Allow more than one route to be declared through Router.route",
    "user": {
      "login": "juliansantaana",
      "id": 2467657,
      "avatar_url": "https://avatars.githubusercontent.com/u/2467657?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juliansantaana",
      "html_url": "https://github.com/juliansantaana",
      "followers_url": "https://api.github.com/users/juliansantaana/followers",
      "following_url": "https://api.github.com/users/juliansantaana/following{/other_user}",
      "gists_url": "https://api.github.com/users/juliansantaana/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juliansantaana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juliansantaana/subscriptions",
      "organizations_url": "https://api.github.com/users/juliansantaana/orgs",
      "repos_url": "https://api.github.com/users/juliansantaana/repos",
      "events_url": "https://api.github.com/users/juliansantaana/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juliansantaana/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-05-20T20:01:59Z",
    "updated_at": "2013-06-08T19:46:31Z",
    "closed_at": "2013-06-08T19:46:31Z",
    "body": "Hi, i find myself having to fetch the available routes from DB, i think it would be great if the Router.route method could handle a dictionary (exactly the same as the constructor for the router does for the route parameter), and it would route every route in that dictionary.\r\n\r\nCode:\r\n\r\n```javascript\r\ndictWithRoutes = {\r\n\"route1\": \"methodRoute1\"\r\n, \"route2\": \"methodRoute2\"\r\n, \"route3\": \"methodRoute3\"\r\n}; \r\n\r\nRouter.route(dictWithRoutes); \r\n```\r\n\r\nWhat do you think about this enhancement?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2537",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2537/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2537/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2537/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2537",
    "id": 14342183,
    "number": 2537,
    "title": "Suggestion about extend function",
    "user": {
      "login": "inf3rno",
      "id": 408911,
      "avatar_url": "https://avatars.githubusercontent.com/u/408911?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/inf3rno",
      "html_url": "https://github.com/inf3rno",
      "followers_url": "https://api.github.com/users/inf3rno/followers",
      "following_url": "https://api.github.com/users/inf3rno/following{/other_user}",
      "gists_url": "https://api.github.com/users/inf3rno/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/inf3rno/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/inf3rno/subscriptions",
      "organizations_url": "https://api.github.com/users/inf3rno/orgs",
      "repos_url": "https://api.github.com/users/inf3rno/repos",
      "events_url": "https://api.github.com/users/inf3rno/events{/privacy}",
      "received_events_url": "https://api.github.com/users/inf3rno/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2013-05-15T03:46:38Z",
    "updated_at": "2013-05-21T08:26:50Z",
    "closed_at": "2013-05-17T19:18:06Z",
    "body": "I think many people want to use the extend function of backbone classes on their own classes, because it's a great work. Therefore I suggest that you should add the extend function to the public interface of Backbone, or add a class which can anybody extend. For example:\r\n\r\n    Backbone.Class = function () {\r\n    };\r\n    Backbone.Class.extend = Backbone.Model.extend;\r\n    var My = Backbone.Class.extend(instanceProps, staticProps);"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2490",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2490/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2490/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2490/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2490",
    "id": 13300981,
    "number": 2490,
    "title": "Providing a bare bones convention for nested views",
    "user": {
      "login": "tgriesser",
      "id": 154748,
      "avatar_url": "https://avatars.githubusercontent.com/u/154748?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgriesser",
      "html_url": "https://github.com/tgriesser",
      "followers_url": "https://api.github.com/users/tgriesser/followers",
      "following_url": "https://api.github.com/users/tgriesser/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgriesser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgriesser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgriesser/subscriptions",
      "organizations_url": "https://api.github.com/users/tgriesser/orgs",
      "repos_url": "https://api.github.com/users/tgriesser/repos",
      "events_url": "https://api.github.com/users/tgriesser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgriesser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 74,
    "created_at": "2013-04-17T15:17:50Z",
    "updated_at": "2014-04-23T19:33:17Z",
    "closed_at": "2013-05-18T00:36:28Z",
    "body": "The biggest source of questions/complaints/issues I've encountered with Backbone deals with handling the issue of nested views. Any sufficiently complex application (see: real world applications) has a need for managing views within views, and cleaning up after them properly. The (well received) addition of `listenTo` helps with this to a degree, but I think Backbone could do a bit more.\r\n\r\nThis is something I add to pretty much whatever I'm working with, and it does the job without much overhead or complexity:\r\n\r\n```js\r\nvar View = Backbone.View;\r\nBackbone.View = Backbone.View.extend({\r\n\r\n  constructor: function() {\r\n    this.subviews = [];\r\n    View.apply(this, arguments);\r\n  },\r\n\r\n  addSubview: function(view) {\r\n    if (!(view instanceof Backbone.View)) {\r\n      throw new Error(\"Subviews must be a Backbone.View\");  \r\n    }\r\n    this.subviews.push(view);\r\n    return view;\r\n  },\r\n\r\n  removeSubviews: function() {\r\n    var children = this.subviews;\r\n    for (var i = 0, l = children.length; i<l; i++) {\r\n      children[i].remove();\r\n    }\r\n    this.subviews = [];\r\n    return this;\r\n  },\r\n\r\n  remove: function() {\r\n    this.removeSubviews();\r\n    View.prototype.remove.apply(this, arguments);\r\n  }\r\n});\r\n```\r\n\r\nI completely understand and agree with Backbone's position to keep things simple and not implement applications specific components; at the same time I think providing a very, very basic starting point for this problem would be a great help to many.\r\n\r\nThis starting point could then be extended upon with more opinionated libraries or frameworks like layoutmanager, thorax, marionette, etc.\r\n\r\n/cc @tbranyen"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2488",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2488/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2488/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2488/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2488",
    "id": 13249060,
    "number": 2488,
    "title": "Introduce allChangedAttributes to retrieve all changes since model initialisation",
    "user": {
      "login": "ingoe",
      "id": 2786084,
      "avatar_url": "https://avatars.githubusercontent.com/u/2786084?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ingoe",
      "html_url": "https://github.com/ingoe",
      "followers_url": "https://api.github.com/users/ingoe/followers",
      "following_url": "https://api.github.com/users/ingoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/ingoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ingoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ingoe/subscriptions",
      "organizations_url": "https://api.github.com/users/ingoe/orgs",
      "repos_url": "https://api.github.com/users/ingoe/repos",
      "events_url": "https://api.github.com/users/ingoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ingoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-04-16T14:28:13Z",
    "updated_at": "2013-04-17T22:28:03Z",
    "closed_at": "2013-04-17T22:28:03Z",
    "body": "Similar to changedAttributes introduce a new function which returns all changed attributes since initialisation of a model. This would allow setting attributes on a model multiple times and saving it only once using HTTP PATCH."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2455",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2455/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2455/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2455/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2455",
    "id": 12679025,
    "number": 2455,
    "title": "return from Backbone.history.navigate whether a route was matched.",
    "user": {
      "login": "williamhc",
      "id": 1755752,
      "avatar_url": "https://avatars.githubusercontent.com/u/1755752?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/williamhc",
      "html_url": "https://github.com/williamhc",
      "followers_url": "https://api.github.com/users/williamhc/followers",
      "following_url": "https://api.github.com/users/williamhc/following{/other_user}",
      "gists_url": "https://api.github.com/users/williamhc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/williamhc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/williamhc/subscriptions",
      "organizations_url": "https://api.github.com/users/williamhc/orgs",
      "repos_url": "https://api.github.com/users/williamhc/repos",
      "events_url": "https://api.github.com/users/williamhc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/williamhc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2013-04-01T22:05:59Z",
    "updated_at": "2013-04-04T02:19:18Z",
    "closed_at": "2013-04-04T02:19:04Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2455",
      "html_url": "https://github.com/jashkenas/backbone/pull/2455",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2455.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2455.patch"
    },
    "body": "It can be useful, particularly in Marionette apps where you have multiple routers.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2401",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2401/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2401/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2401/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2401",
    "id": 12228823,
    "number": 2401,
    "title": "Incorporate Design Goal of Backbone.js on home page",
    "user": {
      "login": "hswolff",
      "id": 322576,
      "avatar_url": "https://avatars.githubusercontent.com/u/322576?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hswolff",
      "html_url": "https://github.com/hswolff",
      "followers_url": "https://api.github.com/users/hswolff/followers",
      "following_url": "https://api.github.com/users/hswolff/following{/other_user}",
      "gists_url": "https://api.github.com/users/hswolff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hswolff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hswolff/subscriptions",
      "organizations_url": "https://api.github.com/users/hswolff/orgs",
      "repos_url": "https://api.github.com/users/hswolff/repos",
      "events_url": "https://api.github.com/users/hswolff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hswolff/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-03-20T14:18:49Z",
    "updated_at": "2013-10-10T20:23:10Z",
    "closed_at": "2013-10-10T20:23:02Z",
    "body": "First off congrats everyone on the 1.0 release! Very exciting to see!\r\n\r\nAfter reading @jashkenas' post [announcing the release of Backbone.js](http://ashkenas.com/backbonejs-1.0/) I was struck by the explanation given under the \"What's the on roadmap for Backbone.js beyond 1.0?\" headline:\r\n\r\n>The essential premise at the heart of Backbone has always been to try and discover the minimal set of data-structuring (Models and Collections) and user interface (Views and URLs) primitives that are useful when building web applications with JavaScript. We're going to keep hunting for that specific type of feature, and if you think that you've found one, please send it on in. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be restructured to suit their look, feel, and default behavior — Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.\r\n\r\nI found this to be a very clear explanation of the goals of the Backbone.js project, one that isn't mentioned anywhere in the documentation.  Currently the documentation explains what Backbone.js *is*, but not what it wants to *be*.\r\n\r\nI think adding this paragraph (or one similar) would help guide and focus the development of Backbone.js for all current and new contributors. \r\n\r\nOn the other hand...it may be un-necessary and superfluous to what is currently there, but I'd argue on the contrary. :)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2380",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2380/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2380/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2380/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2380",
    "id": 12081484,
    "number": 2380,
    "title": "Add ability to pass a few callbacks to listenTo",
    "user": {
      "login": "kossnocorp",
      "id": 52201,
      "avatar_url": "https://avatars.githubusercontent.com/u/52201?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kossnocorp",
      "html_url": "https://github.com/kossnocorp",
      "followers_url": "https://api.github.com/users/kossnocorp/followers",
      "following_url": "https://api.github.com/users/kossnocorp/following{/other_user}",
      "gists_url": "https://api.github.com/users/kossnocorp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kossnocorp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kossnocorp/subscriptions",
      "organizations_url": "https://api.github.com/users/kossnocorp/orgs",
      "repos_url": "https://api.github.com/users/kossnocorp/repos",
      "events_url": "https://api.github.com/users/kossnocorp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kossnocorp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-03-15T21:02:09Z",
    "updated_at": "2013-03-15T23:29:54Z",
    "closed_at": "2013-03-15T22:59:07Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2380",
      "html_url": "https://github.com/jashkenas/backbone/pull/2380",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2380.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2380.patch"
    },
    "body": "Hey, it's sometimes useful to pass a few callbacks to `listenTo` function.\r\n\r\nFor example:\r\n\r\n``` js\r\n// Menu view\r\nBackbone.View.extend({\r\n  initialize: function() {\r\n    // * this.notifications is collection of user notifications;\r\n    // * count of unread notifications should be displayed in \r\n    //   menu (like \"Messages (3)\");\r\n    // * if user receive \"important\" message, for example incoming call,\r\n    //   user should be redirected to page with that call.\r\n    this.listenTo(this.notifications, '', this.updateUnreadCount, this.redirectIfImportant);\r\n  }\r\n});\r\n```\r\n\r\nWithout ability to pass a group of callbacks we should call `listenTo` twice or write a function, that does two things (what is worse).\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2362",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2362/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2362/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2362/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2362",
    "id": 11906117,
    "number": 2362,
    "title": "Allow array of event handlers in View#delegateEvents.",
    "user": {
      "login": "alexgb",
      "id": 78868,
      "avatar_url": "https://avatars.githubusercontent.com/u/78868?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexgb",
      "html_url": "https://github.com/alexgb",
      "followers_url": "https://api.github.com/users/alexgb/followers",
      "following_url": "https://api.github.com/users/alexgb/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexgb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexgb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexgb/subscriptions",
      "organizations_url": "https://api.github.com/users/alexgb/orgs",
      "repos_url": "https://api.github.com/users/alexgb/repos",
      "events_url": "https://api.github.com/users/alexgb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexgb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 15,
    "created_at": "2013-03-12T01:28:03Z",
    "updated_at": "2014-05-04T02:43:35Z",
    "closed_at": "2013-03-15T23:21:10Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2362",
      "html_url": "https://github.com/jashkenas/backbone/pull/2362",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2362.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2362.patch"
    },
    "body": "It can be useful to define multiple independent event handlers for a single event + selector combination. This helps promote reusable event handler methods, for example:\r\n\r\n```javascript\r\n\r\nBackbone.View.extend({\r\n  events: {\r\n    \"mouseover .map\":    [\"showTip\", \"moveTip\"],\r\n    \"mousemove .map\":    \"moveTip\",\r\n    \"mouseout .map\":     \"hideTip\"\r\n  }\r\n});\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2358",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2358/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2358/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2358/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2358",
    "id": 11892454,
    "number": 2358,
    "title": "Add the ability to remove attributes on models when syncing",
    "user": {
      "login": "ansman",
      "id": 102883,
      "avatar_url": "https://avatars.githubusercontent.com/u/102883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ansman",
      "html_url": "https://github.com/ansman",
      "followers_url": "https://api.github.com/users/ansman/followers",
      "following_url": "https://api.github.com/users/ansman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ansman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ansman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ansman/subscriptions",
      "organizations_url": "https://api.github.com/users/ansman/orgs",
      "repos_url": "https://api.github.com/users/ansman/repos",
      "events_url": "https://api.github.com/users/ansman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ansman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-03-11T19:06:46Z",
    "updated_at": "2013-03-12T16:32:41Z",
    "closed_at": "2013-03-12T16:32:41Z",
    "body": "Our API omits keys with `null` values so it becomes a problem when you sync a model that have had an attribute removed on the server.\r\n\r\nHere's an example of the problem:\r\n\r\n```javascript\r\nBackbone.sync = function(method, model, options) {\r\n  options.success(model, {id: 3, bar: 'foo'});\r\n}\r\n\r\nvar model = new Backbone.Model({id: 3, foo: 'bar'});\r\nconsole.log(model.toJSON()); // => {id: 3, foo: 'bar'}\r\nmodel.fetch();\r\nconsole.log(model.toJSON()); // => {id: 3, foo: 'bar', bar: 'foo'}\r\n```\r\n\r\nI would like the last line to print `{id: 3, bar: 'foo'}`. Perhaps there could be an option that is `replace: true` which would remove attributes missing from the server?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2336",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2336/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2336/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2336/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2336",
    "id": 11668806,
    "number": 2336,
    "title": "Set model property in context. Fire event in context.",
    "user": {
      "login": "RadekMichna",
      "id": 1104043,
      "avatar_url": "https://avatars.githubusercontent.com/u/1104043?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RadekMichna",
      "html_url": "https://github.com/RadekMichna",
      "followers_url": "https://api.github.com/users/RadekMichna/followers",
      "following_url": "https://api.github.com/users/RadekMichna/following{/other_user}",
      "gists_url": "https://api.github.com/users/RadekMichna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RadekMichna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RadekMichna/subscriptions",
      "organizations_url": "https://api.github.com/users/RadekMichna/orgs",
      "repos_url": "https://api.github.com/users/RadekMichna/repos",
      "events_url": "https://api.github.com/users/RadekMichna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RadekMichna/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-03-05T14:29:50Z",
    "updated_at": "2013-03-05T15:10:44Z",
    "closed_at": "2013-03-05T14:48:21Z",
    "body": "Hi, let's say we have code\r\n```javascript\r\nvar Model = Backbone.Model.extend({});\r\nvar Context = Backbone.Model.extend({});\r\n\r\nvar m = new Model({attr: \"a\"});\r\nvar c1 = new Context({name: \"c1\"});\r\nvar c2 = new Context({name: \"c2\"});\r\n\r\nm.on(\"change:attr\", function () {\r\n    console.log(this.get(\"name\"));\r\n}, c1);\r\n\r\nm.on(\"change:attr\", function () {\r\n    console.log(this.get(\"name\"));\r\n}, c2);\r\n\r\n// set attr => c1, c2 will be printed\r\nm.set(\"attr\", \"b\");\r\n// trigger event => c1, c2 will be printed\r\nm.trigger(\"change:attr\");\r\n```\r\nWould it be possible to add such feature that one can set property or trigger event in context?\r\n```javascript\r\n// print only c1\r\nm.set(\"attr\", \"b\", {context: c1});\r\n// print only c2\r\nm.trigger(\"change:attr\", c2);\r\n```\r\nThanks, Radek"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2331",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2331/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2331/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2331/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2331",
    "id": 11617421,
    "number": 2331,
    "title": "collection.omit (or similar)",
    "user": {
      "login": "rmarinleal",
      "id": 1807196,
      "avatar_url": "https://avatars.githubusercontent.com/u/1807196?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmarinleal",
      "html_url": "https://github.com/rmarinleal",
      "followers_url": "https://api.github.com/users/rmarinleal/followers",
      "following_url": "https://api.github.com/users/rmarinleal/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmarinleal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmarinleal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmarinleal/subscriptions",
      "organizations_url": "https://api.github.com/users/rmarinleal/orgs",
      "repos_url": "https://api.github.com/users/rmarinleal/repos",
      "events_url": "https://api.github.com/users/rmarinleal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmarinleal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2013-03-04T12:49:19Z",
    "updated_at": "2013-03-04T15:34:07Z",
    "closed_at": "2013-03-04T14:11:28Z",
    "body": "Hello,\r\n\r\nI'm using Backbone as a collections-models manager, and aftes months using it, I've found somethig that i think is very common to use but is not implemented.\r\n\r\nWhen I populate a collection with models by a rest request, I can apply a local where but only returns models than pass the where validation, but what I need is exactly the opposite, I need that backbone return me all models except the ones than apply the conditions.\r\n\r\nI see you implement .omit function in underscore, I need somethng similar tobackbone collections.\r\n\r\nThnaks! (and sorry fot my bad english)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2327",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2327/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2327/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2327/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2327",
    "id": 11561490,
    "number": 2327,
    "title": "Decoupling Backbone.Router and Backbone.history",
    "user": {
      "login": "jaguardev",
      "id": 862639,
      "avatar_url": "https://avatars.githubusercontent.com/u/862639?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaguardev",
      "html_url": "https://github.com/jaguardev",
      "followers_url": "https://api.github.com/users/jaguardev/followers",
      "following_url": "https://api.github.com/users/jaguardev/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaguardev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaguardev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaguardev/subscriptions",
      "organizations_url": "https://api.github.com/users/jaguardev/orgs",
      "repos_url": "https://api.github.com/users/jaguardev/repos",
      "events_url": "https://api.github.com/users/jaguardev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaguardev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 10,
    "created_at": "2013-03-01T20:53:32Z",
    "updated_at": "2013-09-24T20:48:44Z",
    "closed_at": "2013-03-19T07:03:53Z",
    "body": "As a developer I'd like to use different Backbone.Router instances with custom Backbone.History objects.\r\n\r\nWhat do think about decoupling Backbone.Router and Backbone.history:\r\n```js\r\n  var Router = Backbone.Router = function(options) {\r\n    ...\r\n    this.history = (options.history || Backbone.history);\r\n    ...\r\n  };\r\n\r\n   // in Backbone.Router.navigate and Backbone.Router.route\r\n    navigate: function(fragment, options) {\r\n      this.history.navigate(fragment, options);\r\n    },\r\n```\r\nDoes it make sense for anybody?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2297",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2297/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2297/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2297/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2297",
    "id": 11198441,
    "number": 2297,
    "title": "Allowing model.get to return multiple attributes",
    "user": {
      "login": "daniel-white",
      "id": 735269,
      "avatar_url": "https://avatars.githubusercontent.com/u/735269?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daniel-white",
      "html_url": "https://github.com/daniel-white",
      "followers_url": "https://api.github.com/users/daniel-white/followers",
      "following_url": "https://api.github.com/users/daniel-white/following{/other_user}",
      "gists_url": "https://api.github.com/users/daniel-white/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daniel-white/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daniel-white/subscriptions",
      "organizations_url": "https://api.github.com/users/daniel-white/orgs",
      "repos_url": "https://api.github.com/users/daniel-white/repos",
      "events_url": "https://api.github.com/users/daniel-white/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daniel-white/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-02-20T14:16:02Z",
    "updated_at": "2013-02-20T15:23:45Z",
    "closed_at": "2013-02-20T15:23:45Z",
    "body": "I've written an improved version of `model.get` to return a hash of attributes when passed an array."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2275",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2275/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2275/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2275/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2275",
    "id": 11017929,
    "number": 2275,
    "title": "Detect full page load vs navigation/route event",
    "user": {
      "login": "pete-the-pete",
      "id": 345985,
      "avatar_url": "https://avatars.githubusercontent.com/u/345985?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pete-the-pete",
      "html_url": "https://github.com/pete-the-pete",
      "followers_url": "https://api.github.com/users/pete-the-pete/followers",
      "following_url": "https://api.github.com/users/pete-the-pete/following{/other_user}",
      "gists_url": "https://api.github.com/users/pete-the-pete/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pete-the-pete/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pete-the-pete/subscriptions",
      "organizations_url": "https://api.github.com/users/pete-the-pete/orgs",
      "repos_url": "https://api.github.com/users/pete-the-pete/repos",
      "events_url": "https://api.github.com/users/pete-the-pete/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pete-the-pete/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-02-14T23:05:27Z",
    "updated_at": "2013-02-15T16:34:39Z",
    "closed_at": "2013-02-15T16:34:39Z",
    "body": "I wanted the ability to determine if the code is being run on a full page load vs a route event.   My use case is so I can load a full page of content that would normally be loaded by fetching the model and updating the view.\r\n\r\nI still want the route to fire so I can pre-fetch some other content, so passing silent:true to the history.start function won't work.  I came up with a solution that modifies the Backbone.history object's navigate method to set a flag. I also added a function to return the variable.  Before doing a pull request I wanted to see if there was an alternative.\r\n\r\nvar first_load = true;\r\nBackbone.history.isFirstLoad = function() {\r\n    return first_load;\r\n}\r\n\r\nvar origNavigate = Backbone.history.navigate;\r\nBackbone.history.navigate = function(fragment, options) {\r\n    first_load = false;\r\n    origNavigate.call(this, fragment, options);\r\n}\r\n\r\nLater to use it I have something like this:\r\n\r\npRouter.on('route:showProjects', function() {\r\n    Projects = new projectsList({ el: $(\"#content\")});\r\n    if(!Backbone.history.isFirstLoad()) {\r\n        //attach the reset event if this is a navigate call, so the view will be rendered\r\n        Projects.attachReset();\r\n    }\r\n    //get the data anyway\r\n    Projects.fetch();\r\n});"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2258",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2258/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2258/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2258/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2258",
    "id": 10865901,
    "number": 2258,
    "title": "options.parse is missing in the documentation",
    "user": {
      "login": "drahkrub",
      "id": 1061679,
      "avatar_url": "https://avatars.githubusercontent.com/u/1061679?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drahkrub",
      "html_url": "https://github.com/drahkrub",
      "followers_url": "https://api.github.com/users/drahkrub/followers",
      "following_url": "https://api.github.com/users/drahkrub/following{/other_user}",
      "gists_url": "https://api.github.com/users/drahkrub/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drahkrub/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drahkrub/subscriptions",
      "organizations_url": "https://api.github.com/users/drahkrub/orgs",
      "repos_url": "https://api.github.com/users/drahkrub/repos",
      "events_url": "https://api.github.com/users/drahkrub/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drahkrub/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-02-11T13:29:48Z",
    "updated_at": "2013-03-19T10:48:55Z",
    "closed_at": "2013-03-19T10:48:55Z",
    "body": "Should be mentioned there, especially in the section Model -> constructor / initialize, because it simplifies things very much when dealing with (deeply) nested models.\r\n\r\nJust found it in the annotated source code (which I like very much) and later on in several discussions over here, but its missing in the official documentation...\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2257",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2257/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2257/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2257/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2257",
    "id": 10859947,
    "number": 2257,
    "title": "Breaking codebase into smaller modules ?",
    "user": {
      "login": "hjortureh",
      "id": 286505,
      "avatar_url": "https://avatars.githubusercontent.com/u/286505?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hjortureh",
      "html_url": "https://github.com/hjortureh",
      "followers_url": "https://api.github.com/users/hjortureh/followers",
      "following_url": "https://api.github.com/users/hjortureh/following{/other_user}",
      "gists_url": "https://api.github.com/users/hjortureh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hjortureh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hjortureh/subscriptions",
      "organizations_url": "https://api.github.com/users/hjortureh/orgs",
      "repos_url": "https://api.github.com/users/hjortureh/repos",
      "events_url": "https://api.github.com/users/hjortureh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hjortureh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-02-11T09:25:20Z",
    "updated_at": "2013-02-11T22:12:46Z",
    "closed_at": "2013-02-11T20:12:14Z",
    "body": "Hello,\r\n\r\nI often have the need only to use Events, Models and Collections on my projects,  without using Views, Router, History or Sync.   Are there any plans on breaking the Backbone code-base into these kind of modules so developers can pick the parts to use ? "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2255",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2255/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2255/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2255/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2255",
    "id": 10816835,
    "number": 2255,
    "title": "Extend Router.routes rather than overwriting",
    "user": {
      "login": "BigstickCarpet",
      "id": 3453903,
      "avatar_url": "https://avatars.githubusercontent.com/u/3453903?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BigstickCarpet",
      "html_url": "https://github.com/BigstickCarpet",
      "followers_url": "https://api.github.com/users/BigstickCarpet/followers",
      "following_url": "https://api.github.com/users/BigstickCarpet/following{/other_user}",
      "gists_url": "https://api.github.com/users/BigstickCarpet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BigstickCarpet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BigstickCarpet/subscriptions",
      "organizations_url": "https://api.github.com/users/BigstickCarpet/orgs",
      "repos_url": "https://api.github.com/users/BigstickCarpet/repos",
      "events_url": "https://api.github.com/users/BigstickCarpet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BigstickCarpet/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-02-10T00:37:47Z",
    "updated_at": "2013-11-05T20:08:18Z",
    "closed_at": "2013-03-19T01:40:17Z",
    "body": "Let's say I extend the `Router` class and define some generic routes that I'll always want:\r\n````javascript\r\nvar CustomRouter = Backbone.Router.extend({\r\n    routes: {\r\n        \"help\":                 \"help\",    // #help\r\n        \"search/:query\":        \"search\",  // #search/kiwis\r\n        \"search/:query/p:page\": \"search\"   // #search/kiwis/p7\r\n    }\r\n});\r\n````\r\nAnd then I create an instance of my `CustomRouter` class, but pass a few page-specific routes to the constructor:\r\n````javascript\r\nvar router = new CustomRouter({\r\n    routes: {\r\n        \"tab:tabNumber\":                 \"loadTab\",   // #tab2\r\n        \"sort/:sortBy\":                  \"sortTable\"  // #sort/firstName\r\n    }\r\n});\r\n````\r\nThe problem is that the `Router` constructor completely overwrites the default `routes` property with the new `routes` that were passed to the constructor.  I think the two lists of routes should be merged instead.  This would require changing the following line of code in the `Router` constructor:\r\n````javascript\r\nif (options.routes) this.routes = options.routes;\r\n````\r\n...to this instead:\r\n````javascript\r\nif (options.routes) this.routes = _extend(this.routes || {}, options.routes);\r\n````\r\nWhat do you think?\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2249",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2249/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2249/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2249/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2249",
    "id": 10762222,
    "number": 2249,
    "title": "New model created unnecessarily before merging attrs into existing model",
    "user": {
      "login": "johtso",
      "id": 830800,
      "avatar_url": "https://avatars.githubusercontent.com/u/830800?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johtso",
      "html_url": "https://github.com/johtso",
      "followers_url": "https://api.github.com/users/johtso/followers",
      "following_url": "https://api.github.com/users/johtso/following{/other_user}",
      "gists_url": "https://api.github.com/users/johtso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johtso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johtso/subscriptions",
      "organizations_url": "https://api.github.com/users/johtso/orgs",
      "repos_url": "https://api.github.com/users/johtso/repos",
      "events_url": "https://api.github.com/users/johtso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johtso/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2013-02-07T23:45:07Z",
    "updated_at": "2013-02-14T02:45:57Z",
    "closed_at": "2013-02-11T18:30:04Z",
    "body": "It seems that when `.add()` is called with partial attributes corresponding to an existing model in a collection, even though the existing model just needs to be updated, [a new model is constructed](https://github.com/documentcloud/backbone/blob/master/backbone.js#L612) by `collection._prepareModel()`. (For example in the situation covered by this test: https://github.com/documentcloud/backbone/blob/master/test/collection.js#L921)\r\n\r\nAm I right in thinking that `collection._prepareModel()` should only really be called if a new model is going to be added to the collection? It seems strange to have a new model initialized and have the cid counter incremented, when no new model is needed."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2246",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2246/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2246/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2246/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2246",
    "id": 10715256,
    "number": 2246,
    "title": "Make $(e.currentTarget) default ?",
    "user": {
      "login": "andyscott12",
      "id": 866109,
      "avatar_url": "https://avatars.githubusercontent.com/u/866109?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andyscott12",
      "html_url": "https://github.com/andyscott12",
      "followers_url": "https://api.github.com/users/andyscott12/followers",
      "following_url": "https://api.github.com/users/andyscott12/following{/other_user}",
      "gists_url": "https://api.github.com/users/andyscott12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andyscott12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andyscott12/subscriptions",
      "organizations_url": "https://api.github.com/users/andyscott12/orgs",
      "repos_url": "https://api.github.com/users/andyscott12/repos",
      "events_url": "https://api.github.com/users/andyscott12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andyscott12/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-02-06T22:41:41Z",
    "updated_at": "2013-02-06T22:51:46Z",
    "closed_at": "2013-02-06T22:51:46Z",
    "body": "Hi Guys,\r\n\r\nI am wondering whether it is possible - for events - to include \r\n\r\n```\r\nvar ele = $(e.currentTarget);\r\n```\r\n\r\nas a default within handler attached to an event ? It would save instead of having to define it every time and its a pretty standard definition ? So essentially it becomes.\r\n\r\n```\r\nevents: {\r\n   'click .my-div':'clickHandler'\r\n},\r\nclickHandler: function(e) {\r\n   ele.find('.123').val();\r\n   //..... etc\r\n}\r\n\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2237",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2237/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2237/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2237/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2237",
    "id": 10585844,
    "number": 2237,
    "title": "Collections should maintain order when a model changes.",
    "user": {
      "login": "KenPowers",
      "id": 174864,
      "avatar_url": "https://avatars.githubusercontent.com/u/174864?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KenPowers",
      "html_url": "https://github.com/KenPowers",
      "followers_url": "https://api.github.com/users/KenPowers/followers",
      "following_url": "https://api.github.com/users/KenPowers/following{/other_user}",
      "gists_url": "https://api.github.com/users/KenPowers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KenPowers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KenPowers/subscriptions",
      "organizations_url": "https://api.github.com/users/KenPowers/orgs",
      "repos_url": "https://api.github.com/users/KenPowers/repos",
      "events_url": "https://api.github.com/users/KenPowers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KenPowers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-02-03T16:15:24Z",
    "updated_at": "2013-02-04T15:03:10Z",
    "closed_at": "2013-02-04T15:03:10Z",
    "body": "Let's say that a collection is sorted on some attribute and one of the models in that collection changes that attribute. Suddenly the collection is no longer in order.\r\n\r\nI would be happy to submit a pull request with this change if the community wants it. Right now I have something like the following in `_onModelEvent`:\r\n\r\n    if (this.sortOnChange) {\r\n      var sortOnString = typeof this.comparator === 'string' && event.substring(7) === this.comparator;\r\n      if (sortOnString || typeof this.comparator === 'function') {\r\n        this.sort();\r\n      }\r\n    }\r\n\r\nThis first assumes that there is a new property which can be set in collections called `sortOnChange`. We then determine if the comparator is a string and if the changed property is equal to the comparator -- if the comparator is a string but the property doesn't match then there is no sense in sorting. If that test fails then we will sort anyway if the comparator is a function.\r\n\r\nAn alternate way to express `sortOnString` would be the following:\r\n\r\n    var sortOnString = typeof this.comparator === 'string' && event === 'change:' + this.comparator;"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2233",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2233/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2233/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2233/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2233",
    "id": 10568921,
    "number": 2233,
    "title": "Add a listen hash analogous to events ",
    "user": {
      "login": "mehcode",
      "id": 753919,
      "avatar_url": "https://avatars.githubusercontent.com/u/753919?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mehcode",
      "html_url": "https://github.com/mehcode",
      "followers_url": "https://api.github.com/users/mehcode/followers",
      "following_url": "https://api.github.com/users/mehcode/following{/other_user}",
      "gists_url": "https://api.github.com/users/mehcode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mehcode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mehcode/subscriptions",
      "organizations_url": "https://api.github.com/users/mehcode/orgs",
      "repos_url": "https://api.github.com/users/mehcode/repos",
      "events_url": "https://api.github.com/users/mehcode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mehcode/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-02-02T07:51:55Z",
    "updated_at": "2013-02-08T00:38:48Z",
    "closed_at": "2013-02-08T00:38:48Z",
    "body": "As it is my first time posting an issue here; let me say, \"Great job on backbone.js, wonderful stuff here!\".\r\n\r\nWhat does everyone think about something like the following for declarative binding of Backbone events (analogous to DOM events through the `events` hash)?\r\n\r\n```javascript\r\nlisten: {\r\n  // this.on('event', this['handler']);\r\n  'event': 'handler',\r\n\r\n  // this.listenTo(this['model'], 'event', this['handler']);\r\n  'event model': 'handler',\r\n\r\n  // this.listenTo(this['property'], 'event', this['handler']);\r\n  'event property': 'handler'\r\n}\r\n```\r\n\r\nI could submit a PR if @jashkenas et all like the idea. "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2228",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2228/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2228/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2228/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2228",
    "id": 10516726,
    "number": 2228,
    "title": "findWhere() method not available on Collections",
    "user": {
      "login": "apsoto",
      "id": 11692,
      "avatar_url": "https://avatars.githubusercontent.com/u/11692?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apsoto",
      "html_url": "https://github.com/apsoto",
      "followers_url": "https://api.github.com/users/apsoto/followers",
      "following_url": "https://api.github.com/users/apsoto/following{/other_user}",
      "gists_url": "https://api.github.com/users/apsoto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/apsoto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apsoto/subscriptions",
      "organizations_url": "https://api.github.com/users/apsoto/orgs",
      "repos_url": "https://api.github.com/users/apsoto/repos",
      "events_url": "https://api.github.com/users/apsoto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/apsoto/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2013-01-31T20:48:47Z",
    "updated_at": "2013-06-20T00:54:34Z",
    "closed_at": "2013-02-01T04:05:37Z",
    "body": "Not sure if Collections are proxying all the collection methods, but I noticed that findWhere() is not available."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2208",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2208/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2208/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2208/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2208",
    "id": 10385871,
    "number": 2208,
    "title": "Model - Add ._savedAttributes property and revert() function to rollback model to last-synced version",
    "user": {
      "login": "jackwanders",
      "id": 752393,
      "avatar_url": "https://avatars.githubusercontent.com/u/752393?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jackwanders",
      "html_url": "https://github.com/jackwanders",
      "followers_url": "https://api.github.com/users/jackwanders/followers",
      "following_url": "https://api.github.com/users/jackwanders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jackwanders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jackwanders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jackwanders/subscriptions",
      "organizations_url": "https://api.github.com/users/jackwanders/orgs",
      "repos_url": "https://api.github.com/users/jackwanders/repos",
      "events_url": "https://api.github.com/users/jackwanders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jackwanders/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 17,
    "created_at": "2013-01-28T18:15:55Z",
    "updated_at": "2013-08-09T09:56:49Z",
    "closed_at": "2013-03-19T02:19:47Z",
    "body": "I recently found myself with this problem: A user could make a variety of changes to models in a collection, and then choose to either save those changes or 'cancel', trashing all changes made.\r\n\r\nAs `.previousAttributes` represents the state of a model at the time of the last `change` event, I would propose a similar `.savedAttributes` which represents the state of the model at the time of the last `sync` event. In addition, there would be a `.revert()` function that would allow a model to rollback to a state that matches what is persisted (localStorage, database, etc) without the need for a `.fetch()` call.\r\n\r\nI feel this could be done with code similar to what follows (I haven't attempted this solution, I've only coded my own solutions on a per-model basis).\r\n\r\n```javascript\r\n// Add _savedAttributes property and revert function to Backbone.Model\r\nvar Model = Backbone.Model = function(attributes, options) {\r\n  ...\r\n  this._savedAttributes = this._previousAttributes = _.clone(this.attributes);\r\n  ...\r\n  _.extend(Model.prototype, Events, {\r\n    ...\r\n    revert: function() {\r\n        this.attributes = this._savedAttributes;\r\n    },\r\n    ...\r\n  });\r\n}\r\n\r\n// Clone .attributes to ._savedAttributes on sync success\r\nBackbone.sync = function(method, model, options) {\r\n  ...\r\n  options.success = function(resp, status, xhr) {\r\n    if (success) {\r\n      model._savedAttributes = _.clone(model.attributes);\r\n      success(resp, status, xhr);\r\n    }\r\n    model.trigger('sync', model, resp, options);\r\n  };\r\n  ...\r\n}\r\n\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2207",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2207/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2207/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2207/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2207",
    "id": 10382743,
    "number": 2207,
    "title": "Add a View \"remove\" event",
    "user": {
      "login": "EnzoMartin",
      "id": 735558,
      "avatar_url": "https://avatars.githubusercontent.com/u/735558?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EnzoMartin",
      "html_url": "https://github.com/EnzoMartin",
      "followers_url": "https://api.github.com/users/EnzoMartin/followers",
      "following_url": "https://api.github.com/users/EnzoMartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/EnzoMartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EnzoMartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EnzoMartin/subscriptions",
      "organizations_url": "https://api.github.com/users/EnzoMartin/orgs",
      "repos_url": "https://api.github.com/users/EnzoMartin/repos",
      "events_url": "https://api.github.com/users/EnzoMartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EnzoMartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-01-28T16:55:52Z",
    "updated_at": "2013-01-28T17:28:24Z",
    "closed_at": "2013-01-28T16:59:53Z",
    "body": "I'd find it quite beneficial to have the view fire a \"remove\" event before it gets removed so that if I other views that are dependent on another view (like a modal is open or some such), I can more easily just handle it through events"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2199",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2199/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2199/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2199/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2199",
    "id": 10342213,
    "number": 2199,
    "title": "Add support for async event handlers ",
    "user": {
      "login": "nishp1",
      "id": 553376,
      "avatar_url": "https://avatars.githubusercontent.com/u/553376?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nishp1",
      "html_url": "https://github.com/nishp1",
      "followers_url": "https://api.github.com/users/nishp1/followers",
      "following_url": "https://api.github.com/users/nishp1/following{/other_user}",
      "gists_url": "https://api.github.com/users/nishp1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nishp1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nishp1/subscriptions",
      "organizations_url": "https://api.github.com/users/nishp1/orgs",
      "repos_url": "https://api.github.com/users/nishp1/repos",
      "events_url": "https://api.github.com/users/nishp1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nishp1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2013-01-26T19:47:40Z",
    "updated_at": "2013-02-01T13:33:53Z",
    "closed_at": "2013-02-01T13:33:53Z",
    "body": "When child views are being handled by parent views, I find my self often needing to fire 'before*' events which may be handled asynchronously. It would nice if backbone supported async handlers(deferreds) to remove other custom events('ok-to-remove', 'not-ok-to-remove',  required to solve this problem. End result would be something like:\r\n\r\n```javascript\r\nvar View = Backbone.View.extend({\r\n\tremove: function() {\r\n\t     var me = this;\r\n\t     this.trigger('beforeremove').then(function() {\r\n\t         me.remove();\r\n\t     })\r\n\t}\r\n});\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2182",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2182/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2182/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2182/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2182",
    "id": 10220429,
    "number": 2182,
    "title": "Add remote events for views",
    "user": {
      "login": "sydcanem",
      "id": 646857,
      "avatar_url": "https://avatars.githubusercontent.com/u/646857?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sydcanem",
      "html_url": "https://github.com/sydcanem",
      "followers_url": "https://api.github.com/users/sydcanem/followers",
      "following_url": "https://api.github.com/users/sydcanem/following{/other_user}",
      "gists_url": "https://api.github.com/users/sydcanem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sydcanem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sydcanem/subscriptions",
      "organizations_url": "https://api.github.com/users/sydcanem/orgs",
      "repos_url": "https://api.github.com/users/sydcanem/repos",
      "events_url": "https://api.github.com/users/sydcanem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sydcanem/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-01-23T04:13:56Z",
    "updated_at": "2013-01-23T13:03:32Z",
    "closed_at": "2013-01-23T13:03:32Z",
    "body": "View methods could be triggered by events outside it's $el scope. Example of this would be using a view class for a button gui but can't encapsulate the button since the view has already it's $el set for a another elements.\r\n\r\n`remote : { \"click button.showpane\" : \"showMe\"}`"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2165",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2165/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2165/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2165/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2165",
    "id": 10126393,
    "number": 2165,
    "title": "Support for suppressing the X-HTTP-Method-Override",
    "user": {
      "login": "JogoShugh",
      "id": 1863005,
      "avatar_url": "https://avatars.githubusercontent.com/u/1863005?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JogoShugh",
      "html_url": "https://github.com/JogoShugh",
      "followers_url": "https://api.github.com/users/JogoShugh/followers",
      "following_url": "https://api.github.com/users/JogoShugh/following{/other_user}",
      "gists_url": "https://api.github.com/users/JogoShugh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JogoShugh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JogoShugh/subscriptions",
      "organizations_url": "https://api.github.com/users/JogoShugh/orgs",
      "repos_url": "https://api.github.com/users/JogoShugh/repos",
      "events_url": "https://api.github.com/users/JogoShugh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JogoShugh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2013-01-19T16:02:20Z",
    "updated_at": "2013-03-19T11:23:59Z",
    "closed_at": "2013-03-19T11:23:59Z",
    "body": "This is not a bug, but a suggestion. If it's something you'd like to add, I'd be happy to create the tests for it, but this link is broken right now: http://backbonejs.org/test/test.html\r\n\r\nAnyway, I modified some code to allow the options hash to contain an override for setting the X-HTTP-Method-Override. If that gets set to 'false', then it doesn't do it at all. Otherwise, if it's not present, or is 'true', it still does it. If it's set to a function, it calls the function.\r\n\r\n```javascript\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      function setRequestHeader(xhr, header, value) {\r\n        xhr.setRequestHeader(header, value);\r\n      }      \r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        if (_.isFunction(options.setXHttpMethodOverride)) {\r\n          setRequestHeader = options.setXHttpMethodOverride;\r\n        }\r\n        if (options.setXHttpMethodOverride !== false) {\r\n          setRequestHeader(xhr, 'X-HTTP-Method-Override', type);\r\n        }\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n```\r\n\r\nI needed this because my web server requires setting special support even for sending the header, access control settings. So, because our API uses POST, this just made it easier to avoid that additional web-server configuration step.\r\n\r\nI have a working example here:\r\n\r\nhttp://jsfiddle.net/v7cBn/4/\r\n\r\nLine 50 is where you can play around with the setXHttpMethodOverride parameter.\r\n\r\nAnyway, if you'd like me to add a pull request for it, I'll be happy to write tests for it, if that link starts working again, or if you point me to a working link.\r\n\r\nThank you,\r\nJosh"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2143",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2143/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2143/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2143/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2143",
    "id": 10010186,
    "number": 2143,
    "title": "Include source maps for backbone",
    "user": {
      "login": "ansman",
      "id": 102883,
      "avatar_url": "https://avatars.githubusercontent.com/u/102883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ansman",
      "html_url": "https://github.com/ansman",
      "followers_url": "https://api.github.com/users/ansman/followers",
      "following_url": "https://api.github.com/users/ansman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ansman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ansman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ansman/subscriptions",
      "organizations_url": "https://api.github.com/users/ansman/orgs",
      "repos_url": "https://api.github.com/users/ansman/repos",
      "events_url": "https://api.github.com/users/ansman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ansman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-01-16T08:17:01Z",
    "updated_at": "2013-03-19T11:45:12Z",
    "closed_at": "2013-03-19T11:45:12Z",
    "body": "Source maps can be incredibly useful to debug code in production.\r\n\r\nFor example jQuery just started including source maps with their distribution: http://blog.jquery.com/2013/01/09/jquery-1-9-rc1-and-migrate-rc1-released/"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2130",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2130/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2130/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2130/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2130",
    "id": 9968876,
    "number": 2130,
    "title": "View has options prop but model and collection don't",
    "user": {
      "login": "yuku-t",
      "id": 96157,
      "avatar_url": "https://avatars.githubusercontent.com/u/96157?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuku-t",
      "html_url": "https://github.com/yuku-t",
      "followers_url": "https://api.github.com/users/yuku-t/followers",
      "following_url": "https://api.github.com/users/yuku-t/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuku-t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuku-t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuku-t/subscriptions",
      "organizations_url": "https://api.github.com/users/yuku-t/orgs",
      "repos_url": "https://api.github.com/users/yuku-t/repos",
      "events_url": "https://api.github.com/users/yuku-t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuku-t/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2013-01-15T05:50:46Z",
    "updated_at": "2013-01-15T06:13:39Z",
    "closed_at": "2013-01-15T06:13:39Z",
    "body": "View instance has an `options` property which points to the object passed to the constructor.\r\n\r\n```js\r\nvar view = new Backbone.View({foo: 'bar'})\r\nview.options.foo;  //=> 'bar'\r\n```\r\n\r\nOn the other hand, model and collection don't have a such thing.\r\n\r\n```js\r\nvar model = new Backbone.Model({}, {foo: 'bar'});\r\nmodel.options;  //=> undefined\r\n```\r\n\r\nThis inconsistency sometimes makes me confused. I think model and collection should also have `options` property.\r\n\r\nFYI, `view.options` is explained by the [official document](http://backbonejs.org/#View-constructor).\r\n\r\nHow do you think?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2110",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2110/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2110/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2110/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2110",
    "id": 9896827,
    "number": 2110,
    "title": "Bumping the release",
    "user": {
      "login": "tgriesser",
      "id": 154748,
      "avatar_url": "https://avatars.githubusercontent.com/u/154748?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgriesser",
      "html_url": "https://github.com/tgriesser",
      "followers_url": "https://api.github.com/users/tgriesser/followers",
      "following_url": "https://api.github.com/users/tgriesser/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgriesser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgriesser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgriesser/subscriptions",
      "organizations_url": "https://api.github.com/users/tgriesser/orgs",
      "repos_url": "https://api.github.com/users/tgriesser/repos",
      "events_url": "https://api.github.com/users/tgriesser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgriesser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2013-01-11T22:19:13Z",
    "updated_at": "2013-01-15T20:45:22Z",
    "closed_at": "2013-01-15T20:42:51Z",
    "body": "@jashkenas - since there've been some pretty major changes since __0.9.9__:\r\n  - simple branch\r\n  - reversal of validation semantics \r\n  - fix on `_.isEqual` vs. `!==` change calculation\r\n\r\nI think it would be beneficial to have at least a minor version bump (0.9.10) as soon as possible - a number of issues are closed lately with \"check out the latest master\", and it would be good to have people working off a version that is closer to the release candidate for 1.0 than the current 0.9.9."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2086",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2086/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2086/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2086/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2086",
    "id": 9755927,
    "number": 2086,
    "title": "Changelog in master since 0.9.9",
    "user": {
      "login": "philfreo",
      "id": 97612,
      "avatar_url": "https://avatars.githubusercontent.com/u/97612?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philfreo",
      "html_url": "https://github.com/philfreo",
      "followers_url": "https://api.github.com/users/philfreo/followers",
      "following_url": "https://api.github.com/users/philfreo/following{/other_user}",
      "gists_url": "https://api.github.com/users/philfreo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philfreo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philfreo/subscriptions",
      "organizations_url": "https://api.github.com/users/philfreo/orgs",
      "repos_url": "https://api.github.com/users/philfreo/repos",
      "events_url": "https://api.github.com/users/philfreo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philfreo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2013-01-08T02:33:15Z",
    "updated_at": "2013-03-19T18:36:26Z",
    "closed_at": "2013-01-11T20:57:01Z",
    "body": "I know historically documentation changes and changelog additions weren't made until a release was cut, but can I suggest that a better process would be to update the docs and add to a changelog as API-changing pull requests get accepted in master? It would probably result in much less of a scramble to fix mistakes in the docs _after_ a release is made (as was the case in 0.9.9).\r\n\r\nFor example, I'd like to know what intentional changes have been made since 0.9.9 because I've got several bugs in my application when using `master`, that don't exist when on `0.9.9`. Additionally, it was very simple to upgrade [Backbone-Relational](https://github.com/PaulUithol/Backbone-relational) from 0.9.2 to 0.9.9 but the project (and its tests) is broken on the current master.\r\n\r\nI believe these problems are related to when the \"simple\" branch was merged in, but I'm unclear exactly what API changes were made intentionally vs. unintentionally, so it's hard to contribute a meaningful patch or test case."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2085",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2085/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2085/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2085/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/2085",
    "id": 9741837,
    "number": 2085,
    "title": "Fix #2068 - `set` respects input order in absence of comparator",
    "user": {
      "login": "caseywebdev",
      "id": 1181237,
      "avatar_url": "https://avatars.githubusercontent.com/u/1181237?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caseywebdev",
      "html_url": "https://github.com/caseywebdev",
      "followers_url": "https://api.github.com/users/caseywebdev/followers",
      "following_url": "https://api.github.com/users/caseywebdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/caseywebdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caseywebdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caseywebdev/subscriptions",
      "organizations_url": "https://api.github.com/users/caseywebdev/orgs",
      "repos_url": "https://api.github.com/users/caseywebdev/repos",
      "events_url": "https://api.github.com/users/caseywebdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caseywebdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 39,
    "created_at": "2013-01-07T17:49:55Z",
    "updated_at": "2014-07-19T05:19:07Z",
    "closed_at": "2013-04-04T02:30:29Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/2085",
      "html_url": "https://github.com/jashkenas/backbone/pull/2085",
      "diff_url": "https://github.com/jashkenas/backbone/pull/2085.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/2085.patch"
    },
    "body": "This patch would allow collections to be reordered (without destroying any existing models). This is useful when response data can only be sorted server-side."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2069",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2069/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2069/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2069/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2069",
    "id": 9668943,
    "number": 2069,
    "title": "Some options values are automatically copied over to a object",
    "user": {
      "login": "peeter-tomberg",
      "id": 598361,
      "avatar_url": "https://avatars.githubusercontent.com/u/598361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peeter-tomberg",
      "html_url": "https://github.com/peeter-tomberg",
      "followers_url": "https://api.github.com/users/peeter-tomberg/followers",
      "following_url": "https://api.github.com/users/peeter-tomberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/peeter-tomberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peeter-tomberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peeter-tomberg/subscriptions",
      "organizations_url": "https://api.github.com/users/peeter-tomberg/orgs",
      "repos_url": "https://api.github.com/users/peeter-tomberg/repos",
      "events_url": "https://api.github.com/users/peeter-tomberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peeter-tomberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/question",
        "name": "question",
        "color": "eb70b2"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2013-01-04T08:58:01Z",
    "updated_at": "2013-01-04T19:33:09Z",
    "closed_at": "2013-01-04T19:09:19Z",
    "body": "Currently some options are by convention copied over to a View / Collection / Model  if they're passed in as options. The following 3 lines illustrate the behaviour:\r\n\r\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L233\r\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L1234\r\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L553\r\n\r\nAnd to me, this seems wrong. It just seems like magic, some values are being copied over while others aren't. And I have no way to change that behaviour. \r\n\r\nWhat would make sense was if all the values present in the prototype are copied over to from the options.  So for example:\r\n\r\n```javascript\r\nvar collection = Backbone.Collection.extend({\r\n    query: \"\",\r\n});\r\nnew collection({ query: \"kate upton\" });\r\n```\r\n\r\nWould result in the collections query value being populated. Or am I not seeing something that makes this a bad practice?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2061",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2061/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2061/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2061/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2061",
    "id": 9612441,
    "number": 2061,
    "title": "Trigger Events#update on collection.update",
    "user": {
      "login": "yamsellem",
      "id": 606754,
      "avatar_url": "https://avatars.githubusercontent.com/u/606754?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yamsellem",
      "html_url": "https://github.com/yamsellem",
      "followers_url": "https://api.github.com/users/yamsellem/followers",
      "following_url": "https://api.github.com/users/yamsellem/following{/other_user}",
      "gists_url": "https://api.github.com/users/yamsellem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yamsellem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yamsellem/subscriptions",
      "organizations_url": "https://api.github.com/users/yamsellem/orgs",
      "repos_url": "https://api.github.com/users/yamsellem/repos",
      "events_url": "https://api.github.com/users/yamsellem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yamsellem/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2013-01-02T10:04:09Z",
    "updated_at": "2013-01-03T00:45:49Z",
    "closed_at": "2013-01-03T00:45:49Z",
    "body": "Updating a collection matters to views, so collection.trigger('update') should be automatic, no?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2045",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/2045/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2045/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/2045/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/2045",
    "id": 9568601,
    "number": 2045,
    "title": "Make remove() auto-cleanup more events?",
    "user": {
      "login": "philfreo",
      "id": 97612,
      "avatar_url": "https://avatars.githubusercontent.com/u/97612?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philfreo",
      "html_url": "https://github.com/philfreo",
      "followers_url": "https://api.github.com/users/philfreo/followers",
      "following_url": "https://api.github.com/users/philfreo/following{/other_user}",
      "gists_url": "https://api.github.com/users/philfreo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philfreo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philfreo/subscriptions",
      "organizations_url": "https://api.github.com/users/philfreo/orgs",
      "repos_url": "https://api.github.com/users/philfreo/repos",
      "events_url": "https://api.github.com/users/philfreo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philfreo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2012-12-29T00:13:34Z",
    "updated_at": "2013-03-19T12:17:19Z",
    "closed_at": "2013-03-19T12:17:19Z",
    "body": "My understanding is that events aren't auto cleaned up in `View#remove` if they were created like:\r\n- `this.model.once('change', this.render, this)` if the change event is never fired\r\n- `this.model.on('change', this.render, this)`\r\n\r\nThe second scenario is fixed when people use `this.listenTo(model, 'change', this.render)` instead, but seems like there's no easy way to have `once` events currently cleaned up.\r\n\r\nPossible proposals:\r\n- add a `listenToOnce` method\r\n- add `this.model.off(null, null, this); this.collection.off(null, null, this);` into `View#remove`? (like the original dispose implementation of #1461), to take care of cases like this automatically? It would auto-cleanup both for usages of once and just other places where people use on instead of listenTo.\r\n- make `this.model.on(..., ..., view)` automatically get added to the events that get removed when view.stopListening is called?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1987",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1987/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1987/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1987/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1987",
    "id": 9425084,
    "number": 1987,
    "title": "options could be undefined in Collection.add",
    "user": {
      "login": "legnaleurc",
      "id": 14612,
      "avatar_url": "https://avatars.githubusercontent.com/u/14612?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/legnaleurc",
      "html_url": "https://github.com/legnaleurc",
      "followers_url": "https://api.github.com/users/legnaleurc/followers",
      "following_url": "https://api.github.com/users/legnaleurc/following{/other_user}",
      "gists_url": "https://api.github.com/users/legnaleurc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/legnaleurc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/legnaleurc/subscriptions",
      "organizations_url": "https://api.github.com/users/legnaleurc/orgs",
      "repos_url": "https://api.github.com/users/legnaleurc/repos",
      "events_url": "https://api.github.com/users/legnaleurc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/legnaleurc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-12-20T06:31:49Z",
    "updated_at": "2012-12-20T15:22:21Z",
    "closed_at": "2012-12-20T15:22:21Z",
    "body": "In 0.9.9, if you don't pass an object as `options` to `Collection.add`, triggered handlers will receive an `undefined` options.\r\n\r\nEven if you pass an empty object `{}`, `options.index` will not be set, too."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1973",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1973/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1973/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1973/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1973",
    "id": 9387961,
    "number": 1973,
    "title": "Give events on global Backbone object for tracking saving/deleting",
    "user": {
      "login": "sontek",
      "id": 151924,
      "avatar_url": "https://avatars.githubusercontent.com/u/151924?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sontek",
      "html_url": "https://github.com/sontek",
      "followers_url": "https://api.github.com/users/sontek/followers",
      "following_url": "https://api.github.com/users/sontek/following{/other_user}",
      "gists_url": "https://api.github.com/users/sontek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sontek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sontek/subscriptions",
      "organizations_url": "https://api.github.com/users/sontek/orgs",
      "repos_url": "https://api.github.com/users/sontek/repos",
      "events_url": "https://api.github.com/users/sontek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sontek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-12-19T01:21:38Z",
    "updated_at": "2012-12-19T15:43:08Z",
    "closed_at": "2012-12-19T15:43:08Z",
    "body": "It would be really nice now that there is a global events object if we can utilize it to notify when an object has started saving/stopped saving, or started deleting and stopped deleting, which is different than ajaxSync because it would only be when modifying objects, not when loading/fetching them.\r\n\r\nThis would be used to provide a \"saving\" dialog somewhere on the page so that you can register onunload handler and everything while the site is in a saving state."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1885",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1885/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1885/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1885/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1885",
    "id": 9131223,
    "number": 1885,
    "title": "Change Log for upcoming release",
    "user": {
      "login": "wookiehangover",
      "id": 84644,
      "avatar_url": "https://avatars.githubusercontent.com/u/84644?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wookiehangover",
      "html_url": "https://github.com/wookiehangover",
      "followers_url": "https://api.github.com/users/wookiehangover/followers",
      "following_url": "https://api.github.com/users/wookiehangover/following{/other_user}",
      "gists_url": "https://api.github.com/users/wookiehangover/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wookiehangover/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wookiehangover/subscriptions",
      "organizations_url": "https://api.github.com/users/wookiehangover/orgs",
      "repos_url": "https://api.github.com/users/wookiehangover/repos",
      "events_url": "https://api.github.com/users/wookiehangover/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wookiehangover/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 32,
    "created_at": "2012-12-10T07:51:26Z",
    "updated_at": "2012-12-14T00:01:20Z",
    "closed_at": "2012-12-13T23:06:55Z",
    "body": "In response to the question [\"What's been updated in master?\"](https://github.com/documentcloud/backbone/issues/891#issuecomment-11183425), I started a rough draft of a changelog for > 0.9.2. This is only after one pass through the commit history (since March!), so it's bound to be missing stuff. I ignored documentation changes and relegated minor commits/fixes to be referenced by issue # as best as possible. Instead of making a bunch of pull request noise, I thought it would be good to hash out as an issue especially given the numbers of features, bug fixes, etc.\r\n\r\nWithout further ado:\r\n\r\n## Change Log > 0.9.2\r\n\r\n* Model#Save accepts { patch: true } option\r\n* Collection#sort triggers `sort` event instead of `reset`\r\n* Added Backbone.Collection#update\r\n* Backbone now extends Events object\r\n* added optional groups to route syntax\r\n* Add 'once' to Backbone events\r\n* Backbone.Events supports jQuery-style event maps in 'on' and 'off'\r\n* Reset events include previous list of models, for added convenience\r\n* Validation always happens, even when silent: true\r\n* `events` can be passed in options hash to Backbone.View\r\n* Bump to require Underscore 1.3.3\r\n* Add `extend` to Backbone.History\r\n* `History` can be used outside of the browser\r\n* Backbone.sync accepts `emulateHTTP` and `emulateJSON` as options.\r\n* Backbone.Router#navigate is chainable\r\n* Backbone.Collection aliases underscore proxies (collect, foldl, inject, foldr, head, take, tail)\r\n* Backbone.Model#parse is run on initialization\r\n* Normalizing trailing and leading slash behavior in routes\r\n* Added Backbone.View#dispose\r\n* Backbone.View#remove now calls #dispose for event cleanup\r\n* Falsy values for collection#comparator will override default value\r\n* Null and undefined are invalid model id's\r\n* { merge: true } option for collection#add\r\n* Backbone.Collection#clone()\r\n* Backbone.View#options, Backbone.View#el and Backbone.View#tagName can be provided as functions\r\n* Added Backbone.ajax for over-riding default ajax implementation\r\n* `on` and `off` are now prefered over `bind` and `unbind`\r\n* Backbone.Model#destroy() returns false if the model.isNew()\r\n* Backbone.View#make accpets falsy values for the `content` argument\r\n* Remove Ender support\r\n* Collection#reset() will now call the collection's parse function as well as the model's if {parse:true}\r\n\r\n## Bugfixes\r\n\r\n#1030, #1092, #1144, #1151, #1206, #1252, #1366, #1327, #1371, #1387, #1412, #1403, #1447,\r\n#1455, #1545, #1684, #1477, #1478, #1664, #1695, #1751, #1756, #1838, #1717,  #1854\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1873",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1873/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1873/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1873/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1873",
    "id": 9030205,
    "number": 1873,
    "title": "Collection#update to reduce waste",
    "user": {
      "login": "caseywebdev",
      "id": 1181237,
      "avatar_url": "https://avatars.githubusercontent.com/u/1181237?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/caseywebdev",
      "html_url": "https://github.com/caseywebdev",
      "followers_url": "https://api.github.com/users/caseywebdev/followers",
      "following_url": "https://api.github.com/users/caseywebdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/caseywebdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/caseywebdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/caseywebdev/subscriptions",
      "organizations_url": "https://api.github.com/users/caseywebdev/orgs",
      "repos_url": "https://api.github.com/users/caseywebdev/repos",
      "events_url": "https://api.github.com/users/caseywebdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/caseywebdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 30,
    "created_at": "2012-12-05T19:17:20Z",
    "updated_at": "2012-12-11T02:35:52Z",
    "closed_at": "2012-12-10T20:59:11Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1873",
      "html_url": "https://github.com/jashkenas/backbone/pull/1873",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1873.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1873.patch"
    },
    "body": "I created a PR a few days ago about this and (A) the PR became out of sync with my repo and (B) I feel I explained my rationale poorly which lead to its abrupt close. So I'm sorry for the poor re-issue etiquette, but I really think this should be at least discussed.\n\n`reset` definitely has it's place as a quick way to completely wipe a collection and start over with new models. Often times though, I'd like to update a collection without obliterating my current models but rather firing off helpful `add`/`change`/`remove` events. This allows me to poll the server with `fetch` and effectively listen for these events without fear of having to recreate any models (wasteful). Here is an example:\n\n```js\nvar UsersView = Backbone.View.extend({\n  delegateEvents: function () {\n    Backbone.View.prototype.delegateEvents.apply(this, arguments);\n    this.collection.on('add', this.addUser, this);\n    this.pollInterval = setInterval(_.bind(this.poll, this), 10000);\n  },\n  \n  undelegateEvents: function () {\n    clearInterval(this.pollInterval);\n    Backbone.View.prototype.delegateEvents.apply(this, arguments);\n  },\n  \n  addUser: function (user) {\n    var userView = new UserView({model: user});\n    this.$el.append((userView).el);\n  },\n  \n  poll: function () {\n    // Ideally `update` is the default action, but that would be a\n    // breaking change so the options object is used for now.\n    this.collection.fetch({update: true});\n  }\n});\n\nvar UserView = Backbone.View.extend({\n  initialize: function() {\n    // Can be fine tuned thanks to `change:attr`, but in general...\n    this.model.on('change', this.render, this);\n    this.model.on('remove', this.remove, this);\n  }\n});\n\nvar users = new Backbone.Collection();\nusers.url = '/users';\nvar usersView = new UsersView({collection: users});\n$('body').append(usersView.el);\nusersView.poll();\n```\n\nThis is not a complete example, but you can see what I'm getting at. The ability to rig a view (and subviews) this way makes for a clean, clear intent as to what should happen when an `add`/`change`/`remove` happens. The only alternative right now is a not-so-pretty `reset` dance that just doesn't use Backbone.Events to their potential.\n\nAgain, I apologize for the duplicate but I would really appreciate some input especially before the release is cut."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1864",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1864/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1864/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1864/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1864",
    "id": 8944280,
    "number": 1864,
    "title": "Feature request: analogue of Model.isNew for collections",
    "user": {
      "login": "lennym",
      "id": 117398,
      "avatar_url": "https://avatars.githubusercontent.com/u/117398?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lennym",
      "html_url": "https://github.com/lennym",
      "followers_url": "https://api.github.com/users/lennym/followers",
      "following_url": "https://api.github.com/users/lennym/following{/other_user}",
      "gists_url": "https://api.github.com/users/lennym/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lennym/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lennym/subscriptions",
      "organizations_url": "https://api.github.com/users/lennym/orgs",
      "repos_url": "https://api.github.com/users/lennym/repos",
      "events_url": "https://api.github.com/users/lennym/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lennym/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-12-03T10:22:59Z",
    "updated_at": "2012-12-03T16:16:58Z",
    "closed_at": "2012-12-03T15:59:36Z",
    "body": "I find myself quite frequently checking if a collection is empty or not in order to invoke certain functionality, and it would be convenient in most cases to establish if a collection is empty because it hasn't been ```fetch```ed yet, or if it has been ```fetch```ed and returned empty. Similar to how Model.isNew can be used to determine if a model has been synced with the server.\n\nI'm happy to write this myself, but wanted to get some ideas/feedback on how to approach before embarking on it. My immediate thought is to do something like set a flag on a collection which is set to true on a successful fetch. Something like:\n\n```\nthis.on('sync', function () { _synced = true; }, this);\n```\nand then:\n```\nCollection.prototype.isNew = function () {\n    return !!_synced;\n}\n```\n\nBut I'm sure others may have a better way."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1862",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1862/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1862/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1862/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1862",
    "id": 8904665,
    "number": 1862,
    "title": "elements / ui hash for backbone?",
    "user": {
      "login": "dgbeck",
      "id": 1483694,
      "avatar_url": "https://avatars.githubusercontent.com/u/1483694?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgbeck",
      "html_url": "https://github.com/dgbeck",
      "followers_url": "https://api.github.com/users/dgbeck/followers",
      "following_url": "https://api.github.com/users/dgbeck/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgbeck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgbeck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgbeck/subscriptions",
      "organizations_url": "https://api.github.com/users/dgbeck/orgs",
      "repos_url": "https://api.github.com/users/dgbeck/repos",
      "events_url": "https://api.github.com/users/dgbeck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgbeck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 10,
    "created_at": "2012-12-01T22:13:45Z",
    "updated_at": "2012-12-03T23:09:16Z",
    "closed_at": "2012-12-03T16:37:49Z",
    "body": "Apologies in advance if there is already a ticket related to this question. I did not find one in my searching.\n\nWhat is the reasoning behind not including an \"elements\" (Spine), or \"ui\" (Backbone Marionette) hash in backbone proper, that fetches and saves references to elements within this.$el based on selectors? For example, the way it works in Marionette is:\n\n\tMyView = Backbone.View.extend( {\n\t\tevents : {\n\t\t\t\"keydown [name='value']\" : \"_valueFld_onKeyDown\"\n\t\t}\n\n\t\tui {\n\t\t\t\"valueFld\" : \"[name='value']\"\n\t\t}\n\n\t\t...\n\t} )\n\nNow after the view is rendered you can find this.$el( \"[name='value']\" ) in this.ui.valueFld. See the [Marionette docs](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.itemview.md#organizing-ui-elements) for a discussion.\n\nI would make some small changes to this implementation but it seems that the basic concept would be very useful to close to 100% of people using backbone. Has this been ruled out for some compelling reason? Also there are some other useful features that could be explored if this were to be implemented, which I'm happy to elaborate on if if this direction is not dead in the water.\n\nThanks very much."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1859",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1859/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1859/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1859/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1859",
    "id": 8889085,
    "number": 1859,
    "title": "An utility to filter collection on the fly according to different search keywords",
    "user": {
      "login": "coodoo",
      "id": 325936,
      "avatar_url": "https://avatars.githubusercontent.com/u/325936?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coodoo",
      "html_url": "https://github.com/coodoo",
      "followers_url": "https://api.github.com/users/coodoo/followers",
      "following_url": "https://api.github.com/users/coodoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/coodoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coodoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coodoo/subscriptions",
      "organizations_url": "https://api.github.com/users/coodoo/orgs",
      "repos_url": "https://api.github.com/users/coodoo/repos",
      "events_url": "https://api.github.com/users/coodoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coodoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-12-01T08:46:51Z",
    "updated_at": "2012-12-01T12:50:40Z",
    "closed_at": "2012-12-01T12:50:40Z",
    "body": "\nhttps://gist.github.com/4181074\n\nI wrote this quick utility to implement search-as-you-type kind of feature in an application that I'm working on, wondering is this something worth integrating back into the main branch ?\n\nJeremy."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1849",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1849/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1849/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1849/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1849",
    "id": 8762408,
    "number": 1849,
    "title": "Add a `.npmignore` file to prevent useless stuff from getting in the npm distro",
    "user": {
      "login": "balupton",
      "id": 61148,
      "avatar_url": "https://avatars.githubusercontent.com/u/61148?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/balupton",
      "html_url": "https://github.com/balupton",
      "followers_url": "https://api.github.com/users/balupton/followers",
      "following_url": "https://api.github.com/users/balupton/following{/other_user}",
      "gists_url": "https://api.github.com/users/balupton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/balupton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/balupton/subscriptions",
      "organizations_url": "https://api.github.com/users/balupton/orgs",
      "repos_url": "https://api.github.com/users/balupton/repos",
      "events_url": "https://api.github.com/users/balupton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/balupton/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-11-28T12:02:00Z",
    "updated_at": "2012-11-28T18:54:06Z",
    "closed_at": "2012-11-28T18:53:59Z",
    "body": "Things like the tests, docs, examples, etc are not required for the npm distribution, and thus only add to the weight of the module without any use. It would be nice if these were included in a .npmignore file - see https://npmjs.org/doc/developers.html#Keeping-files-out-of-your-package\n\nIn fact, for backbone the only useful files are the license, readme, package.json and backbone.js - all the rest can be added to the .npmignore file."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1833",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1833/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1833/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1833/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1833",
    "id": 8482017,
    "number": 1833,
    "title": "Map route parameters to correct function parameter names",
    "user": {
      "login": "pwhisenhunt",
      "id": 871976,
      "avatar_url": "https://avatars.githubusercontent.com/u/871976?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pwhisenhunt",
      "html_url": "https://github.com/pwhisenhunt",
      "followers_url": "https://api.github.com/users/pwhisenhunt/followers",
      "following_url": "https://api.github.com/users/pwhisenhunt/following{/other_user}",
      "gists_url": "https://api.github.com/users/pwhisenhunt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pwhisenhunt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pwhisenhunt/subscriptions",
      "organizations_url": "https://api.github.com/users/pwhisenhunt/orgs",
      "repos_url": "https://api.github.com/users/pwhisenhunt/repos",
      "events_url": "https://api.github.com/users/pwhisenhunt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pwhisenhunt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-11-19T20:35:58Z",
    "updated_at": "2012-11-19T20:42:31Z",
    "closed_at": "2012-11-19T20:39:55Z",
    "body": "I think it would be useful to have route parameter names mapped to their correct function parameters names. The current implementation appears to apply the arguments from the route directly to the function from left to right. An example is as follows:\n\n```javascript\nroutes: {\n     \"page:p\":        \"index\",\n     \"sort:s\":        \"index\",\n     \"page:p/sort:s\": \"index\"\n},\n\nfunction: index(page, sort) {\n}\n```\n\nIf you navigate to the route /sortasc the variable page will store asc instead of sort."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1831",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1831/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1831/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1831/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1831",
    "id": 8470154,
    "number": 1831,
    "title": "api for forwarding events",
    "user": {
      "login": "bodokaiser",
      "id": 1780466,
      "avatar_url": "https://avatars.githubusercontent.com/u/1780466?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bodokaiser",
      "html_url": "https://github.com/bodokaiser",
      "followers_url": "https://api.github.com/users/bodokaiser/followers",
      "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}",
      "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions",
      "organizations_url": "https://api.github.com/users/bodokaiser/orgs",
      "repos_url": "https://api.github.com/users/bodokaiser/repos",
      "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bodokaiser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-11-19T14:19:23Z",
    "updated_at": "2012-11-19T18:19:13Z",
    "closed_at": "2012-11-19T18:19:13Z",
    "body": "Hi,\n\nI want to bring up the idea of forwarding event calls between different backbone objects (e.g. for bubbling up event calls).\n\nCurrently you will have to do something similar to this to forward events:\n\n```\nvar ListView = Backbone.View.extend({\n\n    tagName: \"ul\",\n\n    className: \"list\",\n\n    initialize: function() {\n        this.view = new ItemView();\n        this.view.on('show', this.showItem, this);\n    },\n\n    showItem: function(model) {\n        this.trigger('show:item', model);\n    }\n\n});\n\n```\n\nThe downside of this implementation is that you have to define lots of function which actually do not have any real logic inside.\nThe other way to use an anonymous function is not that readable:\n\n```\nvar ListView = Backbone.View.extend({\n\n    tagName: \"ul\",\n\n    className: \"list\",\n\n    initialize: function() {\n        this.view = new ItemView();\n        this.view.on('show', function(model) {\n            this.trigger('show:item', model);\n        }, this);\n    }\n\n});\n\n```\n\nMy wish would be some api change for the on method which would allow something like this:\n\n```\nvar ListView = Backbone.View.extend({\n\n    tagName: \"ul\",\n\n    className: \"list\",\n\n    initialize: function() {\n        this.view = new ItemView();\n        this.view.on('show', 'show:item', this);\n        // or alternative:\n        this.view.forward('show', 'show:item', this);\n    }\n\n});\n\n```\n\nThe downside would now be that the event system would be somehow coupled to another context where there is no guarantee if the new context supports the event api. However it would really improve code which has to bubble up lots of different event chains....\n\nRegards, \nbodo"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1826",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1826/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1826/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1826/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1826",
    "id": 8429336,
    "number": 1826,
    "title": "Allowing events to be passed in view's options",
    "user": {
      "login": "tgriesser",
      "id": 154748,
      "avatar_url": "https://avatars.githubusercontent.com/u/154748?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgriesser",
      "html_url": "https://github.com/tgriesser",
      "followers_url": "https://api.github.com/users/tgriesser/followers",
      "following_url": "https://api.github.com/users/tgriesser/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgriesser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgriesser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgriesser/subscriptions",
      "organizations_url": "https://api.github.com/users/tgriesser/orgs",
      "repos_url": "https://api.github.com/users/tgriesser/repos",
      "events_url": "https://api.github.com/users/tgriesser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgriesser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-11-16T19:28:22Z",
    "updated_at": "2012-11-19T20:06:26Z",
    "closed_at": "2012-11-19T20:06:26Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1826",
      "html_url": "https://github.com/jashkenas/backbone/pull/1826",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1826.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1826.patch"
    },
    "body": "Allows the user to pass a view's `events` object when creating a new view, rather than requiring the events always be pre-defined with `Backbone.View.extend`\n\nIncludes a test of the new functionality."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1825",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1825/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1825/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1825/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1825",
    "id": 8406374,
    "number": 1825,
    "title": "Collection.add does nothing if a duplicate exists, and it's undocumented.",
    "user": {
      "login": "erichiggins",
      "id": 507145,
      "avatar_url": "https://avatars.githubusercontent.com/u/507145?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erichiggins",
      "html_url": "https://github.com/erichiggins",
      "followers_url": "https://api.github.com/users/erichiggins/followers",
      "following_url": "https://api.github.com/users/erichiggins/following{/other_user}",
      "gists_url": "https://api.github.com/users/erichiggins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erichiggins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erichiggins/subscriptions",
      "organizations_url": "https://api.github.com/users/erichiggins/orgs",
      "repos_url": "https://api.github.com/users/erichiggins/repos",
      "events_url": "https://api.github.com/users/erichiggins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erichiggins/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-11-15T23:38:58Z",
    "updated_at": "2012-11-16T23:43:50Z",
    "closed_at": "2012-11-16T17:14:51Z",
    "body": "I struggled with this one for a couple hours, unable to determine why my collection was not updating.\n\nI checked both the Docs page, the FAQ,  and the Annotated source page, and there does not appear to be any mention of this behavior. Preferably, it would appear under Collection.add.\n\nMaybe I missed it, but I tried searching the entire page for \"add\"  and \"exist\", in addition to reading each of the method docs multiple times."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1810",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1810/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1810/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1810/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1810",
    "id": 8201023,
    "number": 1810,
    "title": "allow Collection.reset with a Collection",
    "user": {
      "login": "havvg",
      "id": 126898,
      "avatar_url": "https://avatars.githubusercontent.com/u/126898?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/havvg",
      "html_url": "https://github.com/havvg",
      "followers_url": "https://api.github.com/users/havvg/followers",
      "following_url": "https://api.github.com/users/havvg/following{/other_user}",
      "gists_url": "https://api.github.com/users/havvg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/havvg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/havvg/subscriptions",
      "organizations_url": "https://api.github.com/users/havvg/orgs",
      "repos_url": "https://api.github.com/users/havvg/repos",
      "events_url": "https://api.github.com/users/havvg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/havvg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-11-08T11:13:32Z",
    "updated_at": "2012-11-08T12:27:07Z",
    "closed_at": "2012-11-08T12:27:07Z",
    "body": "Hi there,\r\n\r\nit would be great to be able to `reset` a `Backbone.Collection` passing in another `Backbone.Collection`.\r\nThis may be extended to have `add` and `remove` work with a collection, too.\r\n\r\nThis allows to re-sync collections, which are changed in separate ways.\r\n\r\n```javascript\r\nProductCollection = Backbone.Collection.extend({});\r\n\r\nProductSelectionView = Backbone.View.extend({\r\n    initialize: function() {\r\n        _.bindAll(this);\r\n\r\n        // after selecting a product, it will be removed from this collection\r\n        // a selected product may be de-selected again, adding it to this collection again\r\n        this.selectableProducts = new ProductCollection();\r\n        this.selectableProducts.on('all', this.render);\r\n        \r\n        // when changing the scope (e.g. a category of products), this collection will be reset\r\n        this.availableProducts = new ProductCollection();\r\n\r\n        // setup URL and stuff, to have fetch work\r\n        // wire collection with scope etc.\r\n\r\n//////////////////////////\r\n        // This is currently not possible.\r\n        this.availableProducts.on('reset', this.selectableProducts.reset);\r\n\r\n        // currently available version\r\n        this.availableProducts.on('reset', function(collection) {\r\n            this.selectableProducts.reset(collection.toArray());\r\n        }, this);\r\n//////////////////////////\r\n\r\n        this.availableProducts.fetch();\r\n    },\r\n\r\n    render: function() {\r\n        // render the view \r\n\r\n        return this;\r\n    }\r\n});\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1785",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1785/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1785/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1785/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1785",
    "id": 7982946,
    "number": 1785,
    "title": "collection.reset() documentation is wrong",
    "user": {
      "login": "AdamGlass",
      "id": 2686832,
      "avatar_url": "https://avatars.githubusercontent.com/u/2686832?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdamGlass",
      "html_url": "https://github.com/AdamGlass",
      "followers_url": "https://api.github.com/users/AdamGlass/followers",
      "following_url": "https://api.github.com/users/AdamGlass/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdamGlass/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdamGlass/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdamGlass/subscriptions",
      "organizations_url": "https://api.github.com/users/AdamGlass/orgs",
      "repos_url": "https://api.github.com/users/AdamGlass/repos",
      "events_url": "https://api.github.com/users/AdamGlass/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdamGlass/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-10-30T21:52:45Z",
    "updated_at": "2012-10-31T04:51:48Z",
    "closed_at": "2012-10-31T01:51:25Z",
    "body": "Header says:\r\n\r\n       reset collection.reset(models, [options]) \r\n\r\nImplying models is required.\r\n\r\nlater it says: \"Calling collection.reset() without passing any models as arguments will empty the entire collection.\"\r\n\r\nYou can't have your cake and eat it too.  the header should say collection.reset([models],[options]) or something similar.\r\n\r\nThis incorrect text may explain why the typescript description file for backbone is wrong as well"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1778",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1778/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1778/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1778/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1778",
    "id": 7921749,
    "number": 1778,
    "title": "Trigger event on attaching view to DOM",
    "user": {
      "login": "MerlinDE",
      "id": 876380,
      "avatar_url": "https://avatars.githubusercontent.com/u/876380?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MerlinDE",
      "html_url": "https://github.com/MerlinDE",
      "followers_url": "https://api.github.com/users/MerlinDE/followers",
      "following_url": "https://api.github.com/users/MerlinDE/following{/other_user}",
      "gists_url": "https://api.github.com/users/MerlinDE/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MerlinDE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MerlinDE/subscriptions",
      "organizations_url": "https://api.github.com/users/MerlinDE/orgs",
      "repos_url": "https://api.github.com/users/MerlinDE/repos",
      "events_url": "https://api.github.com/users/MerlinDE/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MerlinDE/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-10-28T19:01:03Z",
    "updated_at": "2012-10-28T19:03:32Z",
    "closed_at": "2012-10-28T19:03:32Z",
    "body": "It often is required to tweak a view's *el* only after it has been attached to the DOM (example: [Chosen] (http://harvesthq.github.com/chosen/). \r\n\r\nWith the current Backbone implementation, it is always hard to know if a view is already attached to the DOM and to attach your code to any event that is only fired then. It would be great if you could just add an event that is triggered whenever a view's *el* is attached to the DOM.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1775",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1775/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1775/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1775/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1775",
    "id": 7881804,
    "number": 1775,
    "title": "Enhanced deferreds; issue #1774",
    "user": {
      "login": "pmaccart",
      "id": 1193843,
      "avatar_url": "https://avatars.githubusercontent.com/u/1193843?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pmaccart",
      "html_url": "https://github.com/pmaccart",
      "followers_url": "https://api.github.com/users/pmaccart/followers",
      "following_url": "https://api.github.com/users/pmaccart/following{/other_user}",
      "gists_url": "https://api.github.com/users/pmaccart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pmaccart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pmaccart/subscriptions",
      "organizations_url": "https://api.github.com/users/pmaccart/orgs",
      "repos_url": "https://api.github.com/users/pmaccart/repos",
      "events_url": "https://api.github.com/users/pmaccart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pmaccart/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-10-26T04:13:45Z",
    "updated_at": "2012-10-26T21:29:32Z",
    "closed_at": "2012-10-26T04:35:38Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1775",
      "html_url": "https://github.com/jashkenas/backbone/pull/1775",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1775.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1775.patch"
    },
    "body": "Hi all,\r\n\r\nWe've been leveraging the Deferred objects returned from Backbone.sync calls extensively in our application, and have found those to be very convenient, particularly when views depend on multiple models.\r\n\r\nOne case we've struggled with is when we have nested Backbone views, we're forced to provide both the collection instance and deferred object to the child view constructor:\r\n```\r\nvar View1 = Backbone.View.extend({\r\n    render:function () {\r\n        var collection = new Backbone.Collection();\r\n        collection.url = '/path/to/resources';\r\n\r\n        var deferred = collection.fetch();\r\n        var subview1 = new Subview1({collection:collection, deferred:deferred}).render();\r\n        this.$el.append(subview1.el);\r\n\r\n        deferred.done(this.onCollectionFetched);\r\n\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n\r\nvar Subview1 = Backbone.View.extend({\r\n    initialize:function () {\r\n       this.collection = this.options.collection;\r\n       this.deferred = this.options.deferred;\r\n    },\r\n\r\n    render:function () {\r\n        this.deferred.done(this.onCollectionFetched);\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n```\r\nThe example above is fairly trivial, but quickly becomes complex has the hierarchy grows (particularly if certain views in the hierarchy should not be blocked from rendering based on data not being ready). It would be nice if the deferred would be modified slightly such that the collection (or model) was provided as the first argument to the callbacks:\r\n```\r\nvar View1 = Backbone.View.extend({\r\n    render:function () {\r\n        var collection = new Backbone.Collection();\r\n        collection.url = '/path/to/resources';\r\n\r\n        var deferred = collection.fetch();\r\n        var subview1 = new Subview1({deferred:deferred});\r\n\r\n        deferred.done(this.onCollectionFetched);\r\n\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n\r\nvar Subview1 = Backbone.View.extend({\r\n    initialize:function () {\r\n       this.collection = this.options.collection;\r\n       this.deferred = this.options.deferred;\r\n    },\r\n\r\n    render:function () {\r\n        this.deferred.done(this.onCollectionFetched);\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n```\r\nI've attached a pull request to this issue illustrating a potential fix, but am certainly open to suggestions and other approaches to take.\r\n\r\nThanks,\r\nPhil"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1774",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1774/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1774/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1774/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1774",
    "id": 7881641,
    "number": 1774,
    "title": "Provide Backbone Model/Collection as first parameter to jQuery Deferred callbacks",
    "user": {
      "login": "pmaccart",
      "id": 1193843,
      "avatar_url": "https://avatars.githubusercontent.com/u/1193843?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pmaccart",
      "html_url": "https://github.com/pmaccart",
      "followers_url": "https://api.github.com/users/pmaccart/followers",
      "following_url": "https://api.github.com/users/pmaccart/following{/other_user}",
      "gists_url": "https://api.github.com/users/pmaccart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pmaccart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pmaccart/subscriptions",
      "organizations_url": "https://api.github.com/users/pmaccart/orgs",
      "repos_url": "https://api.github.com/users/pmaccart/repos",
      "events_url": "https://api.github.com/users/pmaccart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pmaccart/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-10-26T03:55:53Z",
    "updated_at": "2013-06-09T23:51:26Z",
    "closed_at": "2012-10-26T04:15:40Z",
    "body": "Hi all,\r\n\r\nWe've been leveraging the Deferred objects returned from Backbone.sync calls extensively in our application, and have found those to be very convenient, particularly when views depend on multiple models.  \r\n\r\nOne case we've struggled with is when we have nested Backbone views, we're forced to provide both the collection instance and deferred object to the child view constructor:\r\n```\r\nvar View1 = Backbone.View.extend({\r\n    render:function () {\r\n        var collection = new Backbone.Collection();\r\n        collection.url = '/path/to/resources';\r\n\r\n        var deferred = collection.fetch();\r\n        var subview1 = new Subview1({collection:collection, deferred:deferred}).render();\r\n        this.$el.append(subview1.el);\r\n\r\n        deferred.done(this.onCollectionFetched);\r\n\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n\r\nvar Subview1 = Backbone.View.extend({\r\n    initialize:function () {\r\n       this.collection = this.options.collection;\r\n       this.deferred = this.options.deferred;\r\n    },\r\n\r\n    render:function () {\r\n        this.deferred.done(this.onCollectionFetched);\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n```\r\n\r\nThe example above is fairly trivial, but quickly becomes complex has the hierarchy grows (particularly if certain views in the hierarchy should not be blocked from rendering based on data not being ready).  It would be nice if the deferred would be modified slightly such that the collection (or model) was provided as the first argument to the callbacks:\r\n```\r\nvar View1 = Backbone.View.extend({\r\n    render:function () {\r\n        var collection = new Backbone.Collection();\r\n        collection.url = '/path/to/resources';\r\n\r\n        var deferred = collection.fetch();\r\n        var subview1 = new Subview1({deferred:deferred});\r\n\r\n        deferred.done(this.onCollectionFetched);\r\n\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n\r\nvar Subview1 = Backbone.View.extend({\r\n    initialize:function () {\r\n       this.collection = this.options.collection;\r\n       this.deferred = this.options.deferred;\r\n    },\r\n\r\n    render:function () {\r\n        this.deferred.done(this.onCollectionFetched);\r\n        return this;\r\n    },\r\n\r\n    onCollectionFetched:function (collection) {\r\n        // do stuff with collection\r\n    }\r\n});\r\n\r\n```\r\nI've attached a pull request to this issue illustrating a potential fix, but am certainly open to suggestions and other approaches to take.\r\n\r\nThanks,\r\nPhil"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1771",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1771/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1771/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1771/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1771",
    "id": 7809334,
    "number": 1771,
    "title": "Minimalistic validation framework",
    "user": {
      "login": "alexeypetrushin",
      "id": 94196,
      "avatar_url": "https://avatars.githubusercontent.com/u/94196?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexeypetrushin",
      "html_url": "https://github.com/alexeypetrushin",
      "followers_url": "https://api.github.com/users/alexeypetrushin/followers",
      "following_url": "https://api.github.com/users/alexeypetrushin/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexeypetrushin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexeypetrushin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexeypetrushin/subscriptions",
      "organizations_url": "https://api.github.com/users/alexeypetrushin/orgs",
      "repos_url": "https://api.github.com/users/alexeypetrushin/repos",
      "events_url": "https://api.github.com/users/alexeypetrushin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexeypetrushin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-10-23T20:29:09Z",
    "updated_at": "2012-10-26T04:40:59Z",
    "closed_at": "2012-10-26T04:40:59Z",
    "body": "**Use case:** provide simple way to define frequently used validations. It's optional - You don't have to use it, it's backward compatible and don't get into Your way if You don't need it.\r\n\r\n**How it looks**\r\n\r\nDefine attribute validations:\r\n\r\n``` CoffeeScript\r\nclass app.Application extends app.Model\r\n  validations:\r\n    name  : (v) -> \"can't be blank\" if _(v).isBlank()\r\n    login : (v) -> \"invalid format\" if /^[a-z]$/.test v\r\n```\r\n\r\nThe `validate` method works exactly the same as usual, if You call it it will return `null` or error messages in form of\r\n\r\n``` JavaScript\r\n{\r\n  name  : [\"can't be blank\"],\r\n  login : [\"invalid format\"]\r\n}\r\n```\r\n\r\n**Implementation**\r\n\r\n``` CoffeeScript\r\nclass app.Model extends Backbone.Model\r\n  # Making validate by default run validations.\r\n  validate: (attrs = {}) -> @_runValidations attrs\r\n\r\n  # Runs validations defined in `validations` attribute of model.\r\n  _runValidations: (attrs) ->\r\n    return null unless @validations\r\n    errors = {}\r\n    for k, v of attrs\r\n      msg = @validations[k]?(v)\r\n      (errors[k] ?= []).push msg if msg\r\n    if _(errors).size() > 0 then errors else null\r\n```\r\n\r\nIt's still backward compatible, if You don't provide `validations` attribute it will work as usual, You also can override `validate` as it's supposed to be used in current version of Backbone."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1754",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1754/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1754/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1754/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1754",
    "id": 7718532,
    "number": 1754,
    "title": "Avoid triggering a sort in some cases",
    "user": {
      "login": "byroot",
      "id": 44640,
      "avatar_url": "https://avatars.githubusercontent.com/u/44640?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/byroot",
      "html_url": "https://github.com/byroot",
      "followers_url": "https://api.github.com/users/byroot/followers",
      "following_url": "https://api.github.com/users/byroot/following{/other_user}",
      "gists_url": "https://api.github.com/users/byroot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/byroot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/byroot/subscriptions",
      "organizations_url": "https://api.github.com/users/byroot/orgs",
      "repos_url": "https://api.github.com/users/byroot/repos",
      "events_url": "https://api.github.com/users/byroot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/byroot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2012-10-19T15:08:33Z",
    "updated_at": "2012-11-19T22:27:24Z",
    "closed_at": "2012-11-19T21:52:38Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1754",
      "html_url": "https://github.com/jashkenas/backbone/pull/1754",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1754.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1754.patch"
    },
    "body": "If all models provided to Collection.add are duplicates and we don't want to merge them, then it's useless to sort the collection.\r\n\r\nIn my case the collection sorting take around 30ms (dynamic sorting on text field with String.localeCompare on a ~800 items collection).\r\n\r\nRight now to save these computation i'm forced to check for duplicates before calling Collection.add:\r\n\r\n```coffescript\r\n@collection.add(model) unless @collection.get(model.id)\r\n```\r\n\r\nIn that case I know that if `model`is in `@collection` its the same instance.\r\n\r\nRegards.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1749",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1749/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1749/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1749/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1749",
    "id": 7666818,
    "number": 1749,
    "title": "Documentation should explain that View constructor extends this.options with the options argument",
    "user": {
      "login": "ghing",
      "id": 110420,
      "avatar_url": "https://avatars.githubusercontent.com/u/110420?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghing",
      "html_url": "https://github.com/ghing",
      "followers_url": "https://api.github.com/users/ghing/followers",
      "following_url": "https://api.github.com/users/ghing/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghing/subscriptions",
      "organizations_url": "https://api.github.com/users/ghing/orgs",
      "repos_url": "https://api.github.com/users/ghing/repos",
      "events_url": "https://api.github.com/users/ghing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2012-10-17T19:36:14Z",
    "updated_at": "2012-11-19T21:48:29Z",
    "closed_at": "2012-11-19T21:48:29Z",
    "body": "Unless this functionality is subject to change,  I think the docs should explain that the constructor (really ``_configure``) extends ``this.options`` rather than replacing it.  This behavior seems to provide a pattern for providing default options for a view that can be overridden by the options passed to the constructor.  However, this wasn't clear to me from the docs."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1701",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1701/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1701/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1701/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1701",
    "id": 7323610,
    "number": 1701,
    "title": "Improve documentation of \"off\"",
    "user": {
      "login": "skarkkai",
      "id": 1282262,
      "avatar_url": "https://avatars.githubusercontent.com/u/1282262?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skarkkai",
      "html_url": "https://github.com/skarkkai",
      "followers_url": "https://api.github.com/users/skarkkai/followers",
      "following_url": "https://api.github.com/users/skarkkai/following{/other_user}",
      "gists_url": "https://api.github.com/users/skarkkai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skarkkai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skarkkai/subscriptions",
      "organizations_url": "https://api.github.com/users/skarkkai/orgs",
      "repos_url": "https://api.github.com/users/skarkkai/repos",
      "events_url": "https://api.github.com/users/skarkkai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skarkkai/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2012-10-03T14:38:14Z",
    "updated_at": "2012-10-03T18:48:13Z",
    "closed_at": "2012-10-03T18:48:13Z",
    "body": ".off() disables propagation of model change events to collections. Most users can't be expected to know that, yet the documentation makes no mention of this.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1693",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1693/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1693/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1693/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1693",
    "id": 7276137,
    "number": 1693,
    "title": "Allow view.el to be provided as a function.",
    "user": {
      "login": "braddunbar",
      "id": 11674,
      "avatar_url": "https://avatars.githubusercontent.com/u/11674?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/braddunbar",
      "html_url": "https://github.com/braddunbar",
      "followers_url": "https://api.github.com/users/braddunbar/followers",
      "following_url": "https://api.github.com/users/braddunbar/following{/other_user}",
      "gists_url": "https://api.github.com/users/braddunbar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/braddunbar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/braddunbar/subscriptions",
      "organizations_url": "https://api.github.com/users/braddunbar/orgs",
      "repos_url": "https://api.github.com/users/braddunbar/repos",
      "events_url": "https://api.github.com/users/braddunbar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/braddunbar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-10-01T21:05:11Z",
    "updated_at": "2012-10-02T03:18:58Z",
    "closed_at": "2012-10-02T03:18:58Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1693",
      "html_url": "https://github.com/jashkenas/backbone/pull/1693",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1693.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1693.patch"
    },
    "body": "I find this to be a rather elegant way to include the view element in a template (a much requested feature).\r\n\r\n```js\r\nvar View = Backbone.View.extend({\r\n  el: _.template(\"<a class='…'><%- this.model.get('name') %></a>\")\r\n});\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1657",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1657/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1657/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1657/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1657",
    "id": 6920783,
    "number": 1657,
    "title": "Discussion: Bindings for Backbone",
    "user": {
      "login": "delambo",
      "id": 522900,
      "avatar_url": "https://avatars.githubusercontent.com/u/522900?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/delambo",
      "html_url": "https://github.com/delambo",
      "followers_url": "https://api.github.com/users/delambo/followers",
      "following_url": "https://api.github.com/users/delambo/following{/other_user}",
      "gists_url": "https://api.github.com/users/delambo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/delambo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/delambo/subscriptions",
      "organizations_url": "https://api.github.com/users/delambo/orgs",
      "repos_url": "https://api.github.com/users/delambo/repos",
      "events_url": "https://api.github.com/users/delambo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/delambo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-09-17T14:24:43Z",
    "updated_at": "2014-01-11T09:37:21Z",
    "closed_at": "2012-09-28T19:13:55Z",
    "body": "I just extracted and opened up a project, Stickit, which is a highly configurable model binding plugin for Backbone. My goal for Stickit was/is to conform to Backbone's style and to fit naturally within Backbone's core functionality. You can read more at the following github:\n\nhttp://nytimes.github.com/backbone.stickit/\n\nI respect the Backbone community's (and jeremy's) worldview which prizes minimalism and uniformity: if a high threshold of users won't use a feature or if a feature feels out of place, then they won't consider it. Model binding is a popular feature, but it has been hard to envision where it would fit in with Backbone's hands-off approach to rendering. Where other libraries/frameworks and plugins have failed by moving model binding configuration into the DOM/presentation layer, Stickit was designed to keep configuration in the place that it should be - in the JavaScript and in the context of the view controller which encapsulates the element and model.\n\nI was thinking about drawing up a pull for Backbone which included a model binding implementation like Stickit, but I would like to get opinions and ideas from the community first.\n\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1609",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1609/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1609/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1609/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1609",
    "id": 6597236,
    "number": 1609,
    "title": "API Concern",
    "user": {
      "login": "prettymuchbryce",
      "id": 709042,
      "avatar_url": "https://avatars.githubusercontent.com/u/709042?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prettymuchbryce",
      "html_url": "https://github.com/prettymuchbryce",
      "followers_url": "https://api.github.com/users/prettymuchbryce/followers",
      "following_url": "https://api.github.com/users/prettymuchbryce/following{/other_user}",
      "gists_url": "https://api.github.com/users/prettymuchbryce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prettymuchbryce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prettymuchbryce/subscriptions",
      "organizations_url": "https://api.github.com/users/prettymuchbryce/orgs",
      "repos_url": "https://api.github.com/users/prettymuchbryce/repos",
      "events_url": "https://api.github.com/users/prettymuchbryce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prettymuchbryce/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-09-01T18:41:08Z",
    "updated_at": "2012-09-22T13:56:18Z",
    "closed_at": "2012-09-22T13:56:18Z",
    "body": "From an API standpoint I think special/base values like urlRoot, and id could use special setters. It's strange that they are passed in like any normal instance variable. It doesn't draw the distinction that they are a special part of the Backbone framework."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1589",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1589/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1589/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1589/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1589",
    "id": 6460697,
    "number": 1589,
    "title": "Have the documentation hide the left bar rather than over text over text",
    "user": {
      "login": "sroussey",
      "id": 127349,
      "avatar_url": "https://avatars.githubusercontent.com/u/127349?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sroussey",
      "html_url": "https://github.com/sroussey",
      "followers_url": "https://api.github.com/users/sroussey/followers",
      "following_url": "https://api.github.com/users/sroussey/following{/other_user}",
      "gists_url": "https://api.github.com/users/sroussey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sroussey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sroussey/subscriptions",
      "organizations_url": "https://api.github.com/users/sroussey/orgs",
      "repos_url": "https://api.github.com/users/sroussey/repos",
      "events_url": "https://api.github.com/users/sroussey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sroussey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2012-08-26T18:43:45Z",
    "updated_at": "2012-09-28T21:45:18Z",
    "closed_at": "2012-09-28T19:32:49Z",
    "body": "On Firefox, if the window *starts* really narrow, the text of the navigation and the text of the page overlap. This does not seem to happen on Chrome, but Firefox is what matters for me. Besides this bug, it would be a nice \"responsive\" design to have the nav area hide if the window is narrow (or starts narrow).\n\nWhen I link context sensitive help for Backbone objects, there is very little room inside Firebug, and at the moment, it is useless. I'd rather link to the real documentation than host a copy of my own.\n\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1578",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1578/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1578/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1578/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1578",
    "id": 6426936,
    "number": 1578,
    "title": "Views With Multiple Models/Collections",
    "user": {
      "login": "docyes",
      "id": 52890,
      "avatar_url": "https://avatars.githubusercontent.com/u/52890?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/docyes",
      "html_url": "https://github.com/docyes",
      "followers_url": "https://api.github.com/users/docyes/followers",
      "following_url": "https://api.github.com/users/docyes/following{/other_user}",
      "gists_url": "https://api.github.com/users/docyes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/docyes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/docyes/subscriptions",
      "organizations_url": "https://api.github.com/users/docyes/orgs",
      "repos_url": "https://api.github.com/users/docyes/repos",
      "events_url": "https://api.github.com/users/docyes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/docyes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2012-08-24T06:35:44Z",
    "updated_at": "2013-03-06T16:14:05Z",
    "closed_at": "2012-08-24T14:02:32Z",
    "body": "Often views can rely on multiple models and/or collections. The standard convention for model/collection passing into the view constructor via the special model/collection key is very useful and elegant. \n\nFor situations where multiple models or collections are passed into views it is equally elegant to pass them in as nested objects to the view constructor (ie., {model: {a: a, b: b}}).\n\nIt would be helpful if the methods like the new dispose were multi model/collection aware."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1509",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1509/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1509/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1509/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1509",
    "id": 5868501,
    "number": 1509,
    "title": "added optional groups to route syntax, with tests",
    "user": {
      "login": "ianstormtaylor",
      "id": 311752,
      "avatar_url": "https://avatars.githubusercontent.com/u/311752?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianstormtaylor",
      "html_url": "https://github.com/ianstormtaylor",
      "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
      "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
      "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
      "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
      "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 10,
    "created_at": "2012-07-27T01:59:15Z",
    "updated_at": "2012-12-13T04:51:20Z",
    "closed_at": "2012-10-03T02:43:42Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1509",
      "html_url": "https://github.com/jashkenas/backbone/pull/1509",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1509.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1509.patch"
    },
    "body": "from the ideas in #1508"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1504",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1504/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1504/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1504/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1504",
    "id": 5836997,
    "number": 1504,
    "title": "make the 'eventSplitter' public",
    "user": {
      "login": "boxxxie",
      "id": 440034,
      "avatar_url": "https://avatars.githubusercontent.com/u/440034?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boxxxie",
      "html_url": "https://github.com/boxxxie",
      "followers_url": "https://api.github.com/users/boxxxie/followers",
      "following_url": "https://api.github.com/users/boxxxie/following{/other_user}",
      "gists_url": "https://api.github.com/users/boxxxie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boxxxie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boxxxie/subscriptions",
      "organizations_url": "https://api.github.com/users/boxxxie/orgs",
      "repos_url": "https://api.github.com/users/boxxxie/repos",
      "events_url": "https://api.github.com/users/boxxxie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boxxxie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2012-07-25T18:37:29Z",
    "updated_at": "2013-10-23T13:14:36Z",
    "closed_at": "2012-07-26T15:16:00Z",
    "body": "I require an event splitter that doesn't split on spaces (spaces have meaning in my events).\nI propose this change in the API.\n\nfrom\n````\nvar eventSplitter =  /\\s+/;\n````\nto\n````\nBackbone.eventSplitter = /\\s+/;\n````"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1489",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1489/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1489/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1489/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1489",
    "id": 5676404,
    "number": 1489,
    "title": "Attributes that are prefixed with _ should be synced with localStorage instead of being sent to the server",
    "user": {
      "login": "ronshapiro",
      "id": 792797,
      "avatar_url": "https://avatars.githubusercontent.com/u/792797?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronshapiro",
      "html_url": "https://github.com/ronshapiro",
      "followers_url": "https://api.github.com/users/ronshapiro/followers",
      "following_url": "https://api.github.com/users/ronshapiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronshapiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronshapiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronshapiro/subscriptions",
      "organizations_url": "https://api.github.com/users/ronshapiro/orgs",
      "repos_url": "https://api.github.com/users/ronshapiro/repos",
      "events_url": "https://api.github.com/users/ronshapiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronshapiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-07-17T22:20:54Z",
    "updated_at": "2012-07-18T14:26:11Z",
    "closed_at": "2012-07-18T14:26:11Z",
    "body": "I like to have all my client specific variables named _attribute - it would be nice to automatically sync this with localStorage on CRUD commands instead of sending them to the server."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1468",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1468/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1468/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1468/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1468",
    "id": 5406134,
    "number": 1468,
    "title": "Add custom \"fetch\" events on Models and Collections",
    "user": {
      "login": "spacenick",
      "id": 658407,
      "avatar_url": "https://avatars.githubusercontent.com/u/658407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spacenick",
      "html_url": "https://github.com/spacenick",
      "followers_url": "https://api.github.com/users/spacenick/followers",
      "following_url": "https://api.github.com/users/spacenick/following{/other_user}",
      "gists_url": "https://api.github.com/users/spacenick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spacenick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spacenick/subscriptions",
      "organizations_url": "https://api.github.com/users/spacenick/orgs",
      "repos_url": "https://api.github.com/users/spacenick/repos",
      "events_url": "https://api.github.com/users/spacenick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spacenick/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 14,
    "created_at": "2012-07-03T12:53:49Z",
    "updated_at": "2012-12-10T19:10:31Z",
    "closed_at": "2012-12-10T19:10:31Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1468",
      "html_url": "https://github.com/jashkenas/backbone/pull/1468",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1468.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1468.patch"
    },
    "body": "...found this pretty useful to add \"generic\" loader views on any collections/models.\n\nSimple example, a generic loader that can be quickly binded to any collection, and will do the job.\n\n```javascript\nvar Loader = Backbone.View.extend({\n\n\ttagName:'img',\n\tattributes:{\n\t\tsrc:'loader.gif'\n\t},\n\n\tinitialize:function() {\n\t\t_.bindAll(this,'hide','show')\n\t\tthis.collection.on('reset',this.hide);\n\t\tthis.collection.on('fetch',this.show);\n\t},\n\n\thide:function() {\n\t\t$(this.el).hide();\n\t},\n\tshow:function() {\n\t\t$(this.el).show();\n\t}\n\n})\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1443",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1443/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1443/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1443/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1443",
    "id": 5228070,
    "number": 1443,
    "title": "more consistent collection options",
    "user": {
      "login": "ghost",
      "id": 10137,
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-06-23T07:51:51Z",
    "updated_at": "2012-06-23T14:38:09Z",
    "closed_at": "2012-06-23T14:38:09Z",
    "body": "In views you can pass custom options via the `options` object: And then within the view, you can access the options as `this.options` everywhere:\n\n```javascript\nvar MyView = Backbone.View.extend({\n    initialize: function() {\n        var value = this.options.value;\n    },\n\n    somethingElse: function() {\n        doSomething(this.options.value);\n    }\n});\n```\nThis proves to be very useful for passing all kinds of options to configure the views.\n\nNow, in collections, there is a similar functionality available (per docs)\n\n`new Collection([models], [options]) `\n\nBut strangely, you can not access those options via `this.options`. In order to access these options, you need to accept an `options` argument in your `initialize` function:\n\n```JavaScript\nvar MyColl = Backbone.Collection.extend({\n    initialize: function(models, options) {\n        var value = options.value;\n    }\n});\n```\nYou can do something like this:\n\n```JavaScript\nvar MyColl = Backbone.Collection.extend({\n    initialize: function(models, options) {\n        this.options = options;\n    }\n});\n```\nBut I think if it behaved like views so that we don't have to manually set the `options` object on `this` -- it would feel more consistent."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1442",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1442/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1442/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1442/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1442",
    "id": 5218425,
    "number": 1442,
    "title": "Adding attributes to Collections?",
    "user": {
      "login": "aaunel",
      "id": 1331877,
      "avatar_url": "https://avatars.githubusercontent.com/u/1331877?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaunel",
      "html_url": "https://github.com/aaunel",
      "followers_url": "https://api.github.com/users/aaunel/followers",
      "following_url": "https://api.github.com/users/aaunel/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaunel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaunel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaunel/subscriptions",
      "organizations_url": "https://api.github.com/users/aaunel/orgs",
      "repos_url": "https://api.github.com/users/aaunel/repos",
      "events_url": "https://api.github.com/users/aaunel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaunel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2012-06-22T16:08:17Z",
    "updated_at": "2014-07-06T06:51:14Z",
    "closed_at": "2012-06-23T14:50:19Z",
    "body": "I've looked through the closed 'enhancements' flagged for Backbone, and couldn't find anything on this specific subject, but am wondering whether attributes for Collections is something that's been investigated?\n\nPersonally, I could see plenty of utility in being able to provide a small selection of meta data to a collection.\n\nFor example, say we have an `Album` collection of `song` models:\n\n```\nvar Album = Backbone.Collection.extend({\n\tmodel: song,\n\tproperties: {\n\t\tname: \"Greatest Hits\",\n\t\tpublisher: \"Sony\"\n\t}\n});\n```\n\nthe properties attribute could allow something like this:\n\n```\nAlbum.prop(\"name\"); // \"Greatest Hits\"\nAlbum.prop(\"publisher\"); // \"Sony\"\n\nAlbum.pluck(\"title\"); // \"Song1,Song2,Song3...\"\n```\n\nOtherwise, at the moment we would have something like this, which relies on that collection being populated:\n\n```\nAlbum.first().get(\"albumName\"); // \"Greatest Hits\"\n```\n\n\nI discovered a similar (old) topic on [Stack Overflow: Setting attributes on a collection - backbone js](http://stackoverflow.com/questions/5930656/setting-attributes-on-a-collection-backbone-js).\n\nWhere I can't rely on data being available in a collection, I'm actually having to wrap the collection in a model (model -> collection -> model) to be able to support these meta data attributes."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1441",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1441/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1441/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1441/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1441",
    "id": 5218310,
    "number": 1441,
    "title": "Question: Change event on nested models",
    "user": {
      "login": "tgriesser",
      "id": 154748,
      "avatar_url": "https://avatars.githubusercontent.com/u/154748?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgriesser",
      "html_url": "https://github.com/tgriesser",
      "followers_url": "https://api.github.com/users/tgriesser/followers",
      "following_url": "https://api.github.com/users/tgriesser/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgriesser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgriesser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgriesser/subscriptions",
      "organizations_url": "https://api.github.com/users/tgriesser/orgs",
      "repos_url": "https://api.github.com/users/tgriesser/repos",
      "events_url": "https://api.github.com/users/tgriesser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgriesser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-06-22T16:05:06Z",
    "updated_at": "2012-06-25T18:03:40Z",
    "closed_at": "2012-06-25T18:03:40Z",
    "body": "From the docs, the change event is triggered \"when a model's attributes have changed\". If a model contains a nested model or collection, would it make sense to trigger the \"change\" event on the parent model, as the state of the parent model is indeed \"changing\"?\n\n```coffee\n# Container Model\ncontainer = new Backbone.Model\n   name : \"Test\"\n   description : \"Demo of Functionality\"\n\n# Nested collection\ncontainer.set('tags', new Collection([{\n   tagName : \"new\"\n,\n   tagName : \"featured\"\n]))\n\n# Changing an attribute on the nested collection,\n# at which point the \"container\" Model has \"changed\"\n# in the sense that _.isEqual between the current and\n# previous state would return false\ncontainer.get('tags').at(1).set('tagName', 'closed')\n```\n\nJust wanted to see if this functionality would make sense, or if there could be a separate event that indicated a proxied change event was occurring on a child\n\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1428",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1428/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1428/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1428/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1428",
    "id": 5153510,
    "number": 1428,
    "title": "It could be amazing to integrate BB with sql.js",
    "user": {
      "login": "starkovv",
      "id": 654646,
      "avatar_url": "https://avatars.githubusercontent.com/u/654646?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/starkovv",
      "html_url": "https://github.com/starkovv",
      "followers_url": "https://api.github.com/users/starkovv/followers",
      "following_url": "https://api.github.com/users/starkovv/following{/other_user}",
      "gists_url": "https://api.github.com/users/starkovv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/starkovv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/starkovv/subscriptions",
      "organizations_url": "https://api.github.com/users/starkovv/orgs",
      "repos_url": "https://api.github.com/users/starkovv/repos",
      "events_url": "https://api.github.com/users/starkovv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/starkovv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-06-19T18:54:04Z",
    "updated_at": "2012-06-19T19:22:59Z",
    "closed_at": "2012-06-19T19:22:59Z",
    "body": "https://github.com/kripken/sql.js"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1420",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1420/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1420/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1420/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1420",
    "id": 5111156,
    "number": 1420,
    "title": "Unnecessary images on the documentation page",
    "user": {
      "login": "ghost",
      "id": 10137,
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-06-17T09:43:17Z",
    "updated_at": "2012-06-21T14:42:35Z",
    "closed_at": "2012-06-21T12:45:44Z",
    "body": "The documentation page http://documentcloud.github.com/backbone/, is loading a total of 42 images. Of them, 40 are the screen shots of the applications that are using backbone.\n\nNow if I just want to see a piece of documentation during development, I will need to quickly load the page. And at that time, I don't need to load all those images. But every time I load up the page, it eats my bandwidth unnecessarily.\n\nMake the loading of examples optional."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1412",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1412/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1412/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1412/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1412",
    "id": 5082991,
    "number": 1412,
    "title": "Trigger \"sync\" event for fetch also",
    "user": {
      "login": "mateusmaso",
      "id": 585708,
      "avatar_url": "https://avatars.githubusercontent.com/u/585708?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mateusmaso",
      "html_url": "https://github.com/mateusmaso",
      "followers_url": "https://api.github.com/users/mateusmaso/followers",
      "following_url": "https://api.github.com/users/mateusmaso/following{/other_user}",
      "gists_url": "https://api.github.com/users/mateusmaso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mateusmaso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mateusmaso/subscriptions",
      "organizations_url": "https://api.github.com/users/mateusmaso/orgs",
      "repos_url": "https://api.github.com/users/mateusmaso/repos",
      "events_url": "https://api.github.com/users/mateusmaso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mateusmaso/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-06-14T22:36:04Z",
    "updated_at": "2012-06-15T15:32:21Z",
    "closed_at": "2012-06-15T15:32:21Z",
    "body": "I dont know if the name \"sync\" is really what it should be called, but when I have a model/collection with an \"id\" and I try to fetch it from server to get all the information I would like to be triggered to notify all my observers. I implemented my own way, just like save/destroy method.. but would be better if backbone.js had it already \n\n```coffeescript\nfetch: (...) ->\n   options.success = (resp, status, xhr) =>\n       success resp, status, xhr  if success\n       @trigger \"sync\", model, resp, options\n\n   ...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1343",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1343/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1343/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1343/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1343",
    "id": 4714834,
    "number": 1343,
    "title": "Slice on Collections",
    "user": {
      "login": "esmooov",
      "id": 291694,
      "avatar_url": "https://avatars.githubusercontent.com/u/291694?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esmooov",
      "html_url": "https://github.com/esmooov",
      "followers_url": "https://api.github.com/users/esmooov/followers",
      "following_url": "https://api.github.com/users/esmooov/following{/other_user}",
      "gists_url": "https://api.github.com/users/esmooov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esmooov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esmooov/subscriptions",
      "organizations_url": "https://api.github.com/users/esmooov/orgs",
      "repos_url": "https://api.github.com/users/esmooov/repos",
      "events_url": "https://api.github.com/users/esmooov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esmooov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2012-05-23T16:09:08Z",
    "updated_at": "2012-05-23T21:14:41Z",
    "closed_at": "2012-05-23T21:14:41Z",
    "body": "Perhaps there could be a collection.slice() method that would work pretty much exactly like the array.slice() method.\n\nYou can already slice on collection.models.slice() but this is probably not the most efficient way to do it. \n\nEven with underscore, a slice(3,5) would be as simple as `collection.chain().rest(3).first(2).value()` so it's not a huge deal. Just might make things a touch more readable. "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1272",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1272/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1272/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1272/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1272",
    "id": 4383644,
    "number": 1272,
    "title": "Keep track of routes added dynamically",
    "user": {
      "login": "ganmor",
      "id": 365810,
      "avatar_url": "https://avatars.githubusercontent.com/u/365810?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ganmor",
      "html_url": "https://github.com/ganmor",
      "followers_url": "https://api.github.com/users/ganmor/followers",
      "following_url": "https://api.github.com/users/ganmor/following{/other_user}",
      "gists_url": "https://api.github.com/users/ganmor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ganmor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ganmor/subscriptions",
      "organizations_url": "https://api.github.com/users/ganmor/orgs",
      "repos_url": "https://api.github.com/users/ganmor/repos",
      "events_url": "https://api.github.com/users/ganmor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ganmor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-05-02T12:20:57Z",
    "updated_at": "2013-07-05T20:27:01Z",
    "closed_at": "2012-05-02T14:51:43Z",
    "body": "I think we should be able to access dynamically added routes in order to remove them later.\r\nI can provide a full use case if you don't see why anyone would do that.\r\n\r\nOne possible solution would be returning the route when it's been added.\r\n\r\n` var myNewRoute = evenium.core.router.route( route , routeName, callback );`\r\n\r\nor providing an access by route name :\r\n\r\n`Backbone.history.routesByName[routeName*]`\r\n\r\n* as provided to the route function\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1251",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1251/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1251/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1251/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1251",
    "id": 4311934,
    "number": 1251,
    "title": "Add iterators for collections",
    "user": {
      "login": "rquinlivan",
      "id": 485844,
      "avatar_url": "https://avatars.githubusercontent.com/u/485844?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rquinlivan",
      "html_url": "https://github.com/rquinlivan",
      "followers_url": "https://api.github.com/users/rquinlivan/followers",
      "following_url": "https://api.github.com/users/rquinlivan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rquinlivan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rquinlivan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rquinlivan/subscriptions",
      "organizations_url": "https://api.github.com/users/rquinlivan/orgs",
      "repos_url": "https://api.github.com/users/rquinlivan/repos",
      "events_url": "https://api.github.com/users/rquinlivan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rquinlivan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-04-26T21:29:53Z",
    "updated_at": "2012-04-30T16:13:48Z",
    "closed_at": "2012-04-30T16:13:48Z",
    "body": "A common pattern I use my Backbone collections is grabbing a single model from the collection, then looking up the next model or previous model in the collection. The proposed ES6 iterators are similar to this (see : https://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators).\r\n\r\nIs there any plan on building in a standard way to do this in Backbone?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1247",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1247/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1247/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1247/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1247",
    "id": 4292290,
    "number": 1247,
    "title": "add html() and append()",
    "user": {
      "login": "maccman",
      "id": 2142,
      "avatar_url": "https://avatars.githubusercontent.com/u/2142?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maccman",
      "html_url": "https://github.com/maccman",
      "followers_url": "https://api.github.com/users/maccman/followers",
      "following_url": "https://api.github.com/users/maccman/following{/other_user}",
      "gists_url": "https://api.github.com/users/maccman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maccman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maccman/subscriptions",
      "organizations_url": "https://api.github.com/users/maccman/orgs",
      "repos_url": "https://api.github.com/users/maccman/repos",
      "events_url": "https://api.github.com/users/maccman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maccman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 23,
    "created_at": "2012-04-25T22:23:22Z",
    "updated_at": "2012-04-30T21:18:16Z",
    "closed_at": "2012-04-30T17:37:59Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1247",
      "html_url": "https://github.com/jashkenas/backbone/pull/1247",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1247.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1247.patch"
    },
    "body": "These utility functions allow you to easily replace and append content to $el. They look extremely simple (because they are), but they are conceptually very important. \r\n\r\nappend() introduces developers to the idea that complex Views are made up of a subset of other Views. I think this is a really important concept to grasp, as it ensures your JavaScript programs are modular and components are reusable. I use these all the time in Spine :)\r\n\r\nFor example:\r\n\r\n    var Sidebar = Backbone.View.extend({\r\n      render: function(){\r\n       this.append(new BoxShadow);\r\n       this.append(new Backgrounds);\r\n      }\r\n    });"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1220",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1220/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1220/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1220/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1220",
    "id": 4104233,
    "number": 1220,
    "title": "Optionally merging updated model state on collection add.",
    "user": {
      "login": "folded",
      "id": 1087098,
      "avatar_url": "https://avatars.githubusercontent.com/u/1087098?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/folded",
      "html_url": "https://github.com/folded",
      "followers_url": "https://api.github.com/users/folded/followers",
      "following_url": "https://api.github.com/users/folded/following{/other_user}",
      "gists_url": "https://api.github.com/users/folded/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/folded/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/folded/subscriptions",
      "organizations_url": "https://api.github.com/users/folded/orgs",
      "repos_url": "https://api.github.com/users/folded/repos",
      "events_url": "https://api.github.com/users/folded/events{/privacy}",
      "received_events_url": "https://api.github.com/users/folded/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-04-13T14:36:23Z",
    "updated_at": "2014-04-30T15:46:24Z",
    "closed_at": "2012-04-23T20:58:03Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1220",
      "html_url": "https://github.com/jashkenas/backbone/pull/1220",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1220.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1220.patch"
    },
    "body": "The current behaviour of `Backbone.Collection.add` is to discard models that have matching ids. This makes it difficult to fetch and insert a set of models that may contain both new and updated models. Maybe there's a different way to perform this task, but it wasn't obvious to me.\r\n\r\nThis patch adds a merge flag to `Backbone.Collection.add`, which causes models with identical ids be passed as arguments to `Backbone.Model.set` instead of being discarded. In the case of true duplicates, the current behaviour is preserved (no change to the collection, no additional events fired), but updates to models retain the object in the collection, but update its attributes (firing the corresponding change events, unless silent)."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1219",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1219/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1219/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1219/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1219",
    "id": 4103540,
    "number": 1219,
    "title": "Document broken unescaped spaces in Firefox",
    "user": {
      "login": "samuelvogel",
      "id": 710188,
      "avatar_url": "https://avatars.githubusercontent.com/u/710188?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samuelvogel",
      "html_url": "https://github.com/samuelvogel",
      "followers_url": "https://api.github.com/users/samuelvogel/followers",
      "following_url": "https://api.github.com/users/samuelvogel/following{/other_user}",
      "gists_url": "https://api.github.com/users/samuelvogel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samuelvogel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samuelvogel/subscriptions",
      "organizations_url": "https://api.github.com/users/samuelvogel/orgs",
      "repos_url": "https://api.github.com/users/samuelvogel/repos",
      "events_url": "https://api.github.com/users/samuelvogel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samuelvogel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2012-04-13T13:52:48Z",
    "updated_at": "2012-05-18T14:33:54Z",
    "closed_at": "2012-04-23T20:48:19Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1219",
      "html_url": "https://github.com/jashkenas/backbone/pull/1219",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1219.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1219.patch"
    },
    "body": "It was decided not to fix #1156, so documenting this here."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1215",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1215/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1215/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1215/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1215",
    "id": 4073413,
    "number": 1215,
    "title": "how use nested id's?",
    "user": {
      "login": "yurtaev",
      "id": 444503,
      "avatar_url": "https://avatars.githubusercontent.com/u/444503?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yurtaev",
      "html_url": "https://github.com/yurtaev",
      "followers_url": "https://api.github.com/users/yurtaev/followers",
      "following_url": "https://api.github.com/users/yurtaev/following{/other_user}",
      "gists_url": "https://api.github.com/users/yurtaev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yurtaev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yurtaev/subscriptions",
      "organizations_url": "https://api.github.com/users/yurtaev/orgs",
      "repos_url": "https://api.github.com/users/yurtaev/repos",
      "events_url": "https://api.github.com/users/yurtaev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yurtaev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-04-11T21:05:22Z",
    "updated_at": "2012-04-17T17:56:36Z",
    "closed_at": "2012-04-17T13:52:16Z",
    "body": "Example: mongodb document have a **_id.$oid** field"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1208",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1208/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1208/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1208/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1208",
    "id": 4049846,
    "number": 1208,
    "title": "feature idea: allow make to use `text` instead of `html`",
    "user": {
      "login": "ianstormtaylor",
      "id": 311752,
      "avatar_url": "https://avatars.githubusercontent.com/u/311752?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianstormtaylor",
      "html_url": "https://github.com/ianstormtaylor",
      "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
      "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
      "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
      "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
      "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-04-10T17:00:13Z",
    "updated_at": "2012-04-11T17:15:39Z",
    "closed_at": "2012-04-11T17:15:39Z",
    "body": "as a fourth argument: `make(tagName, attributes, content, useText)`\r\n\r\nwould make dealing with escaping things much easier, as it stands now we do this instead:\r\n\r\n```\r\nvar el = self.make('li', {...});\r\n$(el).text(...);\r\n```\r\n\r\nor open to other ways to make this cleaner.\r\nthanks"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1169",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1169/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1169/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1169/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1169",
    "id": 3921005,
    "number": 1169,
    "title": "Option to allow Model.set to run validations, but not bail if they fail",
    "user": {
      "login": "benweint",
      "id": 982820,
      "avatar_url": "https://avatars.githubusercontent.com/u/982820?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benweint",
      "html_url": "https://github.com/benweint",
      "followers_url": "https://api.github.com/users/benweint/followers",
      "following_url": "https://api.github.com/users/benweint/following{/other_user}",
      "gists_url": "https://api.github.com/users/benweint/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benweint/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benweint/subscriptions",
      "organizations_url": "https://api.github.com/users/benweint/orgs",
      "repos_url": "https://api.github.com/users/benweint/repos",
      "events_url": "https://api.github.com/users/benweint/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benweint/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-04-02T04:01:36Z",
    "updated_at": "2012-08-23T03:42:49Z",
    "closed_at": "2012-04-02T14:23:28Z",
    "body": "I'd really like to be able to have Model.set run my validations and trigger an error event / callback, but not bail out if validation fails.\r\n\r\nI want my model's attributes to track exactly what the user has entered, but I also want to receive events / callbacks when the model transitions from valid to invalid. I can accomplish the first part using the `{silent: true}` option to `Model.set`, but when doing this, validations aren't run and callbacks aren't fired, so I don't easily know when my model transitions from valid to invalid.\r\n\r\nI could alternately use the default behavior, but then my model gets out of sync with what the user has entered. This is an issue if I have, for example, a save button for the view hooked up to my model. When the user clicks the save button, the most natural way to handle it seems to be to call `Model.save`, which will misleadingly succeed, because the invalid attribute value was not actually set on the model due to validation failure.\r\n\r\nPerhaps I'm just thinking about this backwards, but would it be crazy to add a `force` option to `Model.set` that would modify the default `set` behavior by just continuing to update the relevant attribute(s) even if validations fail (but still fire error events / callbacks)?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1166",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1166/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1166/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1166/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1166",
    "id": 3920764,
    "number": 1166,
    "title": "Set fragment option with History.start",
    "user": {
      "login": "tribalvibes",
      "id": 167275,
      "avatar_url": "https://avatars.githubusercontent.com/u/167275?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tribalvibes",
      "html_url": "https://github.com/tribalvibes",
      "followers_url": "https://api.github.com/users/tribalvibes/followers",
      "following_url": "https://api.github.com/users/tribalvibes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tribalvibes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tribalvibes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tribalvibes/subscriptions",
      "organizations_url": "https://api.github.com/users/tribalvibes/orgs",
      "repos_url": "https://api.github.com/users/tribalvibes/repos",
      "events_url": "https://api.github.com/users/tribalvibes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tribalvibes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2012-04-02T03:07:29Z",
    "updated_at": "2012-04-12T18:25:04Z",
    "closed_at": "2012-04-02T14:29:46Z",
    "body": "It would be useful to be able to specify the starting fragment with `History.start`, since the app may not want it to be the fragment derived from the `window.location` that loaded the page. I propose adding an `option`, e.g. `History.start({ fragment: '/login' })`.  We have already done something similar with our app. Only the following change is required (line 1005 in the current head:)\r\n`      var fragment          = options.fragment || this.getFragment();`\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1136",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1136/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1136/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1136/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1136",
    "id": 3774781,
    "number": 1136,
    "title": "Merge results of a Collection.fetch",
    "user": {
      "login": "Jared314",
      "id": 29752,
      "avatar_url": "https://avatars.githubusercontent.com/u/29752?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jared314",
      "html_url": "https://github.com/Jared314",
      "followers_url": "https://api.github.com/users/Jared314/followers",
      "following_url": "https://api.github.com/users/Jared314/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jared314/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jared314/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jared314/subscriptions",
      "organizations_url": "https://api.github.com/users/Jared314/orgs",
      "repos_url": "https://api.github.com/users/Jared314/repos",
      "events_url": "https://api.github.com/users/Jared314/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jared314/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-03-23T03:18:53Z",
    "updated_at": "2012-03-23T12:07:42Z",
    "closed_at": "2012-03-23T12:07:42Z",
    "body": "When calling fetch with an existing collection, there does not appear to be a way to merge the results, with adds, updates, and deletes triggering `add`, `change`, and `remove` events respectively."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1124",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1124/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1124/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1124/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1124",
    "id": 3712268,
    "number": 1124,
    "title": "suggestion about initializing function in Views",
    "user": {
      "login": "drinchev",
      "id": 202919,
      "avatar_url": "https://avatars.githubusercontent.com/u/202919?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drinchev",
      "html_url": "https://github.com/drinchev",
      "followers_url": "https://api.github.com/users/drinchev/followers",
      "following_url": "https://api.github.com/users/drinchev/following{/other_user}",
      "gists_url": "https://api.github.com/users/drinchev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drinchev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drinchev/subscriptions",
      "organizations_url": "https://api.github.com/users/drinchev/orgs",
      "repos_url": "https://api.github.com/users/drinchev/repos",
      "events_url": "https://api.github.com/users/drinchev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drinchev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-03-19T15:58:56Z",
    "updated_at": "2012-03-19T16:04:30Z",
    "closed_at": "2012-03-19T16:04:29Z",
    "body": "#### The problem :\r\n\r\nSo if you have to extend a view more than once you'll have the problem of setting a new init function in every extension :\r\n\r\n```javascript\r\n\r\nvar V1 = Backbone.View.extend({\r\n       initialize: function(options) {\r\n              /* Your code for this function */\r\n              this.doThat();\r\n\r\n              this.initializeTwo(options);\r\n       }\r\n});\r\n\r\nvar V2 = V1.extend({\r\n       initializeTwo: function(options) {\r\n              this.doSomethingElse();\r\n\r\n              this.initializeThree(options);\r\n       }\r\n});\r\n\r\nvar V3 = V2.extend({\r\n       initializeThree: function(options) {\r\n              this.doAnotherThing();\r\n       }\r\n});\r\n\r\n// ... etc\r\n\r\n```\r\n\r\n#### The solution\r\n\r\nWouldn't it be great if you have the initialize function cached to each extension, so you don't need to change it and reference to it from every extension?\r\n\r\nSomething like :\r\n\r\n```javascript\r\n\r\nvar V1 = Backbone.View.extend({ \r\n       initialize : function(options) { \r\n              console.log('1');\r\n       }\r\n});\r\n\r\nvar V2 = V1.extend({\r\n       initialize : function(options) {\r\n              console.log('2')\r\n       }\r\n]);\r\n\r\nvar v = new V2(); // expected logging \"1\" and \"2\"\r\n\r\n```\r\n\r\n#### The patch\r\n\r\nYou could cache \"initialize\" function on every instance by changing this code in backbone.js :\r\n\r\n*in **inherits** variable*\r\n\r\n```javascript\r\n\r\n// line 1347\r\n\r\nchild.prototype = new ctor();\r\n\r\n// ------------------------ NEW CODE\r\n// caching initialize in initializationArray\r\nvar initializationArray = _.clone(parent.prototype.initializationArray) || [];\r\ninitializationArray.push(parent.prototype.initialize);\r\nchild.prototype.initializationArray = initializationArray;\r\n// done ----------------------------------\r\n\r\n// Add prototype properties (instance properties) to the subclass,\r\n// if supplied.\r\nif (protoProps) _.extend(child.prototype, protoProps);\r\n\r\n```\r\n\r\n*so base **Backbone.View variable** is rewritten like this*\r\n\r\n```javascript\r\n\r\n// line 1089\r\n\r\nvar View = Backbone.View = function(options) {\r\n    \tthis.cid = _.uniqueId('view');\r\n    \tthis._configure(options || {});\r\n    \tthis._ensureElement();\r\n    \tvar args = arguments;\r\n    \tif ( typeof(this.initializationArray) === 'object' ) {\r\n    \t\tvar self = this;\r\n    \t\t_.each(this.initializationArray, function(fn) {\r\n    \t\t\tif ( typeof(fn) === 'function' ) fn.apply(self, args);\r\n    \t\t});\r\n    \t}\r\n    \tthis.initialize.apply(this, arguments);\r\n    \tthis.delegateEvents();\r\n};\r\n```\r\n\r\n#### The possible problems\r\n\r\n* it isn't backward compatible;\r\n* ..."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1123",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1123/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1123/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1123/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1123",
    "id": 3711603,
    "number": 1123,
    "title": "Idea: add a `succes` callback to model.set",
    "user": {
      "login": "ianstormtaylor",
      "id": 311752,
      "avatar_url": "https://avatars.githubusercontent.com/u/311752?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianstormtaylor",
      "html_url": "https://github.com/ianstormtaylor",
      "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
      "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
      "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
      "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
      "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-03-19T15:22:16Z",
    "updated_at": "2012-03-19T15:25:04Z",
    "closed_at": "2012-03-19T15:24:35Z",
    "body": "Would be extremely helpful. Specifically in cases where models are synced to the server, so the `sync` event doesn't cover it.\r\n\r\nCurious to know your thoughts on this."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1105",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1105/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1105/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1105/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1105",
    "id": 3673885,
    "number": 1105,
    "title": "Easy way to stop listening to events",
    "user": {
      "login": "hlship",
      "id": 52660,
      "avatar_url": "https://avatars.githubusercontent.com/u/52660?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hlship",
      "html_url": "https://github.com/hlship",
      "followers_url": "https://api.github.com/users/hlship/followers",
      "following_url": "https://api.github.com/users/hlship/following{/other_user}",
      "gists_url": "https://api.github.com/users/hlship/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hlship/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hlship/subscriptions",
      "organizations_url": "https://api.github.com/users/hlship/orgs",
      "repos_url": "https://api.github.com/users/hlship/repos",
      "events_url": "https://api.github.com/users/hlship/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hlship/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2012-03-15T21:36:38Z",
    "updated_at": "2012-03-19T16:27:18Z",
    "closed_at": "2012-03-19T16:27:18Z",
    "body": "I would love it if Backbone.Event.on() returned an object (or perhaps a no-arguments function) to stop listening to the event that was just subscribed to.\r\n\r\n    this.unsub = this.model.on(\"change\", this.changeListener, this);\r\n\r\nand later:\r\n\r\n   this.unsub();\r\n\r\nCurrently, my code has a block that subscribe to model events, but then I have a nearly duplicate block to unsubscribe.\r\n\r\nAlternately, how about away to unsubscribe all with a given context: i.e.\r\n\r\n    this.model.offFor(this);\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1088",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1088/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1088/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1088/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1088",
    "id": 3599658,
    "number": 1088,
    "title": "Backbone.View Element Namespace Support",
    "user": {
      "login": "ryanhorn",
      "id": 270753,
      "avatar_url": "https://avatars.githubusercontent.com/u/270753?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanhorn",
      "html_url": "https://github.com/ryanhorn",
      "followers_url": "https://api.github.com/users/ryanhorn/followers",
      "following_url": "https://api.github.com/users/ryanhorn/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanhorn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanhorn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanhorn/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanhorn/orgs",
      "repos_url": "https://api.github.com/users/ryanhorn/repos",
      "events_url": "https://api.github.com/users/ryanhorn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanhorn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-03-11T06:51:43Z",
    "updated_at": "2012-03-12T14:13:42Z",
    "closed_at": "2012-03-12T14:13:42Z",
    "body": "The `svg` element (and possibly others) needs to be created with `createElementNS` and the appropriate namespace to render properly. Views that use `svg` need to override the `make` method to create elements using `document.createElementNS` rather than `document.createElement`. See http://stackoverflow.com/questions/9651167/svg-not-rendering-properly-as-a-backbone-view."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1077",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1077/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1077/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1077/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1077",
    "id": 3546764,
    "number": 1077,
    "title": "View as Router's constructor option",
    "user": {
      "login": "dnemoga",
      "id": 695040,
      "avatar_url": "https://avatars.githubusercontent.com/u/695040?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dnemoga",
      "html_url": "https://github.com/dnemoga",
      "followers_url": "https://api.github.com/users/dnemoga/followers",
      "following_url": "https://api.github.com/users/dnemoga/following{/other_user}",
      "gists_url": "https://api.github.com/users/dnemoga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dnemoga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dnemoga/subscriptions",
      "organizations_url": "https://api.github.com/users/dnemoga/orgs",
      "repos_url": "https://api.github.com/users/dnemoga/repos",
      "events_url": "https://api.github.com/users/dnemoga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dnemoga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-03-07T17:07:20Z",
    "updated_at": "2012-03-07T20:54:25Z",
    "closed_at": "2012-03-07T20:54:25Z",
    "body": "Hello, I want to propose use this declaration\r\n\r\n    new Backbone.Router({\r\n        view: new Backbone.View()\r\n    });\r\n\r\nwhich similar to\r\n\r\n    new Backbone.View({\r\n        collection: new Backbone.Collection()\r\n    });\r\n\r\nor\r\n\r\n    new Backbone.View({\r\n        model: new Backbone.Model()\r\n    });\r\n\r\nNow Router should have initialize() method which will assign view instance to property. It would be nice if view attribute for Router resolves as collection/model attribute for View."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1073",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1073/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1073/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1073/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1073",
    "id": 3534153,
    "number": 1073,
    "title": "Document local sync override ability",
    "user": {
      "login": "akavlie",
      "id": 306444,
      "avatar_url": "https://avatars.githubusercontent.com/u/306444?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akavlie",
      "html_url": "https://github.com/akavlie",
      "followers_url": "https://api.github.com/users/akavlie/followers",
      "following_url": "https://api.github.com/users/akavlie/following{/other_user}",
      "gists_url": "https://api.github.com/users/akavlie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akavlie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akavlie/subscriptions",
      "organizations_url": "https://api.github.com/users/akavlie/orgs",
      "repos_url": "https://api.github.com/users/akavlie/repos",
      "events_url": "https://api.github.com/users/akavlie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akavlie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2012-03-06T22:33:30Z",
    "updated_at": "2012-03-12T15:12:28Z",
    "closed_at": "2012-03-12T15:12:28Z",
    "body": "Backbone allows a per-model override of Backbone.sync; see Backbone.Model.fetch():\r\n\r\n`return (this.sync || Backbone.sync).call(this, 'read', this, options);`\r\n\r\nThe docs make no mention of this though."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1071",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1071/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1071/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1071/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/1071",
    "id": 3523885,
    "number": 1071,
    "title": "Documentation for set - validation is skipped when passing {silent: true}",
    "user": {
      "login": "dira",
      "id": 29137,
      "avatar_url": "https://avatars.githubusercontent.com/u/29137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dira",
      "html_url": "https://github.com/dira",
      "followers_url": "https://api.github.com/users/dira/followers",
      "following_url": "https://api.github.com/users/dira/following{/other_user}",
      "gists_url": "https://api.github.com/users/dira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dira/subscriptions",
      "organizations_url": "https://api.github.com/users/dira/orgs",
      "repos_url": "https://api.github.com/users/dira/repos",
      "events_url": "https://api.github.com/users/dira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dira/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-03-06T13:15:24Z",
    "updated_at": "2012-03-16T20:39:32Z",
    "closed_at": "2012-03-16T20:39:32Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/1071",
      "html_url": "https://github.com/jashkenas/backbone/pull/1071",
      "diff_url": "https://github.com/jashkenas/backbone/pull/1071.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/1071.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1062",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1062/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1062/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1062/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1062",
    "id": 3473979,
    "number": 1062,
    "title": "Missing useful things from SenchaTouch2",
    "user": {
      "login": "mgcrea",
      "id": 108273,
      "avatar_url": "https://avatars.githubusercontent.com/u/108273?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgcrea",
      "html_url": "https://github.com/mgcrea",
      "followers_url": "https://api.github.com/users/mgcrea/followers",
      "following_url": "https://api.github.com/users/mgcrea/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgcrea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgcrea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgcrea/subscriptions",
      "organizations_url": "https://api.github.com/users/mgcrea/orgs",
      "repos_url": "https://api.github.com/users/mgcrea/repos",
      "events_url": "https://api.github.com/users/mgcrea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgcrea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2012-03-02T09:17:27Z",
    "updated_at": "2012-03-13T00:56:22Z",
    "closed_at": "2012-03-12T15:34:56Z",
    "body": "Having worked on both Backbone & SenchaTouch 2.0 for a while, i would love to get a few things inside Backbone :\r\n\r\n* A powerful ClassManager :\r\n\r\n    http://docs.sencha.com/touch/2-0/#!/api/Ext-method-define\r\n\r\n    SenchaTouch gets clean and easy class definition (via a Ext.define() function), easy overriding, mixins (like normalized multiple inheritance), for instance, you can just call this.callParent() in Sencha while you have to do ugly things like : __super__.initialize.call(this); in backbone.\r\n\r\n    SenchaTouch classes also gets nice statics (http://docs.sencha.com/touch/2-0/#!/api/Ext.Base-static-method-addStatics) that are really useful.\r\n\r\n* A base Application object\r\n\r\n    http://docs.sencha.com/touch/2-0/#!/api/Ext.app.Application\r\n\r\n    Thant handles initialization of Stores (Collections) & Controllers. Having a global object to query classes & instanciated objects would be great : App.getStore(\"ContactList\"); App.getModelClass(\"Contact\").\r\n\r\nDo you intend to implement theses things?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1056",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1056/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1056/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1056/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1056",
    "id": 3422383,
    "number": 1056,
    "title": "Router.navigate could support pushState title changing property",
    "user": {
      "login": "lucasprim",
      "id": 98293,
      "avatar_url": "https://avatars.githubusercontent.com/u/98293?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucasprim",
      "html_url": "https://github.com/lucasprim",
      "followers_url": "https://api.github.com/users/lucasprim/followers",
      "following_url": "https://api.github.com/users/lucasprim/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucasprim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucasprim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucasprim/subscriptions",
      "organizations_url": "https://api.github.com/users/lucasprim/orgs",
      "repos_url": "https://api.github.com/users/lucasprim/repos",
      "events_url": "https://api.github.com/users/lucasprim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucasprim/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2012-02-28T17:25:19Z",
    "updated_at": "2014-09-02T12:38:11Z",
    "closed_at": "2012-02-28T17:31:57Z",
    "body": "Usually when i want to use pushState on my applications using backbone, i would like to change the page title as well as the page URL. It was a surprise when i found out that pushState actually supports a 'page title' attribute as declared on  http://dev.w3.org/html5/spec-author-view/history.html#history-0 \r\n\r\nNow i'm doing some workarounds by changing the title prior to the navigate method call but this feels awkward! it would be really nice if the router API supported title changing natively!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1026",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1026/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1026/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1026/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1026",
    "id": 3281935,
    "number": 1026,
    "title": "expose the extend function",
    "user": {
      "login": "alexurdea",
      "id": 519263,
      "avatar_url": "https://avatars.githubusercontent.com/u/519263?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexurdea",
      "html_url": "https://github.com/alexurdea",
      "followers_url": "https://api.github.com/users/alexurdea/followers",
      "following_url": "https://api.github.com/users/alexurdea/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexurdea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexurdea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexurdea/subscriptions",
      "organizations_url": "https://api.github.com/users/alexurdea/orgs",
      "repos_url": "https://api.github.com/users/alexurdea/repos",
      "events_url": "https://api.github.com/users/alexurdea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexurdea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-02-18T23:42:49Z",
    "updated_at": "2013-05-15T11:02:54Z",
    "closed_at": "2012-03-19T21:02:23Z",
    "body": "Using the extend function for custom \"classes\" could be useful. \r\n\r\nWould there be any harm in exposing it (to be accessed as Backbone.extend)? "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1020",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/1020/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1020/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/1020/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/1020",
    "id": 3264097,
    "number": 1020,
    "title": "underscore's throttle and debounce as options when declaring view events?",
    "user": {
      "login": "mreinstein",
      "id": 718067,
      "avatar_url": "https://avatars.githubusercontent.com/u/718067?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mreinstein",
      "html_url": "https://github.com/mreinstein",
      "followers_url": "https://api.github.com/users/mreinstein/followers",
      "following_url": "https://api.github.com/users/mreinstein/following{/other_user}",
      "gists_url": "https://api.github.com/users/mreinstein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mreinstein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mreinstein/subscriptions",
      "organizations_url": "https://api.github.com/users/mreinstein/orgs",
      "repos_url": "https://api.github.com/users/mreinstein/repos",
      "events_url": "https://api.github.com/users/mreinstein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mreinstein/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2012-02-17T07:47:43Z",
    "updated_at": "2012-02-18T06:46:28Z",
    "closed_at": "2012-02-17T18:18:35Z",
    "body": "I love underscore's throttle and debounce capabilities. I would also love to be able to automatically hook up the behaviors when declaring events in my Backbone views, rather than manually handling the plumbing for these events in my initialize function.\r\n\r\nI'm not sure exactly how the synax would look, maybe something like this:\r\n\r\nevents: {\r\n    'resize window throttle 300': 'window_resize_func' \r\n    'keydown #mytext debounce 500': 'reposition_elements_func'\r\n   .\r\n   .\r\n}\r\n\r\nMaybe there is a more elegant syntax to express this in, open for suggestions. I could see this being very handy for just about anyone that handles voluminous event types like mouse move, window resize, etc.\r\n\r\nI'm not sure if this has already been discussed so if I'm exhuming an old conversation my apologies.\r\n    "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/983",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/983/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/983/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/983/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/983",
    "id": 3164900,
    "number": 983,
    "title": "Idea: build in `initialize`, `render` and `remove` events",
    "user": {
      "login": "ianstormtaylor",
      "id": 311752,
      "avatar_url": "https://avatars.githubusercontent.com/u/311752?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianstormtaylor",
      "html_url": "https://github.com/ianstormtaylor",
      "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
      "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
      "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
      "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
      "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2012-02-09T22:41:00Z",
    "updated_at": "2012-02-09T22:43:12Z",
    "closed_at": "2012-02-09T22:43:12Z",
    "body": "I think it would be nice to add `trigger('initialize')` right after the initialize call in Backbone.View constructor. This would make it easy to respond to the initialization, eg I could do something like this:\r\n\r\n```\r\nonInitialize : function () {\r\n\r\n    if (this.options.el !== undefined) {\r\n\r\n        this.render();\r\n    }\r\n},\r\n```\r\n\r\nAnd make it much easier for other views to listen and react after the view has been initialized. Along the same line of thought, the default `render` and `remove` functions could `return this.trigger('render')` and `return this.trigger('remove')` as well.\r\n\r\nJust a thought, curious as to whether there are reasons not to do this.\r\n\r\nCheers"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/961",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/961/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/961/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/961/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/961",
    "id": 3100982,
    "number": 961,
    "title": "Add this.dollar for $(this.el) to Backbone.View",
    "user": {
      "login": "kenn",
      "id": 10350,
      "avatar_url": "https://avatars.githubusercontent.com/u/10350?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kenn",
      "html_url": "https://github.com/kenn",
      "followers_url": "https://api.github.com/users/kenn/followers",
      "following_url": "https://api.github.com/users/kenn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kenn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kenn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kenn/subscriptions",
      "organizations_url": "https://api.github.com/users/kenn/orgs",
      "repos_url": "https://api.github.com/users/kenn/repos",
      "events_url": "https://api.github.com/users/kenn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kenn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-02-05T19:16:30Z",
    "updated_at": "2012-02-05T19:39:33Z",
    "closed_at": "2012-02-05T19:39:33Z",
    "body": "More often than not, I find myself needing `$(this.el)`, particularly when the view has multiple instances and has to operate on a DOM.\r\n\r\n```\r\nclass SomeView extends Backbone.View\r\n  initialize: ->\r\n    @dollar = $(@el)\r\n\r\nviews[0] = new SomeView\r\nviews[1] = new SomeView\r\n\r\nview[0].dollar.addClass('active')\r\n```\r\n\r\nWould adding this to `Backbone.View` itself be a bad idea?\r\n\r\nI also think caching the jQuery/Zepto object in this manner could help making faster apps."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/951",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/951/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/951/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/951/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/951",
    "id": 3088165,
    "number": 951,
    "title": "Reverse lookup of Router routes? (\"urlFor\")",
    "user": {
      "login": "foca",
      "id": 437,
      "avatar_url": "https://avatars.githubusercontent.com/u/437?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/foca",
      "html_url": "https://github.com/foca",
      "followers_url": "https://api.github.com/users/foca/followers",
      "following_url": "https://api.github.com/users/foca/following{/other_user}",
      "gists_url": "https://api.github.com/users/foca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/foca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/foca/subscriptions",
      "organizations_url": "https://api.github.com/users/foca/orgs",
      "repos_url": "https://api.github.com/users/foca/repos",
      "events_url": "https://api.github.com/users/foca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/foca/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2012-02-03T20:11:41Z",
    "updated_at": "2012-02-08T22:26:24Z",
    "closed_at": "2012-02-08T22:26:24Z",
    "body": "As a bit of introduction, I generate a lot of views with javascript, and I'm forced to write URLs in my handlebars templates that I would rather not have there. For this, it's important for me to ask the app \"what's the URL for viewing this thing\", so I hacked up this function in my Router:\r\n\r\n``` javascript\r\nurlFor: function(route) {\r\n    function wrapArray(obj) { return _.isArray(obj) ? obj : Array(obj) };\r\n\r\n    var params = 2 <= arguments.length ? Array.prototype.slice.call(arguments, 1) : [];\r\n\r\n    var path = _.detect(_.keys(this.routes), function(key) {\r\n        return this.routes[key] === route;\r\n    }, this);\r\n\r\n    var param;\r\n    for (var i = 0, len = params.length; i < len; i++) {\r\n        if (_.isArray(params[i]))\r\n            param = _.map(params[i], encodeURIComponent).join(\"/\");\r\n        else\r\n            param = encodeURIComponent(params[i]);\r\n\r\n        path = path.replace(/(?:\\:|\\*)[^\\/]+/, param);\r\n    }\r\n\r\n    return path;\r\n}\r\n```\r\n\r\nThat is a very contrived implementation that suits my application (it has no error handling, for example :)), but if there's interest in having something like this in Backbone proper I can work on a real patch with tests."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/938",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/938/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/938/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/938/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/938",
    "id": 3074081,
    "number": 938,
    "title": "Can't use DOM manipulation library not defined on window.",
    "user": {
      "login": "jsanders",
      "id": 38320,
      "avatar_url": "https://avatars.githubusercontent.com/u/38320?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsanders",
      "html_url": "https://github.com/jsanders",
      "followers_url": "https://api.github.com/users/jsanders/followers",
      "following_url": "https://api.github.com/users/jsanders/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsanders/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsanders/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsanders/subscriptions",
      "organizations_url": "https://api.github.com/users/jsanders/orgs",
      "repos_url": "https://api.github.com/users/jsanders/repos",
      "events_url": "https://api.github.com/users/jsanders/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsanders/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 10,
    "created_at": "2012-02-02T20:45:20Z",
    "updated_at": "2012-02-02T22:42:56Z",
    "closed_at": "2012-02-02T20:49:53Z",
    "body": "It would be convenient to be able to use Backbone with multiple versions of jQuery or other libraries that are used for DOM manipulation. Currently Backbone only supports libraries defined as window.{jQuery, Zepto, ember, $} at time that backbone.js is loaded, with no ability to explicitly override the library used at runtime."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/889",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/889/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/889/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/889/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/889",
    "id": 2957279,
    "number": 889,
    "title": "Enhance the way we reference a view's sub-element",
    "user": {
      "login": "gschammah",
      "id": 591992,
      "avatar_url": "https://avatars.githubusercontent.com/u/591992?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gschammah",
      "html_url": "https://github.com/gschammah",
      "followers_url": "https://api.github.com/users/gschammah/followers",
      "following_url": "https://api.github.com/users/gschammah/following{/other_user}",
      "gists_url": "https://api.github.com/users/gschammah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gschammah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gschammah/subscriptions",
      "organizations_url": "https://api.github.com/users/gschammah/orgs",
      "repos_url": "https://api.github.com/users/gschammah/repos",
      "events_url": "https://api.github.com/users/gschammah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gschammah/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2012-01-24T21:37:00Z",
    "updated_at": "2012-01-25T15:26:21Z",
    "closed_at": "2012-01-25T15:26:21Z",
    "body": "This is just a proposal for a common situation I am while working in a backbone project. \r\n\r\nIt is common for me to access my views' sub-elements many times. Here I put a simple example:\r\n\r\n```javascript\r\nvar myView = Backbone.View.extend({\r\n  el: '#myDiv',\r\n\r\n  hideButton: function() {\r\n    this.$('#myButton').hide();\r\n  },\r\n\r\n  showButton: function() {\r\n    this.$('#myButton').show();    \r\n  }\r\n});\r\n```\r\n\r\nThis works fine, but if the button id changes in the future, then I have to change that id in to places in my view (a real project will demand even more changes). So what I always end up doing is something like this:\r\n\r\n```javascript\r\nvar myView = Backbone.View.extend({\r\n  el: '#myDiv',\r\n\r\n  _initialize_elements: function() {\r\n     this.elements = {\r\n        myButton: this.$('#myButton')\r\n     };\r\n  },\r\n\r\n  initialize: function() {\r\n    this._initialize_elements();\r\n  },\r\n\r\n  hideButton: function() {\r\n    this.elements.myButton.hide();\r\n  },\r\n\r\n  showButton: function() {\r\n    this.elements.myButton.show();    \r\n  }\r\n});\r\n```\r\n\r\nFor me this approach is fine, but I don't like to manually initialize every view every single time to store the jQuery reference to each of my view's sub-elements, and also is very easy to forget to do it.\r\n\r\nI think the best approach would be for a Backbone view to have an `elements` object that works in a similar way than the `events` object.\r\n\r\nE.g.:\r\n\r\n```javascript\r\nvar myView = Backbone.View.extend({\r\n  el: '#myDiv',\r\n\r\n  elements: {\r\n    myButton : '#myButton'\r\n  },\r\n\r\n  hideButton: function() {\r\n    this.elements.myButton.hide();\r\n  },\r\n\r\n  showButton: function() {\r\n    this.elements.myButton.show();    \r\n  }\r\n});\r\n```\r\n\r\nThen, before the `delegateEvents` function is called in Backbone.View constructor, we can replace the value of each `elements` key a jQuery object. I will request for a pull request soon. I would love to hear your comments. \r\n\r\n(Please note that this would be useful just in the cases where the HTML elements existed before the view instantiation)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/877",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/877/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/877/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/877/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/877",
    "id": 2900994,
    "number": 877,
    "title": "Create Backbone views with jQuery syntax",
    "user": {
      "login": "meleyal",
      "id": 15045,
      "avatar_url": "https://avatars.githubusercontent.com/u/15045?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meleyal",
      "html_url": "https://github.com/meleyal",
      "followers_url": "https://api.github.com/users/meleyal/followers",
      "following_url": "https://api.github.com/users/meleyal/following{/other_user}",
      "gists_url": "https://api.github.com/users/meleyal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meleyal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meleyal/subscriptions",
      "organizations_url": "https://api.github.com/users/meleyal/orgs",
      "repos_url": "https://api.github.com/users/meleyal/repos",
      "events_url": "https://api.github.com/users/meleyal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meleyal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2012-01-19T17:57:19Z",
    "updated_at": "2012-02-11T18:15:01Z",
    "closed_at": "2012-02-08T22:06:43Z",
    "body": "The following snippet lets you create Backbone views with jQuery syntax e.g. `$('.slideshow').slideshow(options)`\r\n\r\nCould something like this be rolled in to Backbone?\r\n\r\n### Example (coffeescript):\r\n\r\n```coffeescript\r\n\r\nclass window.Slideshow extends Backbone.View\r\n  \r\n  initialize: (options) ->\r\n    console.log 'Slideshow#initialize'\r\n    console.log $(@el)\r\n\r\n##\r\n# Plugin definition\r\n# \r\n\r\n$.fn.slideshow = (options) ->\r\n  options ||= {}\r\n  slideshow = @data('slideshow')\r\n  if (!slideshow)\r\n    @each (idx, el) ->\r\n      options.el = el\r\n      $(el).data('slideshow', new Slideshow(options))\r\n  \r\n````\r\n\r\nGist: https://gist.github.com/1641439"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/826",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/826/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/826/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/826/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/826",
    "id": 2675890,
    "number": 826,
    "title": "Make wrapError public and overridable",
    "user": {
      "login": "tribalvibes",
      "id": 167275,
      "avatar_url": "https://avatars.githubusercontent.com/u/167275?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tribalvibes",
      "html_url": "https://github.com/tribalvibes",
      "followers_url": "https://api.github.com/users/tribalvibes/followers",
      "following_url": "https://api.github.com/users/tribalvibes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tribalvibes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tribalvibes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tribalvibes/subscriptions",
      "organizations_url": "https://api.github.com/users/tribalvibes/orgs",
      "repos_url": "https://api.github.com/users/tribalvibes/repos",
      "events_url": "https://api.github.com/users/tribalvibes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tribalvibes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-12-28T23:30:16Z",
    "updated_at": "2012-01-12T21:06:56Z",
    "closed_at": "2012-01-12T21:05:56Z",
    "body": "Unfortunately `wrapError` is a private method. It should instead be an overridable method e.g. on `Model.prototype` or `Backbone.wrapError`. This is an important bottleneck and should be part of the public API. This also addresses #690, #386 and #437. @jashkenas in #437 says \"why not override `sync`?\" Rather, the correct question is why should we have to override `sync` and have an extra level of wrapping for the error handler when we just want to override `wrapError`?   Really, let's address common issues rather than simply closing them with a perfunctory remark."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/803",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/803/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/803/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/803/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/803",
    "id": 2614808,
    "number": 803,
    "title": "PushState Router unnecessarily breaks hash fragment links",
    "user": {
      "login": "micheljansen",
      "id": 19603,
      "avatar_url": "https://avatars.githubusercontent.com/u/19603?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micheljansen",
      "html_url": "https://github.com/micheljansen",
      "followers_url": "https://api.github.com/users/micheljansen/followers",
      "following_url": "https://api.github.com/users/micheljansen/following{/other_user}",
      "gists_url": "https://api.github.com/users/micheljansen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micheljansen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micheljansen/subscriptions",
      "organizations_url": "https://api.github.com/users/micheljansen/orgs",
      "repos_url": "https://api.github.com/users/micheljansen/repos",
      "events_url": "https://api.github.com/users/micheljansen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micheljansen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2011-12-20T16:38:25Z",
    "updated_at": "2012-03-16T00:21:21Z",
    "closed_at": "2012-01-12T22:44:46Z",
    "body": "Although I understand the history behind the Backbone Router, and I am sure there are scenarios where it is desirable to automatically fall back to hash fragment based URLs when there is no HTML5 PushState support, the current implementation is unexpected and inconsistent with how a normal web app is supposed to behave.\r\n\r\nI am using Backbone.js to progressively enhance a page. In its current form, everything is 100% functional without any JavaScript. The purpose of the Backbone Router in this is to reroute certain actions to AJAX requests rather than page transitions. I am fine with only targeting modern browsers with PushState support (old browsers will just load the page without AJAX, it's a mobile app anyway). However, there are several hash-based fragment links in the page.\r\n\r\nA good example is a link to #top at the bottom of a list of search results. Without Backbone in charge of the browser history, this works fine, but as soon as we turn on the Backbone Router things fall apart in subtle ways. The link to top still works (not triggering a route called \"top\" or \"#top\" in the Router, by the way), and now the \"http://my-path.tld/#top\". If I refresh the page like this, the Router reinterprets this to \"http://my-path.tld/top\" (this time it *does* trigger a route called \"top\"), which brings the app in an inconsistent state. There is no http://my-path.tld/top/ so if the user refreshes the page, bookmarks this URL or sends it to a friend, it results in a 404 error.\r\n\r\nI read the comments on https://github.com/documentcloud/backbone/issues/418 as a kind of \"you're holding it wrong\"-response. I do not believe this is the case. If the Backbone Router operates on real URLs, they should be consistent with the way they are supposed to work without JavaScript and as they are now they don't.\r\n\r\nThere are probably several solutions to this, but the easiest one would be to allow developers to opt in/out of PushState and hashchange separately and not redirect /#top to /top by default."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/794",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/794/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/794/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/794/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/794",
    "id": 2586996,
    "number": 794,
    "title": "bindToModel View property",
    "user": {
      "login": "RStankov",
      "id": 9867,
      "avatar_url": "https://avatars.githubusercontent.com/u/9867?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RStankov",
      "html_url": "https://github.com/RStankov",
      "followers_url": "https://api.github.com/users/RStankov/followers",
      "following_url": "https://api.github.com/users/RStankov/following{/other_user}",
      "gists_url": "https://api.github.com/users/RStankov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RStankov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RStankov/subscriptions",
      "organizations_url": "https://api.github.com/users/RStankov/orgs",
      "repos_url": "https://api.github.com/users/RStankov/repos",
      "events_url": "https://api.github.com/users/RStankov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RStankov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-12-17T01:37:01Z",
    "updated_at": "2011-12-19T15:41:10Z",
    "closed_at": "2011-12-19T15:28:14Z",
    "body": "I have very often this pattern in some form: \r\n\r\n\r\n    SomeView = Backbone.View.extend({\r\n      initialize: function() {\r\n        this.model.bind('some:event:1', this.someAction1, this);\r\n        this.model.bind('some:event:2', this.someAction2, this);\r\n        \r\n        this.collection.bind('some:event:3', this.someAction3, this);\r\n        this.collection.bind('some:event:4', this.someAction4, this);\r\n      },\r\n      // onClose is called when view.remove()\r\n      remove: function() {\r\n        this.model.unbind('some:event:1', this.someAction1);\r\n        this.model.unbind('some:event:2', this.someAction2);\r\n        \r\n        this.collection.unbind('some:event:3', this.someAction3);\r\n        this.collection.unbind('some:event:4', this.someAction4);\r\n        \r\n        Backbone.View.prototype.remove.call(this);\r\n      }\r\n    });\r\n    \r\nAnd I think it will be really great to make this just:\r\n\r\n  \r\n    SomeView = Backbone.View.extend({\r\n      bindToModel: {\r\n        'some:event:1': 'someAction1',\r\n        'some:event:2': 'someAction2'\r\n      },\r\n      bindToCollection: {\r\n        'some:event:3': 'someAction3',\r\n        'some:event:4': 'someAction4'\r\n      }\r\n    });\r\n    \r\n\r\nThe two special attributes ```bindToModel``` and ```bindToCollection``` will bind the events, and when ```view.remove()``` is called all events will be unbind before dom removal. I think this will save a lot of code (and bugs related to model event binding/unbinding). This will also make Backbone even more awesome :)\r\n\r\nIf you agree on having such API I'll be happy to provide an implementation, since I have several minor prototypes of this."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/729",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/729/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/729/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/729/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/729",
    "id": 2173982,
    "number": 729,
    "title": "Inclusion of a context parameter to unbind method",
    "user": {
      "login": "krange",
      "id": 189278,
      "avatar_url": "https://avatars.githubusercontent.com/u/189278?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/krange",
      "html_url": "https://github.com/krange",
      "followers_url": "https://api.github.com/users/krange/followers",
      "following_url": "https://api.github.com/users/krange/following{/other_user}",
      "gists_url": "https://api.github.com/users/krange/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/krange/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/krange/subscriptions",
      "organizations_url": "https://api.github.com/users/krange/orgs",
      "repos_url": "https://api.github.com/users/krange/repos",
      "events_url": "https://api.github.com/users/krange/events{/privacy}",
      "received_events_url": "https://api.github.com/users/krange/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/bug",
        "name": "bug",
        "color": "ff0000"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2011-11-08T13:05:29Z",
    "updated_at": "2012-01-31T09:20:09Z",
    "closed_at": "2012-01-12T23:27:29Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/729",
      "html_url": "https://github.com/jashkenas/backbone/pull/729",
      "diff_url": "https://github.com/jashkenas/backbone/pull/729.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/729.patch"
    },
    "body": "Update to unbind method to allow a context parameter. This fixes an issue where bindings aren't removed correctly where 2 instances of the same class listening to the a single instances' trigger event. When unbinding from the second instance, unbind method actually unbinds the first registered instance. Example of the error below:\r\n\r\n```\r\nvar DispatchModel = Backbone.Model.extend({\r\n});\r\n\r\nvar RespondModel = Backbone.Model.extend({\r\n  defaults: {\r\n    dispatchModel: undefined\r\n  },\r\n  \r\n  initialize: function () {\r\n    var dispatchModel = this.get('dispatchModel');\r\n    dispatchModel.bind('change', this._onDispatchChange, this);\r\n  },\r\n  \r\n  dispose: function () {\r\n     var dispatchModel = this.get('dispatchModel');\r\n     dispatchModel.unbind('change', this._onDispatchChange);\r\n  },\r\n  \r\n  _onDispatchChange: function () {\r\n  }\r\n});\r\n\r\nvar respond1Model, respond2Model, dispatchModel;\r\ndispatchModel = new DispatchModel();\r\nrespond1Model = new RespondModel({dispatchModel: dispatchModel});\r\nrespond2Model = new RespondModel({dispatchModel: dispatchModel});\r\n\r\nrespond2Model.dispose();\r\nconsole.log(dispatchModel._callbacks);\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/727",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/727/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/727/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/727/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/727",
    "id": 2170817,
    "number": 727,
    "title": "view.el factory/selector function",
    "user": {
      "login": "ferbs",
      "id": 45411,
      "avatar_url": "https://avatars.githubusercontent.com/u/45411?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ferbs",
      "html_url": "https://github.com/ferbs",
      "followers_url": "https://api.github.com/users/ferbs/followers",
      "following_url": "https://api.github.com/users/ferbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/ferbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ferbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ferbs/subscriptions",
      "organizations_url": "https://api.github.com/users/ferbs/orgs",
      "repos_url": "https://api.github.com/users/ferbs/repos",
      "events_url": "https://api.github.com/users/ferbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ferbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2011-11-08T04:02:05Z",
    "updated_at": "2012-01-12T23:31:13Z",
    "closed_at": "2012-01-12T23:31:13Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/727",
      "html_url": "https://github.com/jashkenas/backbone/pull/727",
      "diff_url": "https://github.com/jashkenas/backbone/pull/727.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/727.patch"
    },
    "body": "A view.el function that returns a DOM element is useful for bundling templating code or advanced selectors within the View directly.\r\n\r\n\"You may assign el directly if the view is being created for an element that already exists in the DOM. Use either a reference to a real DOM element, a function that returns a DOM element, or a css selector string.\"\r\n\r\nTests included. I can go deeper and update the documentation if you think you'll pick up this pull request."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/726",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/726/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/726/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/726/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/726",
    "id": 2157019,
    "number": 726,
    "title": "Fix for bug #172",
    "user": {
      "login": "alertedsnake",
      "id": 753466,
      "avatar_url": "https://avatars.githubusercontent.com/u/753466?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alertedsnake",
      "html_url": "https://github.com/alertedsnake",
      "followers_url": "https://api.github.com/users/alertedsnake/followers",
      "following_url": "https://api.github.com/users/alertedsnake/following{/other_user}",
      "gists_url": "https://api.github.com/users/alertedsnake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alertedsnake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alertedsnake/subscriptions",
      "organizations_url": "https://api.github.com/users/alertedsnake/orgs",
      "repos_url": "https://api.github.com/users/alertedsnake/repos",
      "events_url": "https://api.github.com/users/alertedsnake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alertedsnake/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-11-06T17:37:01Z",
    "updated_at": "2011-11-07T15:28:12Z",
    "closed_at": "2011-11-07T14:48:40Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/726",
      "html_url": "https://github.com/jashkenas/backbone/pull/726",
      "diff_url": "https://github.com/jashkenas/backbone/pull/726.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/726.patch"
    },
    "body": "Looks like this works for me."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/723",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/723/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/723/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/723/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/723",
    "id": 2152577,
    "number": 723,
    "title": "(un)bind does not alter callback list during trigger",
    "user": {
      "login": "braddunbar",
      "id": 11674,
      "avatar_url": "https://avatars.githubusercontent.com/u/11674?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/braddunbar",
      "html_url": "https://github.com/braddunbar",
      "followers_url": "https://api.github.com/users/braddunbar/followers",
      "following_url": "https://api.github.com/users/braddunbar/following{/other_user}",
      "gists_url": "https://api.github.com/users/braddunbar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/braddunbar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/braddunbar/subscriptions",
      "organizations_url": "https://api.github.com/users/braddunbar/orgs",
      "repos_url": "https://api.github.com/users/braddunbar/repos",
      "events_url": "https://api.github.com/users/braddunbar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/braddunbar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-11-05T16:28:19Z",
    "updated_at": "2012-01-13T16:17:31Z",
    "closed_at": "2012-01-13T16:03:04Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/723",
      "html_url": "https://github.com/jashkenas/backbone/pull/723",
      "diff_url": "https://github.com/jashkenas/backbone/pull/723.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/723.patch"
    },
    "body": "After a [comment](https://github.com/documentcloud/backbone/pull/624#issuecomment-2616598) from @kmalakoff in #624, I started thinking about the behavior of events being bound or unbound during a call to trigger and how Backbone's implementation is different than jQuery's.\r\n\r\njQuery appears to freeze the callback list when the event is fired:\r\n\r\n    $({}).bind('event', function(){\r\n      $(this).bind('event', handler);\r\n    })\r\n    .trigger('event') // doesn't call handler\r\n    .unbind()\r\n    .bind('event', function(){\r\n      $(this).unbind('event', handler);\r\n    })\r\n    .bind('event', handler)\r\n    .trigger('event');  // calls handler\r\n\r\nBackbone, on the other hand, alters the callback list during trigger:\r\n\r\n    model.bind('event', function(){\r\n      model.bind('event', handler);\r\n    })\r\n    .trigger('event') // calls handler\r\n    .unbind()\r\n    .bind('event', function(){\r\n      model.unbind('event', handler);\r\n    })\r\n    .bind('event', handler)\r\n    .trigger('event');  // doesn't call handler\r\n\r\nI'm not sure which way is correct, but I think that freezing the callback list is simpler and more intuitive.  By sharing data between multiple versions of a callback list, we can achieve this while [preserving performance characteristics](http://jsperf.com/backbone-events-linked-list/5)."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/720",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/720/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/720/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/720/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/720",
    "id": 2144801,
    "number": 720,
    "title": "initialize versus constructor",
    "user": {
      "login": "taybin",
      "id": 58964,
      "avatar_url": "https://avatars.githubusercontent.com/u/58964?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taybin",
      "html_url": "https://github.com/taybin",
      "followers_url": "https://api.github.com/users/taybin/followers",
      "following_url": "https://api.github.com/users/taybin/following{/other_user}",
      "gists_url": "https://api.github.com/users/taybin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taybin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taybin/subscriptions",
      "organizations_url": "https://api.github.com/users/taybin/orgs",
      "repos_url": "https://api.github.com/users/taybin/repos",
      "events_url": "https://api.github.com/users/taybin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taybin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/jashkenas/backbone/milestones/5",
      "labels_url": "https://api.github.com/repos/jashkenas/backbone/milestones/5/labels",
      "id": 52782,
      "number": 5,
      "title": "Documentation",
      "description": "Create more meaningful and accurate documentation.",
      "creator": {
        "login": "tbranyen",
        "id": 181635,
        "avatar_url": "https://avatars.githubusercontent.com/u/181635?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tbranyen",
        "html_url": "https://github.com/tbranyen",
        "followers_url": "https://api.github.com/users/tbranyen/followers",
        "following_url": "https://api.github.com/users/tbranyen/following{/other_user}",
        "gists_url": "https://api.github.com/users/tbranyen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tbranyen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tbranyen/subscriptions",
        "organizations_url": "https://api.github.com/users/tbranyen/orgs",
        "repos_url": "https://api.github.com/users/tbranyen/repos",
        "events_url": "https://api.github.com/users/tbranyen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tbranyen/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 1,
      "state": "closed",
      "created_at": "2011-11-04T16:40:06Z",
      "updated_at": "2012-01-13T16:14:08Z",
      "due_on": null,
      "closed_at": "2012-01-13T16:14:08Z"
    },
    "comments": 5,
    "created_at": "2011-11-04T15:19:26Z",
    "updated_at": "2014-05-07T14:39:31Z",
    "closed_at": "2012-01-13T16:14:08Z",
    "body": "When would I want to use initialize() and when would I want to use constructor()? The documentation make it look like they are synonyms, but the source shows they handled differently."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/716",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/716/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/716/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/716/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/716",
    "id": 2138225,
    "number": 716,
    "title": "Allow Model.set/save(key, value) with mixed argument format",
    "user": {
      "login": "hx",
      "id": 692853,
      "avatar_url": "https://avatars.githubusercontent.com/u/692853?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hx",
      "html_url": "https://github.com/hx",
      "followers_url": "https://api.github.com/users/hx/followers",
      "following_url": "https://api.github.com/users/hx/following{/other_user}",
      "gists_url": "https://api.github.com/users/hx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hx/subscriptions",
      "organizations_url": "https://api.github.com/users/hx/orgs",
      "repos_url": "https://api.github.com/users/hx/repos",
      "events_url": "https://api.github.com/users/hx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hx/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2011-11-03T22:07:34Z",
    "updated_at": "2012-01-13T16:17:18Z",
    "closed_at": "2012-01-13T16:17:18Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/716",
      "html_url": "https://github.com/jashkenas/backbone/pull/716",
      "diff_url": "https://github.com/jashkenas/backbone/pull/716.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/716.patch"
    },
    "body": "This is an alternative to #570.\r\n\r\nThis modification allows you to use `Model.set` or `Model.save` the regular way, with one or more inline key/value pairs, or a mix of both.\r\n\r\nThis is a reasonably in-demand addition and @jashkenas has indicated it will be done eventually, so I've tried to implement it in a clean, flexible manner so we can finally see it merged in.\r\n\r\nThis mod will allow any of the following:\r\n\r\n    model.set('my-key', value);\r\n    model.set('my-key', value, 'another-key', anotherValue); // ad infinitum\r\n    model.set('my-key', value, {options: silent});\r\n    model.set('my-key', value, 'another-key', anotherValue, {anotherKey: anotherValue}, {moreKeys: moreValues}, {options: silent}); // ad infinitum\r\n\r\nAfter inline key/value pairs are processed, the last argument is assumed to be `options`, so the last version (mixing inline with bundled) will only work if options are included. While clumsy, this will also work:\r\n\r\n    model.set('my-key', value, {anotherKey: anotherValue}, null);\r\n\r\nI added a helper function to minimize repetition between `set()` and `save()`. I've tested it thoroughly with lots of combinations and data types. Null and undefined values, blank keys etc all work fine.\r\n\r\nTo those involved in #570, I mean no disrespect to you or your work! There's nothing wrong with it. Like you guys, I'm keen to see this feature merged into the master, and hopefully this version gets passed QC nice and quick :)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/710",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/710/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/710/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/710/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/710",
    "id": 2118821,
    "number": 710,
    "title": "Unified registration as browser/AMD/CommonJS module.",
    "user": {
      "login": "jrburke",
      "id": 73359,
      "avatar_url": "https://avatars.githubusercontent.com/u/73359?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrburke",
      "html_url": "https://github.com/jrburke",
      "followers_url": "https://api.github.com/users/jrburke/followers",
      "following_url": "https://api.github.com/users/jrburke/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrburke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrburke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrburke/subscriptions",
      "organizations_url": "https://api.github.com/users/jrburke/orgs",
      "repos_url": "https://api.github.com/users/jrburke/repos",
      "events_url": "https://api.github.com/users/jrburke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrburke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 60,
    "created_at": "2011-11-02T07:31:09Z",
    "updated_at": "2014-05-05T01:43:47Z",
    "closed_at": "2012-01-11T20:23:07Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/710",
      "html_url": "https://github.com/jashkenas/backbone/pull/710",
      "diff_url": "https://github.com/jashkenas/backbone/pull/710.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/710.patch"
    },
    "body": "This is an improvement over the #688 based on feedback from @tbranyen and @jdalton. It is a much simpler registration approach.\r\n\r\nOne of the simplifications over #688 was to not to try to load jquery in a node/commonjs environment since the current Backbone code does not do that.\r\n\r\nThis pull request supersedes #688, I will close 688."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/706",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/706/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/706/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/706/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/706",
    "id": 2092125,
    "number": 706,
    "title": "New Website",
    "user": {
      "login": "boazsender",
      "id": 122117,
      "avatar_url": "https://avatars.githubusercontent.com/u/122117?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boazsender",
      "html_url": "https://github.com/boazsender",
      "followers_url": "https://api.github.com/users/boazsender/followers",
      "following_url": "https://api.github.com/users/boazsender/following{/other_user}",
      "gists_url": "https://api.github.com/users/boazsender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boazsender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boazsender/subscriptions",
      "organizations_url": "https://api.github.com/users/boazsender/orgs",
      "repos_url": "https://api.github.com/users/boazsender/repos",
      "events_url": "https://api.github.com/users/boazsender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boazsender/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2011-10-30T20:48:04Z",
    "updated_at": "2012-01-06T16:35:48Z",
    "closed_at": "2012-01-06T16:35:48Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/706",
      "html_url": "https://github.com/jashkenas/backbone/pull/706",
      "diff_url": "https://github.com/jashkenas/backbone/pull/706.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/706.patch"
    },
    "body": "This fork has the new website in it, along with a few new items added to the .gitignore.\r\n\r\nIn this fork, gh-pages branch no longer mirrors the master branch.\r\n\r\nThe master repo could however mirror the _site directory generated by jekyll (github pages uses jekyll).\r\n\r\nAll the pages for this website can still run offline like the old website, but they need to be jekyll'd first.\r\n\r\nThe convention is to .gitignore _site, but I have not done so in this case so you can see what _site generates: https://github.com/boazsender/backbone/tree/gh-pages/_site\r\n\r\nIn order to merge in these changes and not cause inconsistencies between the docs in master and the docs in gh-pages, I recommend copying the contents of _site to master."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/702",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/702/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/702/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/702/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/702",
    "id": 2088676,
    "number": 702,
    "title": "New underscore method 'initial' missing",
    "user": {
      "login": "plievone",
      "id": 134936,
      "avatar_url": "https://avatars.githubusercontent.com/u/134936?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plievone",
      "html_url": "https://github.com/plievone",
      "followers_url": "https://api.github.com/users/plievone/followers",
      "following_url": "https://api.github.com/users/plievone/following{/other_user}",
      "gists_url": "https://api.github.com/users/plievone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plievone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plievone/subscriptions",
      "organizations_url": "https://api.github.com/users/plievone/orgs",
      "repos_url": "https://api.github.com/users/plievone/repos",
      "events_url": "https://api.github.com/users/plievone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plievone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-10-29T22:24:42Z",
    "updated_at": "2012-01-13T18:30:53Z",
    "closed_at": "2012-01-13T18:30:53Z",
    "body": "Current underscore methods on Backbone.Collection are:\r\n\r\n    var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find', 'detect',\r\n        'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include',\r\n        'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex', 'toArray', 'size',\r\n        'first', 'rest', 'last', 'without', 'indexOf', 'lastIndexOf', 'isEmpty', 'groupBy'];\r\n\r\n`Initial` seems to be missing unintentionally, perhaps other omissions such as suffle, compact, flatten, uniq, union, intersection, difference, zip are intentional considering the use cases of collections.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/692",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/692/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/692/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/692/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/692",
    "id": 2070568,
    "number": 692,
    "title": "Added namespaced relationships",
    "user": {
      "login": "masylum",
      "id": 28248,
      "avatar_url": "https://avatars.githubusercontent.com/u/28248?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/masylum",
      "html_url": "https://github.com/masylum",
      "followers_url": "https://api.github.com/users/masylum/followers",
      "following_url": "https://api.github.com/users/masylum/following{/other_user}",
      "gists_url": "https://api.github.com/users/masylum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/masylum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/masylum/subscriptions",
      "organizations_url": "https://api.github.com/users/masylum/orgs",
      "repos_url": "https://api.github.com/users/masylum/repos",
      "events_url": "https://api.github.com/users/masylum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/masylum/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-10-27T17:36:55Z",
    "updated_at": "2011-10-29T15:51:10Z",
    "closed_at": "2011-10-29T15:51:10Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/692",
      "html_url": "https://github.com/jashkenas/backbone/pull/692",
      "diff_url": "https://github.com/jashkenas/backbone/pull/692.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/692.patch"
    },
    "body": "One of the missing features of backbone is relationships between models and collections.\r\n\r\nWe are now just attaching this relationships on top of the models but I think it would be amazing to have them namespaced.\r\n\r\nYou can see an usage example on the tests I added."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/688",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/688/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/688/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/688/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/688",
    "id": 2050158,
    "number": 688,
    "title": "Add AMD registration as an option.",
    "user": {
      "login": "jrburke",
      "id": 73359,
      "avatar_url": "https://avatars.githubusercontent.com/u/73359?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrburke",
      "html_url": "https://github.com/jrburke",
      "followers_url": "https://api.github.com/users/jrburke/followers",
      "following_url": "https://api.github.com/users/jrburke/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrburke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrburke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrburke/subscriptions",
      "organizations_url": "https://api.github.com/users/jrburke/orgs",
      "repos_url": "https://api.github.com/users/jrburke/repos",
      "events_url": "https://api.github.com/users/jrburke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrburke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-10-25T21:29:45Z",
    "updated_at": "2011-11-02T07:32:01Z",
    "closed_at": "2011-11-02T07:32:00Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/688",
      "html_url": "https://github.com/jashkenas/backbone/pull/688",
      "diff_url": "https://github.com/jashkenas/backbone/pull/688.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/688.patch"
    },
    "body": "Uses a common factory function with adapters for CommonJS and default browser env to register appropriately based on the environment.\r\n\r\nI placed the define() call on the same line as the function(define) { so that a level of indent in the backbone.js code would trigger a noisy diff. However, I can place it on its own line and do an indent of the code if that is preferred.\r\n\r\nI also have an [optamd-withtest branch](https://github.com/jrburke/backbone/tree/optamd-withtest) that has a test-requirejs.html file showing it working with an AMD loader. I also tested the code in Node, doing a simple test with a Backbone.Model. I did not commit that Node test since it was just a simple code check.\r\n\r\nBackbone probably does not want the test page, so I just put the core registration changes in this pull request branch. However I have no problem merging in the test page if that is preferred. The test uses underscore 1.2.1 and jQuery 1.7rc1, which both call define() to register as AMD modules.\r\n\r\nRelated to Issue #684, where it highlights the usefulness of this patch. Also see the [similar ticket for underscore](https://github.com/documentcloud/underscore/pull/338). In short, AMD registration is useful because:\r\n\r\n* It encourages modules for use in the browser in a way that does not require dumping globals.\r\n* Since dependencies are string names, alternate implementations can be swapped in. For Backbone, it means it can ask for 'jquery' but have zepto loaded instead. It avoids the need for a script like Backbone to have to know of all the scripts that could be used instead of jQuery.\r\n* Because globals can be avoided, it is possible to build contained libraries. Even ones that do not use an AMD loader, but just the API to connect its individual components. The [almond AMD shim](https://github.com/jrburke/almond) can be used for those cases.\r\n* noConflict() is not enough due to timing issue of script execution and script onload callbacks for dynamically added scripts in IE. For building contained libraries, use of noConflict() for all the modules becomes unwieldy.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/674",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/674/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/674/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/674/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/674",
    "id": 1923986,
    "number": 674,
    "title": "model.performValidation() should pass options through to validate()",
    "user": {
      "login": "tribalvibes",
      "id": 167275,
      "avatar_url": "https://avatars.githubusercontent.com/u/167275?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tribalvibes",
      "html_url": "https://github.com/tribalvibes",
      "followers_url": "https://api.github.com/users/tribalvibes/followers",
      "following_url": "https://api.github.com/users/tribalvibes/following{/other_user}",
      "gists_url": "https://api.github.com/users/tribalvibes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tribalvibes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tribalvibes/subscriptions",
      "organizations_url": "https://api.github.com/users/tribalvibes/orgs",
      "repos_url": "https://api.github.com/users/tribalvibes/repos",
      "events_url": "https://api.github.com/users/tribalvibes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tribalvibes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2011-10-17T00:06:00Z",
    "updated_at": "2011-11-23T20:50:56Z",
    "closed_at": "2011-11-23T20:29:55Z",
    "body": "One line change, line 401:\r\n`var error = this.validate(attrs,options);`\r\n\r\nWould allow `validate` to consider the `options` passed in `save`, `set` and `fetch` etc.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/673",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/673/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/673/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/673/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/673",
    "id": 1923750,
    "number": 673,
    "title": "\"Collection: add into sorted position\" + index is passed in 'add' event",
    "user": {
      "login": "lawrencepit",
      "id": 115,
      "avatar_url": "https://avatars.githubusercontent.com/u/115?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lawrencepit",
      "html_url": "https://github.com/lawrencepit",
      "followers_url": "https://api.github.com/users/lawrencepit/followers",
      "following_url": "https://api.github.com/users/lawrencepit/following{/other_user}",
      "gists_url": "https://api.github.com/users/lawrencepit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lawrencepit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lawrencepit/subscriptions",
      "organizations_url": "https://api.github.com/users/lawrencepit/orgs",
      "repos_url": "https://api.github.com/users/lawrencepit/repos",
      "events_url": "https://api.github.com/users/lawrencepit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lawrencepit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2011-10-16T23:07:32Z",
    "updated_at": "2012-01-13T19:12:01Z",
    "closed_at": "2012-01-13T19:12:01Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/673",
      "html_url": "https://github.com/jashkenas/backbone/pull/673",
      "diff_url": "https://github.com/jashkenas/backbone/pull/673.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/673.patch"
    },
    "body": "When a Collection has a +comparator+ defined, then when adding an object the +add+ event handler needs to know at which position the object was inserted into. This patch passes the +index+ to the +add+ event handler."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/654",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/654/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/654/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/654/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/654",
    "id": 1797830,
    "number": 654,
    "title": "unescape URL value just before sending them to callback",
    "user": {
      "login": "4vanger",
      "id": 596990,
      "avatar_url": "https://avatars.githubusercontent.com/u/596990?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/4vanger",
      "html_url": "https://github.com/4vanger",
      "followers_url": "https://api.github.com/users/4vanger/followers",
      "following_url": "https://api.github.com/users/4vanger/following{/other_user}",
      "gists_url": "https://api.github.com/users/4vanger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/4vanger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/4vanger/subscriptions",
      "organizations_url": "https://api.github.com/users/4vanger/orgs",
      "repos_url": "https://api.github.com/users/4vanger/repos",
      "events_url": "https://api.github.com/users/4vanger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/4vanger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-10-02T20:45:31Z",
    "updated_at": "2012-01-13T19:20:31Z",
    "closed_at": "2012-01-13T19:20:31Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/654",
      "html_url": "https://github.com/jashkenas/backbone/pull/654",
      "diff_url": "https://github.com/jashkenas/backbone/pull/654.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/654.patch"
    },
    "body": "Problem: you have an URL like \"#!/search/I%20have%20a%20%2fhere/page2\". So I'm creating a route like\r\n\t\"!/search/:query/page:page\": \"doSearch\"\r\nand expecting to get search query \"I have a / here\" and \"2\" as a page number.\r\nBut currently you will get nothing because URL is decoded before it is processed by Backbone - so your escaped dash will be processed like real dash and whole regex will fail.\r\nProposed solution - process URL fragment unescaped and unescape values before sending them into callback function."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/649",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/649/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/649/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/649/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/649",
    "id": 1791033,
    "number": 649,
    "title": "Add a 3rd argument (context) to unbind",
    "user": {
      "login": "johnnyoshika",
      "id": 504505,
      "avatar_url": "https://avatars.githubusercontent.com/u/504505?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnnyoshika",
      "html_url": "https://github.com/johnnyoshika",
      "followers_url": "https://api.github.com/users/johnnyoshika/followers",
      "following_url": "https://api.github.com/users/johnnyoshika/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnnyoshika/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnnyoshika/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnnyoshika/subscriptions",
      "organizations_url": "https://api.github.com/users/johnnyoshika/orgs",
      "repos_url": "https://api.github.com/users/johnnyoshika/repos",
      "events_url": "https://api.github.com/users/johnnyoshika/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnnyoshika/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-10-01T07:24:48Z",
    "updated_at": "2012-01-13T19:31:17Z",
    "closed_at": "2012-01-13T19:31:17Z",
    "body": "This is a proposal...\r\n\r\nProblem:\r\nWhen multiple objects (e.g. views) bind to the same event on a model and pass in the same callback, unbind is not reliable because it will unbind the first callback that matches the event name / callback combination in the _callbacks array.  For example:\r\n\r\nvar MyView = Backbone.View.extend({\r\n  initialize: function() {\r\n    this.model.bind('change', this.render, this);\r\n  },\r\n\r\n  unbindChange: function(){\r\n     this.model.unbind('change', this.render); \r\n  }\r\n});\r\n\r\nvar view1 = new MyView({model: model123});\r\nvar view2= new MyView({model: model123});\r\n\r\nview2.unbindChange(); // Oh oh!  I just unbound view1's callback and not view2's.\r\n\r\nPossible solution is to allow an optional 3rd argument, the context, to unbind. This way, if the context is passed, unbind will make sure the context matches before it unbinds.  If a context is not passed, the behavior will be the same as before, so this is fully backwards compatible:\r\n\r\n        unbind: function (ev, callback, context) {\r\n            var calls;\r\n            if (!ev) {\r\n                this._callbacks = {};\r\n            } else if (calls = this._callbacks) {\r\n                if (!callback) {\r\n                    calls[ev] = [];\r\n                } else {\r\n                    var list = calls[ev];\r\n                    if (!list) return this;\r\n                    for (var i = 0, l = list.length; i < l; i++) {\r\n                        if (list[i] && callback === list[i][0] && (!context || list[i][1] === context)) {\r\n                            list[i] = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        }"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/645",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/645/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/645/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/645/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/645",
    "id": 1773547,
    "number": 645,
    "title": "Implemented attribute hooks",
    "user": {
      "login": "yuchi",
      "id": 646609,
      "avatar_url": "https://avatars.githubusercontent.com/u/646609?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuchi",
      "html_url": "https://github.com/yuchi",
      "followers_url": "https://api.github.com/users/yuchi/followers",
      "following_url": "https://api.github.com/users/yuchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuchi/subscriptions",
      "organizations_url": "https://api.github.com/users/yuchi/orgs",
      "repos_url": "https://api.github.com/users/yuchi/repos",
      "events_url": "https://api.github.com/users/yuchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-09-29T10:16:42Z",
    "updated_at": "2011-10-29T18:37:58Z",
    "closed_at": "2011-10-29T18:37:58Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/645",
      "html_url": "https://github.com/jashkenas/backbone/pull/645",
      "diff_url": "https://github.com/jashkenas/backbone/pull/645.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/645.patch"
    },
    "body": "This is just a proposal and possible implementation for a feature that could solve some issues.\r\n\r\n**Actually the API is simply horrible. I'd like some feedback from the community about names and additional features/improvement.**\r\n\r\nWith this you can hook on Models' attributes using `model.setHook(attributeName, hookObject);` where:\r\n\r\n* `attributeName` is the attribute you want to hook in;\r\n* `hookObject` is an hash (in future could be an instance of a theorical Backbone.Hook) with:\r\n    * `json` (true) : does the hook must end up in `.toJSON()` result?\r\n    * `property` (null) : whatever is here will be put in `model[hookObj.propertyName || attributeName]` as a reference.\r\n    * `propertyName` (defaults to `attributeName`) : see above;\r\n    * `getter` : a function called with `model.get`;\r\n    * `setter` : a function called with `model.set`;\r\n\r\nHooks can be implement on a class basis with:\r\n\r\n```javascript\r\nvar MyUserModel  = Backbone.Model.extend({\r\n  hooks: {\r\n    happy: {\r\n      json: false,\r\n      getter: function () {\r\n        return this.get('status').indexOf(':)') >= 0;\r\n      },\r\n      setter: function () {/* no op */}\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nEven at model's instantiation with:\r\n\r\n```javascript\r\nvar MyUserModel  = Backbone.Model.extend({\r\n  hooks: function() {\r\n    var user = this;\r\n    var messages = new MyMessagesCollection([], { userId : user.id });\r\n    return {\r\n      messages: {\r\n        json: true, // does your server support nesting?\r\n        property: messages,\r\n        getter: function () {\r\n          return messages.toJSON();\r\n        },\r\n        setter: function (objs) {\r\n          messages.add(objs);\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/640",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/640/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/640/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/640/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/640",
    "id": 1767749,
    "number": 640,
    "title": "Add option to bind multiple events",
    "user": {
      "login": "paulyoder",
      "id": 224111,
      "avatar_url": "https://avatars.githubusercontent.com/u/224111?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulyoder",
      "html_url": "https://github.com/paulyoder",
      "followers_url": "https://api.github.com/users/paulyoder/followers",
      "following_url": "https://api.github.com/users/paulyoder/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulyoder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulyoder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulyoder/subscriptions",
      "organizations_url": "https://api.github.com/users/paulyoder/orgs",
      "repos_url": "https://api.github.com/users/paulyoder/repos",
      "events_url": "https://api.github.com/users/paulyoder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulyoder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 25,
    "created_at": "2011-09-28T19:35:48Z",
    "updated_at": "2012-01-13T21:02:16Z",
    "closed_at": "2012-01-13T21:01:55Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/640",
      "html_url": "https://github.com/jashkenas/backbone/pull/640",
      "diff_url": "https://github.com/jashkenas/backbone/pull/640.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/640.patch"
    },
    "body": "Updated the Backbone.Events.bind method to accept multiple events to bind to, which allows the following syntax:\r\n\r\n```\r\ncollection.bind('add remove', this.onCollectionSizeChanged);\r\n```\r\nThe multiple events are space delimited."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/638",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/638/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/638/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/638/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/638",
    "id": 1763190,
    "number": 638,
    "title": "Fix insertion order when adding a list of models to a collection and specifying `at`",
    "user": {
      "login": "knuton",
      "id": 47458,
      "avatar_url": "https://avatars.githubusercontent.com/u/47458?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/knuton",
      "html_url": "https://github.com/knuton",
      "followers_url": "https://api.github.com/users/knuton/followers",
      "following_url": "https://api.github.com/users/knuton/following{/other_user}",
      "gists_url": "https://api.github.com/users/knuton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/knuton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/knuton/subscriptions",
      "organizations_url": "https://api.github.com/users/knuton/orgs",
      "repos_url": "https://api.github.com/users/knuton/repos",
      "events_url": "https://api.github.com/users/knuton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/knuton/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-09-28T10:35:29Z",
    "updated_at": "2012-01-16T15:47:14Z",
    "closed_at": "2012-01-13T21:04:06Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/638",
      "html_url": "https://github.com/jashkenas/backbone/pull/638",
      "diff_url": "https://github.com/jashkenas/backbone/pull/638.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/638.patch"
    },
    "body": "Currently when adding a list of models to a collection at a specified position using `add`, the list is added in reverse order.\r\n\r\n    var a = new Backbone.Model({id: 1});\r\n    var b = new Backbone.Model({id: 2});\r\n    var coll = new Backbone.Collection([a, b]);\r\n    var c = new Backbone.Model({id: 3});\r\n    var d = new Backbone.Model({id: 4});\r\n    coll.add([c, d], {at: 1});\r\n    // coll.models is [a, d, c, b], when it should be [a, c, d, b]\r\n\r\nThis change fixes the issue by adding the models in reverse order if a position is specified."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/629",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/629/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/629/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/629/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/629",
    "id": 1727473,
    "number": 629,
    "title": "Feature request: Add a generic event object",
    "user": {
      "login": "dswitzer",
      "id": 900497,
      "avatar_url": "https://avatars.githubusercontent.com/u/900497?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dswitzer",
      "html_url": "https://github.com/dswitzer",
      "followers_url": "https://api.github.com/users/dswitzer/followers",
      "following_url": "https://api.github.com/users/dswitzer/following{/other_user}",
      "gists_url": "https://api.github.com/users/dswitzer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dswitzer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dswitzer/subscriptions",
      "organizations_url": "https://api.github.com/users/dswitzer/orgs",
      "repos_url": "https://api.github.com/users/dswitzer/repos",
      "events_url": "https://api.github.com/users/dswitzer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dswitzer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-09-23T22:14:37Z",
    "updated_at": "2012-01-13T21:26:29Z",
    "closed_at": "2012-01-13T21:26:02Z",
    "body": "One of the things I'm finding myself doing is using a generic global event object, something like:\r\n\r\n```\r\nvar BackboneExt = BackboneExt || {Dispatcher: _.extend({}, Backbone.Events)};\r\n```\r\n\r\nThis allows me to build a model like:\r\n\r\n```\r\nPerson = Backbone.Model.extend({\r\n\tinitialize: function (){\r\n\t\tthis.bind(\"change\", function (model){\r\n\t\t\tBackboneExt.Dispatcher.trigger(\"Person:change\", model);\r\n\t\t})\r\n\t}\r\n});\r\n```\r\n\r\nNow I have the ability to hook into this generic event anywhere in my code by doing:\r\n\r\n```\r\nBackboneExt.Dispatcher.bind(\"Person:change\", function(model){\r\n\tconsole.log('Backbone.Dispatcher');\r\n\tconsole.dir(model);\r\n});\r\n```\r\n\r\nThis allows me to hook into the Model in many places of my code (view, controllers, etc) without passing down dependencies. I'd really love to shorten that further to something like:\r\n\r\n```\r\nPerson = Backbone.Model.extend({\r\n\tinitialize: function (){\r\n\t\t// the below line would bind a \"change\" event, then trigger the global dispatcher object (like the commented code below)\r\n\t\tthis.dispatch(\"Person\", \"change\");\r\n/*\r\n\t\tthis.bind(\"change\", function (model){\r\n\t\t\tBackboneExt.Dispatcher.trigger(\"Person:change\", model);\r\n\t\t})\r\n\t}\r\n*/\r\n});\r\n```\r\n\r\nI've love to see something like this baked into Backbone."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/618",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/618/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/618/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/618/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/618",
    "id": 1667598,
    "number": 618,
    "title": "Support for PATCH method and sending JSON patches",
    "user": {
      "login": "bruth",
      "id": 515142,
      "avatar_url": "https://avatars.githubusercontent.com/u/515142?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bruth",
      "html_url": "https://github.com/bruth",
      "followers_url": "https://api.github.com/users/bruth/followers",
      "following_url": "https://api.github.com/users/bruth/following{/other_user}",
      "gists_url": "https://api.github.com/users/bruth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bruth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bruth/subscriptions",
      "organizations_url": "https://api.github.com/users/bruth/orgs",
      "repos_url": "https://api.github.com/users/bruth/repos",
      "events_url": "https://api.github.com/users/bruth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bruth/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 35,
    "created_at": "2011-09-17T03:21:46Z",
    "updated_at": "2014-11-11T18:38:18Z",
    "closed_at": "2012-12-10T18:53:44Z",
    "body": "Support for ``PATCH`` method http://tools.ietf.org/html/rfc5789 and patch support specifically for JSON documents: http://tools.ietf.org/html/draft-pbryan-json-patch-01\r\n\r\nA couple implications of this proposal:\r\n\r\n- new MIME type ``application/patch-json`` http://tools.ietf.org/html/draft-pbryan-json-patch-01#page-5\r\n- new HTTP verb, ``PATCH``\r\n- new format being sent to the server, according to the above proposal\r\n\r\nI want to get a few reactions before I start writing a patch. The primary idea is:\r\n\r\n- ``Model.save`` would take an additional argument ``patch`` which if ``true``, would send a ``PATCH`` request with the ``application/patch-json`` MIME type\r\n\r\nOther non-essential ideas include:\r\n\r\n- ``Model.patch`` could be introduced which takes a patch in the format outlined in the proposal\r\n- ``Collection.patch`` could do something similar (though the ordering of models could get ambiguous due to the ``comparator``)\r\n\r\nHere are examples of what the patches look like http://tools.ietf.org/html/draft-pbryan-json-patch-01#page-6"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/615",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/615/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/615/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/615/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/615",
    "id": 1646530,
    "number": 615,
    "title": "Default generated URLs can't be given extensions such as \".json\" easily.",
    "user": {
      "login": "allanca",
      "id": 175399,
      "avatar_url": "https://avatars.githubusercontent.com/u/175399?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/allanca",
      "html_url": "https://github.com/allanca",
      "followers_url": "https://api.github.com/users/allanca/followers",
      "following_url": "https://api.github.com/users/allanca/following{/other_user}",
      "gists_url": "https://api.github.com/users/allanca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/allanca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/allanca/subscriptions",
      "organizations_url": "https://api.github.com/users/allanca/orgs",
      "repos_url": "https://api.github.com/users/allanca/repos",
      "events_url": "https://api.github.com/users/allanca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/allanca/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2011-09-14T19:08:21Z",
    "updated_at": "2013-06-20T19:47:21Z",
    "closed_at": "2011-09-14T20:07:33Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/615",
      "html_url": "https://github.com/jashkenas/backbone/pull/615",
      "diff_url": "https://github.com/jashkenas/backbone/pull/615.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/615.patch"
    },
    "body": "Changed Backbone.Model.prototype.url to look for a urlExtension attribute and append it to the generated url if it does."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/614",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/614/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/614/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/614/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/614",
    "id": 1641705,
    "number": 614,
    "title": "Backbone.Collection.nest()",
    "user": {
      "login": "geddski",
      "id": 515722,
      "avatar_url": "https://avatars.githubusercontent.com/u/515722?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/geddski",
      "html_url": "https://github.com/geddski",
      "followers_url": "https://api.github.com/users/geddski/followers",
      "following_url": "https://api.github.com/users/geddski/following{/other_user}",
      "gists_url": "https://api.github.com/users/geddski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/geddski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/geddski/subscriptions",
      "organizations_url": "https://api.github.com/users/geddski/orgs",
      "repos_url": "https://api.github.com/users/geddski/repos",
      "events_url": "https://api.github.com/users/geddski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/geddski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 23,
    "created_at": "2011-09-14T08:27:39Z",
    "updated_at": "2012-01-14T05:23:55Z",
    "closed_at": "2012-01-13T21:49:09Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/614",
      "html_url": "https://github.com/jashkenas/backbone/pull/614",
      "diff_url": "https://github.com/jashkenas/backbone/pull/614.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/614.patch"
    },
    "body": "Models often need nested collections. Given the example in the FAQ:\r\n\r\n```javascript\r\nvar Mailbox = Backbone.Model.extend({\r\n  initialize: function() {\r\n    this.messages = new Messages;\r\n  }\r\n});\r\n\r\nvar myBox = new Mailbox;\r\n\r\n```\r\n\r\nLet's say you're using a NoSQL DB like mongodb, and are pulling down all the data for a given mailbox on page load. So your model's toJSON() output looks like this:\r\n\r\n```javascript\r\n{\r\nmailboxName: \"432 West\",\r\nmessages: [\r\n  {from: \"Mom\", title: \"Learn your JavaScript\"},\r\n  {from: \"City Hall\", title: \"Your dogs bark too loud\"}\r\n]\r\n}\r\n```\r\n\r\nNow in your app you change or add a message:\r\n\r\n```javascript\r\nvar momsMessage = myBox.messages.at(1);\r\nmomsMessage.set({title: \"return to sender\"});\r\n```\r\n\r\nWell now we have a *big* problem. `myBox.toJSON()` contains the *original* data, not the updated data. Your `'return to sender'` title won't get saved to the server unless you *override* Mailbox's toJSON function. What a pain, bloating all our models with overridden toJSON functions and change events. \r\n\r\nBackbone should be much smarter about nesting collections. The model's underlying data should point to the same data as the nested collection. This is easy with JS thanks to reference types (objects, arrays, etc.)\r\nI created a simple static function called Backbone.Collection.nest. You pass it the `model`, the `attribute name`, and `collection instance`. It returns the `collection instance` for convenience. Example usage:\r\n\r\n```javascript\r\nvar Mailbox = Backbone.Model.extend({\r\n  initialize: function() {\r\n    this.messages = Backbone.Collection.nest(this, 'messages', new Messages(this.get('messages')));\r\n  }\r\n});\r\n\r\nvar myBox = new Mailbox;\r\n\r\n```\r\n\r\nNow when you render `myBox` in a template or `save()` it to the server, it will always have the right data, all without overriding toJSON or any other trickery. \r\n\r\nThe only real complaint I've heard about backbone is that it's complex and difficult to nest collections. Problem solved. \r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/613",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/613/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/613/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/613/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/613",
    "id": 1639079,
    "number": 613,
    "title": "IE7 iframe contentWindow error from calling Backbone.history.start before DOM ready",
    "user": {
      "login": "deleteme",
      "id": 9389,
      "avatar_url": "https://avatars.githubusercontent.com/u/9389?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deleteme",
      "html_url": "https://github.com/deleteme",
      "followers_url": "https://api.github.com/users/deleteme/followers",
      "following_url": "https://api.github.com/users/deleteme/following{/other_user}",
      "gists_url": "https://api.github.com/users/deleteme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deleteme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deleteme/subscriptions",
      "organizations_url": "https://api.github.com/users/deleteme/orgs",
      "repos_url": "https://api.github.com/users/deleteme/repos",
      "events_url": "https://api.github.com/users/deleteme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deleteme/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-09-13T23:02:32Z",
    "updated_at": "2011-09-14T16:54:59Z",
    "closed_at": "2011-09-14T16:54:59Z",
    "body": "When `Backbone.history.start` is called before the DOM is loaded, Internet Explorer 7 fails to create an iframe element and the following javascript error is thrown:\r\n\r\n```\r\nLine: 787\r\nChar: 9\r\nError: 'hide().appendTo(...).0.contentWindow' is null or not an object\r\nCode: 0\r\n```\r\n\r\nhttps://github.com/documentcloud/backbone/blob/0.5.3/backbone.js#L786\r\n\r\n__Reduction of bug:__ http://jsfiddle.net/QPGdE/27/embedded/result/\r\n\r\n#245 is related.\r\n\r\nThis error can be avoided if `Backbone.history.start` is called after the DOM is loaded. [Here's a working example](http://jsfiddle.net/QPGdE/28/embedded/result/). Hopefully this explanation saves other people time when they encounter the error.\r\n\r\n__A quick solution:__\r\n\r\nMaybe this can be mentioned as a known issue in the documentation? Or maybe we can detect when the iframe creation failed and throw a descriptive error for the user/developer. \r\n\r\n__Better solution, but needs research:__\r\n\r\nThe creation of the iframe element could happen after dom ready. Zepto and jQuery make it easy to do this, but this could introduce unexpected issues when trying to call `navigate` before the iframe is created."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/605",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/605/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/605/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/605/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/605",
    "id": 1617938,
    "number": 605,
    "title": "If a DOM library can't be found on window, try to require jQuery.",
    "user": {
      "login": "edmellum",
      "id": 622855,
      "avatar_url": "https://avatars.githubusercontent.com/u/622855?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/edmellum",
      "html_url": "https://github.com/edmellum",
      "followers_url": "https://api.github.com/users/edmellum/followers",
      "following_url": "https://api.github.com/users/edmellum/following{/other_user}",
      "gists_url": "https://api.github.com/users/edmellum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/edmellum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/edmellum/subscriptions",
      "organizations_url": "https://api.github.com/users/edmellum/orgs",
      "repos_url": "https://api.github.com/users/edmellum/repos",
      "events_url": "https://api.github.com/users/edmellum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/edmellum/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-09-11T12:45:42Z",
    "updated_at": "2011-09-14T20:46:02Z",
    "closed_at": "2011-09-14T20:46:02Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/605",
      "html_url": "https://github.com/jashkenas/backbone/pull/605",
      "diff_url": "https://github.com/jashkenas/backbone/pull/605.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/605.patch"
    },
    "body": "This should help properly support Ender and Browserify. It also doesn't make jQuery a hard dependency by putting the require in a `try` block so Node.js people can just use Backbone models without having jQuery getting required.\r\n\r\nAll tests are passing and it works in the browser normally, with Browserify and in Node.js."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/595",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/595/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/595/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/595/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/595",
    "id": 1559196,
    "number": 595,
    "title": "add get/set to View objects",
    "user": {
      "login": "trivial",
      "id": 1010322,
      "avatar_url": "https://avatars.githubusercontent.com/u/1010322?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trivial",
      "html_url": "https://github.com/trivial",
      "followers_url": "https://api.github.com/users/trivial/followers",
      "following_url": "https://api.github.com/users/trivial/following{/other_user}",
      "gists_url": "https://api.github.com/users/trivial/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trivial/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trivial/subscriptions",
      "organizations_url": "https://api.github.com/users/trivial/orgs",
      "repos_url": "https://api.github.com/users/trivial/repos",
      "events_url": "https://api.github.com/users/trivial/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trivial/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-09-03T19:28:17Z",
    "updated_at": "2011-09-14T21:50:27Z",
    "closed_at": "2011-09-14T21:50:27Z",
    "body": "It would be nice if Views supported the get/set methods and published change events in the same fashion as Models.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/581",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/581/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/581/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/581/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/581",
    "id": 1480857,
    "number": 581,
    "title": "Keypath based observable as with batman.js",
    "user": {
      "login": "bradphelan",
      "id": 17650,
      "avatar_url": "https://avatars.githubusercontent.com/u/17650?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bradphelan",
      "html_url": "https://github.com/bradphelan",
      "followers_url": "https://api.github.com/users/bradphelan/followers",
      "following_url": "https://api.github.com/users/bradphelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bradphelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradphelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradphelan/subscriptions",
      "organizations_url": "https://api.github.com/users/bradphelan/orgs",
      "repos_url": "https://api.github.com/users/bradphelan/repos",
      "events_url": "https://api.github.com/users/bradphelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradphelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-08-25T07:30:00Z",
    "updated_at": "2011-08-26T07:08:57Z",
    "closed_at": "2011-08-25T20:48:23Z",
    "body": "For example from\r\n\r\nhttps://github.com/Shopify/batman\r\n\r\n\temployee.observe 'team.manager.name', (newVal, oldVal) ->\r\n\t  console.log \"you now answer to #{newVal || 'nobody'}!\"\r\n\tmanager = employee.get 'team.manager'\r\n\tmanager.set 'name', 'Bill'\r\n\t\r\nThis has been a major problem with backbone.js for me at the moment and I have various imperfect work arounds for it. Backbone.js assumes a flat json structure and allows you to observe changes on single fields. However with document \r\nstore backends becoming fashionable returned JSON can be heavily nested and some kind of nested observer framework\r\nis required. \r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/573",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/573/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/573/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/573/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/573",
    "id": 1440111,
    "number": 573,
    "title": "Add an attributes parameter to toJSON on model, which returns whitelisted properties.",
    "user": {
      "login": "keithamus",
      "id": 118266,
      "avatar_url": "https://avatars.githubusercontent.com/u/118266?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/keithamus",
      "html_url": "https://github.com/keithamus",
      "followers_url": "https://api.github.com/users/keithamus/followers",
      "following_url": "https://api.github.com/users/keithamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/keithamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/keithamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/keithamus/subscriptions",
      "organizations_url": "https://api.github.com/users/keithamus/orgs",
      "repos_url": "https://api.github.com/users/keithamus/repos",
      "events_url": "https://api.github.com/users/keithamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/keithamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2011-08-19T10:51:11Z",
    "updated_at": "2011-10-14T23:12:59Z",
    "closed_at": "2011-08-19T13:07:34Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/573",
      "html_url": "https://github.com/jashkenas/backbone/pull/573",
      "diff_url": "https://github.com/jashkenas/backbone/pull/573.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/573.patch"
    },
    "body": "Add an attributes parameter to toJSON method which, when passed, runs a whitelist filter on returned attributes\r\n\r\nExample Use:\r\n    model.toJSON(['one', 'two']) == {one: 1, two: 2}\r\n\r\nUse Case:\r\n\r\n  When getting JSON representations of the model we want to send certain attributes to certain endpoints, and other attributes to other endpoints"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/572",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/572/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/572/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/572/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/572",
    "id": 1436351,
    "number": 572,
    "title": "Add support for Ender",
    "user": {
      "login": "fat",
      "id": 169705,
      "avatar_url": "https://avatars.githubusercontent.com/u/169705?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fat",
      "html_url": "https://github.com/fat",
      "followers_url": "https://api.github.com/users/fat/followers",
      "following_url": "https://api.github.com/users/fat/following{/other_user}",
      "gists_url": "https://api.github.com/users/fat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fat/subscriptions",
      "organizations_url": "https://api.github.com/users/fat/orgs",
      "repos_url": "https://api.github.com/users/fat/repos",
      "events_url": "https://api.github.com/users/fat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 18,
    "created_at": "2011-08-18T23:45:46Z",
    "updated_at": "2011-09-21T14:42:06Z",
    "closed_at": "2011-08-19T12:21:52Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/572",
      "html_url": "https://github.com/jashkenas/backbone/pull/572",
      "diff_url": "https://github.com/jashkenas/backbone/pull/572.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/572.patch"
    },
    "body": "Ender's jeesh passes all tests for backbone integration. And using them together is super easy... from the command line you just run:\r\n\r\n    ender build jeesh backbone\r\n\r\nThe only change in backbone is to look for \"ender\" on root. I also added a test file which is essentially a clone of zeptos."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/569",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/569/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/569/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/569/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/569",
    "id": 1432402,
    "number": 569,
    "title": "Implemented Spine-like elements configuration",
    "user": {
      "login": "bruth",
      "id": 515142,
      "avatar_url": "https://avatars.githubusercontent.com/u/515142?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bruth",
      "html_url": "https://github.com/bruth",
      "followers_url": "https://api.github.com/users/bruth/followers",
      "following_url": "https://api.github.com/users/bruth/following{/other_user}",
      "gists_url": "https://api.github.com/users/bruth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bruth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bruth/subscriptions",
      "organizations_url": "https://api.github.com/users/bruth/orgs",
      "repos_url": "https://api.github.com/users/bruth/repos",
      "events_url": "https://api.github.com/users/bruth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bruth/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2011-08-18T14:11:08Z",
    "updated_at": "2014-03-25T03:41:28Z",
    "closed_at": "2012-01-17T16:26:18Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/569",
      "html_url": "https://github.com/jashkenas/backbone/pull/569",
      "diff_url": "https://github.com/jashkenas/backbone/pull/569.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/569.patch"
    },
    "body": "Implementation of this feature from Spine: http://maccman.github.com/spine/#s-controllers-elements\r\n\r\nReopened from #511 that has been rebased with master."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/566",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/566/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/566/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/566/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/566",
    "id": 1431510,
    "number": 566,
    "title": "Added Backbone.model.strict - will prevent the model from setting attribu",
    "user": {
      "login": "keithamus",
      "id": 118266,
      "avatar_url": "https://avatars.githubusercontent.com/u/118266?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/keithamus",
      "html_url": "https://github.com/keithamus",
      "followers_url": "https://api.github.com/users/keithamus/followers",
      "following_url": "https://api.github.com/users/keithamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/keithamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/keithamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/keithamus/subscriptions",
      "organizations_url": "https://api.github.com/users/keithamus/orgs",
      "repos_url": "https://api.github.com/users/keithamus/repos",
      "events_url": "https://api.github.com/users/keithamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/keithamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-08-18T11:40:06Z",
    "updated_at": "2012-01-17T19:07:53Z",
    "closed_at": "2012-01-17T19:07:53Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/566",
      "html_url": "https://github.com/jashkenas/backbone/pull/566",
      "diff_url": "https://github.com/jashkenas/backbone/pull/566.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/566.patch"
    },
    "body": "Added Backbone.model.strict - will prevent the model from setting attributes that are not already in defaults.\r\n\r\nUse Case:\r\n\r\n   I am using the model to hit an endpoint that takes a specific set of parameters, if it includes parameters that it cannot recognise then it errors. I need to be able to trivially specify that the model should only allow certain parameters to pass through it"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/564",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/564/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/564/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/564/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/564",
    "id": 1419818,
    "number": 564,
    "title": "backbone doesn't work properly on server without addition",
    "user": {
      "login": "Morriz",
      "id": 941865,
      "avatar_url": "https://avatars.githubusercontent.com/u/941865?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Morriz",
      "html_url": "https://github.com/Morriz",
      "followers_url": "https://api.github.com/users/Morriz/followers",
      "following_url": "https://api.github.com/users/Morriz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Morriz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Morriz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Morriz/subscriptions",
      "organizations_url": "https://api.github.com/users/Morriz/orgs",
      "repos_url": "https://api.github.com/users/Morriz/repos",
      "events_url": "https://api.github.com/users/Morriz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Morriz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-08-17T00:55:00Z",
    "updated_at": "2012-01-29T03:07:44Z",
    "closed_at": "2011-10-29T19:03:50Z",
    "body": "please change this line:\r\n\r\nvar $ = root.jQuery || root.Zepto;\r\n\r\nto:\r\n\r\nvar $ = root.jQuery || root.Zepto || require('jquery');\r\n\r\nto enable backbone on the server.\r\n\r\nchek,\r\n\r\nMaurice"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/554",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/554/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/554/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/554/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/554",
    "id": 1388923,
    "number": 554,
    "title": "Event after model's validate() completes.",
    "user": {
      "login": "KimAndersen",
      "id": 473355,
      "avatar_url": "https://avatars.githubusercontent.com/u/473355?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KimAndersen",
      "html_url": "https://github.com/KimAndersen",
      "followers_url": "https://api.github.com/users/KimAndersen/followers",
      "following_url": "https://api.github.com/users/KimAndersen/following{/other_user}",
      "gists_url": "https://api.github.com/users/KimAndersen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KimAndersen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KimAndersen/subscriptions",
      "organizations_url": "https://api.github.com/users/KimAndersen/orgs",
      "repos_url": "https://api.github.com/users/KimAndersen/repos",
      "events_url": "https://api.github.com/users/KimAndersen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KimAndersen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-08-11T17:04:58Z",
    "updated_at": "2012-01-22T18:10:39Z",
    "closed_at": "2012-01-22T18:10:39Z",
    "body": "This is not an issue, well to me it is, more a feature request. Didn't know where to post it.\r\n\r\nAnyway, unless Im missing it somewhere it would be really nice to have an event fired after a model's validate() method completes.\r\n\r\nIm aware that callers can pass an error callback in the options parameter on a model's set() method. However, Im looking for a handy way of letting the model itself know when a validate() is completed.\r\n\r\nBelow is what Im doing now at the end of my validate() method to get this behavior.\r\nNote: I need to do it async so the validate() returns, otherwise attributes are not set.\r\n\r\nvalidate: function()\r\n{\r\n    // Validate...\r\n    window.setTimeout(this.validateComplete, 0);\r\n}\r\n\r\n\r\n\r\nThanks!\r\nKim Andersen"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/553",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/553/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/553/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/553/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/553",
    "id": 1388668,
    "number": 553,
    "title": "Allow Backbone.js to seamlessly consume xml web services",
    "user": {
      "login": "thinkjson",
      "id": 200365,
      "avatar_url": "https://avatars.githubusercontent.com/u/200365?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thinkjson",
      "html_url": "https://github.com/thinkjson",
      "followers_url": "https://api.github.com/users/thinkjson/followers",
      "following_url": "https://api.github.com/users/thinkjson/following{/other_user}",
      "gists_url": "https://api.github.com/users/thinkjson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thinkjson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thinkjson/subscriptions",
      "organizations_url": "https://api.github.com/users/thinkjson/orgs",
      "repos_url": "https://api.github.com/users/thinkjson/repos",
      "events_url": "https://api.github.com/users/thinkjson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thinkjson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-08-11T16:27:03Z",
    "updated_at": "2012-01-17T22:03:46Z",
    "closed_at": "2012-01-17T22:03:46Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/553",
      "html_url": "https://github.com/jashkenas/backbone/pull/553",
      "diff_url": "https://github.com/jashkenas/backbone/pull/553.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/553.patch"
    },
    "body": "Determine response type automatically via Content negotation. This allows Backbone.js to seamlessly consume xml web services."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/545",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/545/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/545/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/545/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/545",
    "id": 1364677,
    "number": 545,
    "title": "I am in the source and thinking would't it be the same but shorter? ",
    "user": {
      "login": "LeonFedotov",
      "id": 130342,
      "avatar_url": "https://avatars.githubusercontent.com/u/130342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LeonFedotov",
      "html_url": "https://github.com/LeonFedotov",
      "followers_url": "https://api.github.com/users/LeonFedotov/followers",
      "following_url": "https://api.github.com/users/LeonFedotov/following{/other_user}",
      "gists_url": "https://api.github.com/users/LeonFedotov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LeonFedotov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LeonFedotov/subscriptions",
      "organizations_url": "https://api.github.com/users/LeonFedotov/orgs",
      "repos_url": "https://api.github.com/users/LeonFedotov/repos",
      "events_url": "https://api.github.com/users/LeonFedotov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LeonFedotov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-08-08T11:55:17Z",
    "updated_at": "2012-01-22T18:23:19Z",
    "closed_at": "2012-01-22T18:23:19Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/545",
      "html_url": "https://github.com/jashkenas/backbone/pull/545",
      "diff_url": "https://github.com/jashkenas/backbone/pull/545.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/545.patch"
    },
    "body": "What are the thoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/542",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/542/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/542/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/542/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/542",
    "id": 1361688,
    "number": 542,
    "title": "Sync-events",
    "user": {
      "login": "ulmus",
      "id": 478308,
      "avatar_url": "https://avatars.githubusercontent.com/u/478308?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ulmus",
      "html_url": "https://github.com/ulmus",
      "followers_url": "https://api.github.com/users/ulmus/followers",
      "following_url": "https://api.github.com/users/ulmus/following{/other_user}",
      "gists_url": "https://api.github.com/users/ulmus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ulmus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ulmus/subscriptions",
      "organizations_url": "https://api.github.com/users/ulmus/orgs",
      "repos_url": "https://api.github.com/users/ulmus/repos",
      "events_url": "https://api.github.com/users/ulmus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ulmus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-08-07T20:21:10Z",
    "updated_at": "2013-12-20T01:57:40Z",
    "closed_at": "2012-01-22T18:24:59Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/542",
      "html_url": "https://github.com/jashkenas/backbone/pull/542",
      "diff_url": "https://github.com/jashkenas/backbone/pull/542.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/542.patch"
    },
    "body": "I've implemented these in my own code and liked the idea so much that I thought I'd share it. See this pull request as a conversation starter :)\r\n\r\nTo be able to block parts of the UI while updating (using the jQuery.blockUI plugin) I wanted to listen to when a model was being fetched and when the fetch was done. My suggestion to solve this would be to add a few `sync`-events to the `Backbone.sync`-method.\r\n\r\n- `sync:start` fires when the sync begins\r\n- `sync:done` fires when the sync has ended successfully\r\n- `sync:fail` fires when the sync has ended unsuccessfully\r\n- `sync:always` fires when the sync has ended, regardless of success.\r\n\r\nThis way, in views I can listen to `sync`-events on the models and collections and block and unblock the UI or insert ajax-loader-gifs or the equivalent. It was a pretty small addition using the jQuery deferred object."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/538",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/538/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/538/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/538/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/538",
    "id": 1348367,
    "number": 538,
    "title": "Make Backbone.history.historyStarted accessible to developers.",
    "user": {
      "login": "krunkosaurus",
      "id": 20738,
      "avatar_url": "https://avatars.githubusercontent.com/u/20738?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/krunkosaurus",
      "html_url": "https://github.com/krunkosaurus",
      "followers_url": "https://api.github.com/users/krunkosaurus/followers",
      "following_url": "https://api.github.com/users/krunkosaurus/following{/other_user}",
      "gists_url": "https://api.github.com/users/krunkosaurus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/krunkosaurus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/krunkosaurus/subscriptions",
      "organizations_url": "https://api.github.com/users/krunkosaurus/orgs",
      "repos_url": "https://api.github.com/users/krunkosaurus/repos",
      "events_url": "https://api.github.com/users/krunkosaurus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/krunkosaurus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2011-08-04T23:59:23Z",
    "updated_at": "2014-08-31T15:35:56Z",
    "closed_at": "2012-01-23T15:31:55Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/538",
      "html_url": "https://github.com/jashkenas/backbone/pull/538",
      "diff_url": "https://github.com/jashkenas/backbone/pull/538.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/538.patch"
    },
    "body": "Just a minor edit.\r\n\r\nIn my example I call Backbone.history.start really late because of Facebook authentication reasons and when a user's session is disconnected I must call an .init script again where I include a check to see if we're already listening for hash changes."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/535",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/535/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/535/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/535/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/535",
    "id": 1342883,
    "number": 535,
    "title": "Bind an object with multiple callback functions to any event",
    "user": {
      "login": "joshvermaire",
      "id": 786974,
      "avatar_url": "https://avatars.githubusercontent.com/u/786974?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshvermaire",
      "html_url": "https://github.com/joshvermaire",
      "followers_url": "https://api.github.com/users/joshvermaire/followers",
      "following_url": "https://api.github.com/users/joshvermaire/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshvermaire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshvermaire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshvermaire/subscriptions",
      "organizations_url": "https://api.github.com/users/joshvermaire/orgs",
      "repos_url": "https://api.github.com/users/joshvermaire/repos",
      "events_url": "https://api.github.com/users/joshvermaire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshvermaire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-08-04T08:07:20Z",
    "updated_at": "2014-05-04T02:53:47Z",
    "closed_at": "2011-08-04T13:07:07Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/535",
      "html_url": "https://github.com/jashkenas/backbone/pull/535",
      "diff_url": "https://github.com/jashkenas/backbone/pull/535.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/535.patch"
    },
    "body": "Bind multiple callback functions to any event.\r\n\r\nUse case:\r\n\r\n     Todos = Backbone.Collection.extend({\r\n     ...\r\n     this.bind('reset', {this.firstCallback, this.secondCallback}, this);\r\n     ...\r\n     });\r\n\r\nInstead of needing multiple binds for the same event."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/530",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/530/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/530/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/530/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/530",
    "id": 1328687,
    "number": 530,
    "title": "Collection test rewrite",
    "user": {
      "login": "bkuo",
      "id": 119251,
      "avatar_url": "https://avatars.githubusercontent.com/u/119251?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bkuo",
      "html_url": "https://github.com/bkuo",
      "followers_url": "https://api.github.com/users/bkuo/followers",
      "following_url": "https://api.github.com/users/bkuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/bkuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bkuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bkuo/subscriptions",
      "organizations_url": "https://api.github.com/users/bkuo/orgs",
      "repos_url": "https://api.github.com/users/bkuo/repos",
      "events_url": "https://api.github.com/users/bkuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bkuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-08-02T09:14:00Z",
    "updated_at": "2012-01-23T15:33:48Z",
    "closed_at": "2012-01-23T15:33:48Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/530",
      "html_url": "https://github.com/jashkenas/backbone/pull/530",
      "diff_url": "https://github.com/jashkenas/backbone/pull/530.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/530.patch"
    },
    "body": "Two things:\r\n\r\n1)  Rewrote test collection.js to use module(..., {setup:...}) so that tests can be independent and not have to depend on each other.   This makes it easier to find failing tests.\r\n\r\n2)  Added a test and fix for to handle cached 304 notmodified responses.  In the success callback of a 304,  a Collection must not try to reset itself as the data provided will always be undefined.\r\n\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/529",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/529/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/529/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/529/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/529",
    "id": 1328555,
    "number": 529,
    "title": "Add trakrapp.com example app",
    "user": {
      "login": "wuzhe",
      "id": 401,
      "avatar_url": "https://avatars.githubusercontent.com/u/401?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wuzhe",
      "html_url": "https://github.com/wuzhe",
      "followers_url": "https://api.github.com/users/wuzhe/followers",
      "following_url": "https://api.github.com/users/wuzhe/following{/other_user}",
      "gists_url": "https://api.github.com/users/wuzhe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wuzhe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wuzhe/subscriptions",
      "organizations_url": "https://api.github.com/users/wuzhe/orgs",
      "repos_url": "https://api.github.com/users/wuzhe/repos",
      "events_url": "https://api.github.com/users/wuzhe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wuzhe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-08-02T08:43:16Z",
    "updated_at": "2011-08-03T18:38:52Z",
    "closed_at": "2011-08-03T18:38:52Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/529",
      "html_url": "https://github.com/jashkenas/backbone/pull/529",
      "diff_url": "https://github.com/jashkenas/backbone/pull/529.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/529.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/525",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/525/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/525/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/525/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/525",
    "id": 1327061,
    "number": 525,
    "title": "Add validate to collection",
    "user": {
      "login": "kav",
      "id": 216737,
      "avatar_url": "https://avatars.githubusercontent.com/u/216737?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kav",
      "html_url": "https://github.com/kav",
      "followers_url": "https://api.github.com/users/kav/followers",
      "following_url": "https://api.github.com/users/kav/following{/other_user}",
      "gists_url": "https://api.github.com/users/kav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kav/subscriptions",
      "organizations_url": "https://api.github.com/users/kav/orgs",
      "repos_url": "https://api.github.com/users/kav/repos",
      "events_url": "https://api.github.com/users/kav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kav/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2011-08-02T00:49:27Z",
    "updated_at": "2014-03-25T20:26:38Z",
    "closed_at": "2011-08-03T18:41:23Z",
    "body": "There are times when a model is valid on it's own but is not valid for the collection it is being added to. Although at present this can be handled in the model itself this is less than graceful. It is also significantly more complex in cases where the model is a part of many collections."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/519",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/519/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/519/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/519/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/519",
    "id": 1315268,
    "number": 519,
    "title": "Add triggerForCurrentUrl to router",
    "user": {
      "login": "joefiorini",
      "id": 3648,
      "avatar_url": "https://avatars.githubusercontent.com/u/3648?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joefiorini",
      "html_url": "https://github.com/joefiorini",
      "followers_url": "https://api.github.com/users/joefiorini/followers",
      "following_url": "https://api.github.com/users/joefiorini/following{/other_user}",
      "gists_url": "https://api.github.com/users/joefiorini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joefiorini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joefiorini/subscriptions",
      "organizations_url": "https://api.github.com/users/joefiorini/orgs",
      "repos_url": "https://api.github.com/users/joefiorini/repos",
      "events_url": "https://api.github.com/users/joefiorini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joefiorini/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2011-07-30T15:51:03Z",
    "updated_at": "2011-08-30T02:30:22Z",
    "closed_at": "2011-08-30T02:28:29Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/519",
      "html_url": "https://github.com/jashkenas/backbone/pull/519",
      "diff_url": "https://github.com/jashkenas/backbone/pull/519.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/519.patch"
    },
    "body": "If I have 100 pages in my site, but only 10 of them are using Backbone (I'm loading pages synchronously), I should still be able to use the router as an entry point. At the moment calling route.navigate will break browsers that don't support push state on pages that don't use Backbone. The router serves as an excellent entry point to start wiring up the page I'm on. With this commit, instead of calling router.navigate(...) I can now call router.triggerForCurrentUrl(). This also adds triggerForUrl to trigger a route for any arbitrary URL.\r\n\r\n3rd try's a charm, right?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/515",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/515/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/515/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/515/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/515",
    "id": 1312586,
    "number": 515,
    "title": "{id: \"\"} will make model.isNew() return true (instead of false)",
    "user": {
      "login": "mbriggs",
      "id": 89260,
      "avatar_url": "https://avatars.githubusercontent.com/u/89260?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mbriggs",
      "html_url": "https://github.com/mbriggs",
      "followers_url": "https://api.github.com/users/mbriggs/followers",
      "following_url": "https://api.github.com/users/mbriggs/following{/other_user}",
      "gists_url": "https://api.github.com/users/mbriggs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mbriggs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mbriggs/subscriptions",
      "organizations_url": "https://api.github.com/users/mbriggs/orgs",
      "repos_url": "https://api.github.com/users/mbriggs/repos",
      "events_url": "https://api.github.com/users/mbriggs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mbriggs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2011-07-29T20:51:16Z",
    "updated_at": "2012-01-23T17:59:29Z",
    "closed_at": "2012-01-23T15:40:34Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/515",
      "html_url": "https://github.com/jashkenas/backbone/pull/515",
      "diff_url": "https://github.com/jashkenas/backbone/pull/515.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/515.patch"
    },
    "body": "Ran into a situation where I was pulling model attributes from a serialized form, and found that if you instanciate a model off of {id: \"\"}, isNew() will return false. My workaround code right now is something like `if (attrs.id) delete attrs.id` which is pretty nasty, and I would love to remove it \r\n\r\nLove the framework, and am really excited to see where things end up :)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/505",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/505/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/505/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/505/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/505",
    "id": 1287879,
    "number": 505,
    "title": "push, pop and maybe maxSize?",
    "user": {
      "login": "marianoguerra",
      "id": 68463,
      "avatar_url": "https://avatars.githubusercontent.com/u/68463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marianoguerra",
      "html_url": "https://github.com/marianoguerra",
      "followers_url": "https://api.github.com/users/marianoguerra/followers",
      "following_url": "https://api.github.com/users/marianoguerra/following{/other_user}",
      "gists_url": "https://api.github.com/users/marianoguerra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marianoguerra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marianoguerra/subscriptions",
      "organizations_url": "https://api.github.com/users/marianoguerra/orgs",
      "repos_url": "https://api.github.com/users/marianoguerra/repos",
      "events_url": "https://api.github.com/users/marianoguerra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marianoguerra/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2011-07-26T10:40:00Z",
    "updated_at": "2012-02-08T22:07:17Z",
    "closed_at": "2012-02-08T21:59:19Z",
    "body": "hi, I'm using collections to store events that come from the server so widgets subscribe to de add event to be notified when new events arrive.\r\n\r\nthe thing is that after some time the old events are no longer needed so I would like to have some kind of circular buffer or a list with a maximum size that when the collection reaches that size the last element is droped.\r\n\r\nI was looking at the api of collection and it doesn't seem to make it easy to fetch and remove elements by index, is there an easier way to do collection.remove(collection.at(collection.length - 1)) ?\r\n\r\npush would be collection.add(item, {at: 0})\r\n\r\nI think push and pop would make for a cleaner and easier to understand api, if I make the patch, would it be accepted?\r\n\r\nthe other possible patch is the maxSize one but it's different from the last one and one can be implemented without the other.\r\n\r\nother thing, the documentation doesn't specify if add by default adds at the end or at the beggining."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/494",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/494/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/494/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/494/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/494",
    "id": 1266242,
    "number": 494,
    "title": "Add beforeroute event to Backbone.Route",
    "user": {
      "login": "shesek",
      "id": 877904,
      "avatar_url": "https://avatars.githubusercontent.com/u/877904?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shesek",
      "html_url": "https://github.com/shesek",
      "followers_url": "https://api.github.com/users/shesek/followers",
      "following_url": "https://api.github.com/users/shesek/following{/other_user}",
      "gists_url": "https://api.github.com/users/shesek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shesek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shesek/subscriptions",
      "organizations_url": "https://api.github.com/users/shesek/orgs",
      "repos_url": "https://api.github.com/users/shesek/repos",
      "events_url": "https://api.github.com/users/shesek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shesek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2011-07-21T21:58:43Z",
    "updated_at": "2014-08-31T14:05:35Z",
    "closed_at": "2012-01-23T15:53:55Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/494",
      "html_url": "https://github.com/jashkenas/backbone/pull/494",
      "diff_url": "https://github.com/jashkenas/backbone/pull/494.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/494.patch"
    },
    "body": "In some cases its useful to execute some code before executing a route. In my case, I was using Backbone with jQuery Mobile and wanted to show the loading message before a route execute, and let the route be responsible for hiding it (```router.bind('all', function(ev) {ev.indexOf('beforeroute:') === 0 && $.mobile.showPageLoadingMsg();});```), but I assume there are other use cases for making preparations to the page before executing a route.\r\n\r\nAnother possible place to do that could be a new event at Backbone.History.prototype.loadUrl, but than you won't get any information about the route being executed.\r\n\r\nIf anyone is interested, here's the monkey patch version of this change:\r\n\r\n```javascript\r\n(function(rp) {\r\n\tvar _route = rp.route;\r\n\trp.route = function(route, name, callback) {\r\n\t\treturn _route.call(this, route, name, function() {\r\n\t\t\tthis.trigger.apply(this, ['beforeroute:' + name].concat(_.toArray(arguments)));\r\n\t\t\tcallback.apply(this, arguments);\r\n\t\t});\r\n\t};\r\n})(Backbone.Router.prototype);\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/493",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/493/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/493/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/493/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/493",
    "id": 1265764,
    "number": 493,
    "title": "Success callback for Model set function",
    "user": {
      "login": "marcalj",
      "id": 63667,
      "avatar_url": "https://avatars.githubusercontent.com/u/63667?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcalj",
      "html_url": "https://github.com/marcalj",
      "followers_url": "https://api.github.com/users/marcalj/followers",
      "following_url": "https://api.github.com/users/marcalj/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcalj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcalj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcalj/subscriptions",
      "organizations_url": "https://api.github.com/users/marcalj/orgs",
      "repos_url": "https://api.github.com/users/marcalj/repos",
      "events_url": "https://api.github.com/users/marcalj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcalj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-07-21T20:47:29Z",
    "updated_at": "2012-01-23T18:34:13Z",
    "closed_at": "2012-01-23T15:54:40Z",
    "body": "I'm using a jQuery dialog to show a form to modify a temporary model.\r\n\r\nSo if set is success I can close the dialog, and if there's some error in validation I can show the errors without closing the dialog.\r\n\r\nThanks."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/477",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/477/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/477/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/477/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/477",
    "id": 1218862,
    "number": 477,
    "title": "Backbone Model's should have loading, loaded, and error events",
    "user": {
      "login": "BradNeuberg",
      "id": 148433,
      "avatar_url": "https://avatars.githubusercontent.com/u/148433?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BradNeuberg",
      "html_url": "https://github.com/BradNeuberg",
      "followers_url": "https://api.github.com/users/BradNeuberg/followers",
      "following_url": "https://api.github.com/users/BradNeuberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/BradNeuberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BradNeuberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BradNeuberg/subscriptions",
      "organizations_url": "https://api.github.com/users/BradNeuberg/orgs",
      "repos_url": "https://api.github.com/users/BradNeuberg/repos",
      "events_url": "https://api.github.com/users/BradNeuberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BradNeuberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-07-13T22:19:22Z",
    "updated_at": "2013-12-20T01:57:39Z",
    "closed_at": "2012-01-23T16:31:44Z",
    "body": "In a project I'm working on using Backbone Model's I've found it extremely useful to trigger 'loading' at the start of fetching a model's data (so that a view could tell the user that network activity is happening, for example); firing 'loaded' so that parts of the system that need to work once the data is available can continue (rather than using the standard Backbone callbacks, which are less Backbone-y in a sense since Backbone events are easier to bind aspects of the system together); and an 'error' Backbone event if an error occurs. I think it would be useful for Backbone to bake these events into the standard Model superclass."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/471",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/471/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/471/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/471/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/471",
    "id": 1192623,
    "number": 471,
    "title": "Allow bind and unbind methods to take 'this' instance",
    "user": {
      "login": "BradNeuberg",
      "id": 148433,
      "avatar_url": "https://avatars.githubusercontent.com/u/148433?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BradNeuberg",
      "html_url": "https://github.com/BradNeuberg",
      "followers_url": "https://api.github.com/users/BradNeuberg/followers",
      "following_url": "https://api.github.com/users/BradNeuberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/BradNeuberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BradNeuberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BradNeuberg/subscriptions",
      "organizations_url": "https://api.github.com/users/BradNeuberg/orgs",
      "repos_url": "https://api.github.com/users/BradNeuberg/repos",
      "events_url": "https://api.github.com/users/BradNeuberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BradNeuberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-07-08T21:08:48Z",
    "updated_at": "2012-01-23T16:49:57Z",
    "closed_at": "2012-01-23T16:49:57Z",
    "body": "A common pattern is to have a view that binds to a model; when the view is removed it should clean up its listeners using unbind. One problem with the current way Backbone does things is that you have to do something like this to handle things (pseudocode):\r\n\r\nMy view class:\r\n\r\ninitialize: function(){\r\n   this.changeListener_ = this.render.bind(this);\r\n   this.model.bind('change:revision', this.changeListener_);\r\n},\r\n\r\nrender: function(){\r\n  // ...\r\n},\r\n\r\nremove: function(){\r\n   this.model.unbind('change:revision', this.changeListener_);\r\n}\r\n\r\n----\r\n\r\nMost of the time you want to bind your Backbone listeners to an instance. However, in order to safely unbind them you have to keep an instance variable around for them to truly unbind them. This gets gross and leads to code clutter.\r\n\r\nIf the bind and unbind methods allowed an optional instance variable as their third argument, this goes away and the code becomes much cleaner (pseudocode):\r\n\r\nMy view class:\r\n\r\ninitialize: function(){\r\n   this.model.bind('change:revision', this.render, this);\r\n},\r\n\r\nrender: function(){\r\n  // ...\r\n},\r\n\r\nremove: function(){\r\n   this.model.unbind('change:revision', this.render, this);\r\n}\r\n\r\n-----\r\n\r\nNow there is enough context to unbind 'change:revision' for this.render bound to the 'this' variable. When Backbone makes the call it can simply do an apply and pass in the optional third argument.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/446",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/446/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/446/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/446/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/446",
    "id": 1137548,
    "number": 446,
    "title": "Update support for collections.",
    "user": {
      "login": "dalyons",
      "id": 43060,
      "avatar_url": "https://avatars.githubusercontent.com/u/43060?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalyons",
      "html_url": "https://github.com/dalyons",
      "followers_url": "https://api.github.com/users/dalyons/followers",
      "following_url": "https://api.github.com/users/dalyons/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalyons/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalyons/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalyons/subscriptions",
      "organizations_url": "https://api.github.com/users/dalyons/orgs",
      "repos_url": "https://api.github.com/users/dalyons/repos",
      "events_url": "https://api.github.com/users/dalyons/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalyons/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 25,
    "created_at": "2011-06-29T13:00:16Z",
    "updated_at": "2012-10-11T14:55:50Z",
    "closed_at": "2012-01-23T17:16:28Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/446",
      "html_url": "https://github.com/jashkenas/backbone/pull/446",
      "diff_url": "https://github.com/jashkenas/backbone/pull/446.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/446.patch"
    },
    "body": "\r\nThis pull request resolves the issue described here:\r\nhttps://github.com/documentcloud/backbone/issues/137\r\n\r\nIt adds in-place updating support for collections, which is the ability to refresh the contents of a collection without creating new model instances for models that already exist client-side.\r\n\r\nThe use case is something like this: \r\n- I have a collection representing a list of bookings. \r\n- I have a view bound to each booking in the collection.\r\n- I can edit bookings, other people can add/edit bookings.\r\n- I want to be able to fetch the current bookings from the server, and update my screen without having to recreate/rebind all my views for existing bookings.\r\n- I want to leverage all of the usual backbone mechanisims, for example when an attribute of a booking is changed in the most recent fetch(), it will update & trigger a change event for the booking model I already have clientside & bound to my views.\r\n\r\nIt works well for us. I think some flavour of this mechanism would be very useful to include in backbone, even if you think this initial implementation isn't quite right from an API pov.\r\n\r\nLet me know what you think!\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/426",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/426/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/426/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/426/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/426",
    "id": 1073103,
    "number": 426,
    "title": "Better error message when method for bind are not defined",
    "user": {
      "login": "bradphelan",
      "id": 17650,
      "avatar_url": "https://avatars.githubusercontent.com/u/17650?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bradphelan",
      "html_url": "https://github.com/bradphelan",
      "followers_url": "https://api.github.com/users/bradphelan/followers",
      "following_url": "https://api.github.com/users/bradphelan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bradphelan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradphelan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradphelan/subscriptions",
      "organizations_url": "https://api.github.com/users/bradphelan/orgs",
      "repos_url": "https://api.github.com/users/bradphelan/repos",
      "events_url": "https://api.github.com/users/bradphelan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradphelan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-06-17T11:55:06Z",
    "updated_at": "2011-06-30T01:33:19Z",
    "closed_at": "2011-06-30T01:33:19Z",
    "body": "if I have\r\n\r\n````\r\nevents:\r\n   \"click .button\" : \"doButton\"\r\n````\r\n\r\nbut forget to define button then the error message is\r\n\r\nUncaught TypeError: Cannot read property 'bind' of undefined\r\n\r\nAfter being caught by this a number of times I now know what to look for but newbies will get stumped by it. I suggest either\r\n\r\n(a) bound methods have a default no-op response\r\n(b) an error message such as \"doButton is not defined on class but is referenced in events\"\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/423",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/423/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/423/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/423/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/423",
    "id": 1063842,
    "number": 423,
    "title": "New fetch/save callback: complete()",
    "user": {
      "login": "arturadib",
      "id": 741528,
      "avatar_url": "https://avatars.githubusercontent.com/u/741528?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arturadib",
      "html_url": "https://github.com/arturadib",
      "followers_url": "https://api.github.com/users/arturadib/followers",
      "following_url": "https://api.github.com/users/arturadib/following{/other_user}",
      "gists_url": "https://api.github.com/users/arturadib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arturadib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arturadib/subscriptions",
      "organizations_url": "https://api.github.com/users/arturadib/orgs",
      "repos_url": "https://api.github.com/users/arturadib/repos",
      "events_url": "https://api.github.com/users/arturadib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arturadib/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-06-15T20:50:07Z",
    "updated_at": "2014-06-20T06:07:43Z",
    "closed_at": "2011-06-30T01:45:34Z",
    "body": "In addition to success() and error(), it'd be very useful to have a complete() callback for server-side requests, much like in jQuery's $.ajax() function. This callback is called after the server response, whether or not there was an error.\r\n\r\nOne typical application is an Ajax loading icon that is displayed before a request goes out, and hidden when the request is complete (whether or not it was successful)."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/421",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/421/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/421/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/421/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/421",
    "id": 1060083,
    "number": 421,
    "title": "Log a sensible warning if dependencies are unavailable",
    "user": {
      "login": "DanielHeath",
      "id": 47430,
      "avatar_url": "https://avatars.githubusercontent.com/u/47430?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanielHeath",
      "html_url": "https://github.com/DanielHeath",
      "followers_url": "https://api.github.com/users/DanielHeath/followers",
      "following_url": "https://api.github.com/users/DanielHeath/following{/other_user}",
      "gists_url": "https://api.github.com/users/DanielHeath/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DanielHeath/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DanielHeath/subscriptions",
      "organizations_url": "https://api.github.com/users/DanielHeath/orgs",
      "repos_url": "https://api.github.com/users/DanielHeath/repos",
      "events_url": "https://api.github.com/users/DanielHeath/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DanielHeath/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-06-15T09:16:18Z",
    "updated_at": "2011-06-30T03:26:05Z",
    "closed_at": "2011-06-30T01:50:53Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/421",
      "html_url": "https://github.com/jashkenas/backbone/pull/421",
      "diff_url": "https://github.com/jashkenas/backbone/pull/421.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/421.patch"
    },
    "body": "A little patch that makes it easier to tell what happened if backbone fails to load."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/419",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/419/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/419/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/419/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/419",
    "id": 1058398,
    "number": 419,
    "title": "Global routing event would be useful",
    "user": {
      "login": "kpdecker",
      "id": 196390,
      "avatar_url": "https://avatars.githubusercontent.com/u/196390?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kpdecker",
      "html_url": "https://github.com/kpdecker",
      "followers_url": "https://api.github.com/users/kpdecker/followers",
      "following_url": "https://api.github.com/users/kpdecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/kpdecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kpdecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kpdecker/subscriptions",
      "organizations_url": "https://api.github.com/users/kpdecker/orgs",
      "repos_url": "https://api.github.com/users/kpdecker/repos",
      "events_url": "https://api.github.com/users/kpdecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kpdecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2011-06-14T23:47:54Z",
    "updated_at": "2012-01-13T18:47:55Z",
    "closed_at": "2012-01-13T18:47:55Z",
    "body": "As far as I can tell there is no generic mechanism to receive an event when any routing changes occur.\r\n\r\nThe ability to do something like:\r\nBackbone.history.bind(\"route\", function....\r\nwould make quite a few things easier to manager when dealing with multiple controller objects."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/412",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/412/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/412/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/412/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/412",
    "id": 1052010,
    "number": 412,
    "title": "jquery style binding additional data",
    "user": {
      "login": "hcliff",
      "id": 481457,
      "avatar_url": "https://avatars.githubusercontent.com/u/481457?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hcliff",
      "html_url": "https://github.com/hcliff",
      "followers_url": "https://api.github.com/users/hcliff/followers",
      "following_url": "https://api.github.com/users/hcliff/following{/other_user}",
      "gists_url": "https://api.github.com/users/hcliff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hcliff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hcliff/subscriptions",
      "organizations_url": "https://api.github.com/users/hcliff/orgs",
      "repos_url": "https://api.github.com/users/hcliff/repos",
      "events_url": "https://api.github.com/users/hcliff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hcliff/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-06-13T22:49:40Z",
    "updated_at": "2011-06-30T02:22:00Z",
    "closed_at": "2011-06-30T02:22:00Z",
    "body": "Hey, I recently needed to push extra data like jquery does with bind, so I wrote this:\r\n\r\n```javascript\r\nbind : function(ev, data, callback) {\r\n    \r\n\t  if ( arguments.length === 2 || data === false ) {\r\n\t\tcallback = data;\r\n\t\tdata = undefined;\r\n\t  } \r\n    \r\n      var calls = this._callbacks || (this._callbacks = {});\r\n      var list  = this._callbacks[ev] || (this._callbacks[ev] = []);\r\n      list.push([callback, data]);\r\n      return this;\r\n    },\r\n```\r\n\r\n```javascript\r\ntrigger : function(eventName) {\r\n      var list, calls, ev, callback, args, i, l;\r\n      var both = 2;\r\n      if (!(calls = this._callbacks)) return this;\r\n      while (both--) {\r\n        ev = both ? eventName : 'all';\r\n        if (list = calls[ev]) {\r\n          for (i = 0, l = list.length; i < l; i++) {\r\n            // remember callback is first part of array\r\n            if (!(callback = list[i][0])) {\r\n              list.splice(i, 1); i--; l--;\r\n            } else {\r\n              args = both ? Array.prototype.slice.call(arguments, 1) : arguments;\r\n             // add the additional data to our arguments array\r\n\t      args.push(list[i][1]);\r\n              callback.apply(this, args);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return this;\r\n    }\r\n```\r\n\r\nusage is:\r\n\r\n```javascript\r\nthis.bind('foo', {extraData: 'right here!'}, this.extra);\r\nthis.trigger('foo', 'standard argument');\r\n\r\nextra : function(standard, extra){\r\n\tconsole.log(standard,extra);\r\n}\r\n```\r\n\r\nThis is a small modification and it shouldn't break anyone's code.\r\nGoing to bug test it some more to be sure, but hope you all like it!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/400",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/400/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/400/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/400/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/400",
    "id": 1033401,
    "number": 400,
    "title": "Added Backbone.View[0] for jQuery/Zepto integration",
    "user": {
      "login": "eastridge",
      "id": 30921,
      "avatar_url": "https://avatars.githubusercontent.com/u/30921?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eastridge",
      "html_url": "https://github.com/eastridge",
      "followers_url": "https://api.github.com/users/eastridge/followers",
      "following_url": "https://api.github.com/users/eastridge/following{/other_user}",
      "gists_url": "https://api.github.com/users/eastridge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eastridge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eastridge/subscriptions",
      "organizations_url": "https://api.github.com/users/eastridge/orgs",
      "repos_url": "https://api.github.com/users/eastridge/repos",
      "events_url": "https://api.github.com/users/eastridge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eastridge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-06-09T23:28:32Z",
    "updated_at": "2011-07-05T13:20:36Z",
    "closed_at": "2011-07-05T13:20:36Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/400",
      "html_url": "https://github.com/jashkenas/backbone/pull/400",
      "diff_url": "https://github.com/jashkenas/backbone/pull/400.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/400.patch"
    },
    "body": "this[0] mirrors this.el inside a Backbone.View class. Allows for Backbone.View instances to be passed directly to jQuery / Zepto:\r\n\r\n  var MyView = new Backbone.View;\r\n  $(MyView).click(...);"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/387",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/387/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/387/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/387/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/387",
    "id": 983775,
    "number": 387,
    "title": "Added History::matchUrl",
    "user": {
      "login": "yuchi",
      "id": 646609,
      "avatar_url": "https://avatars.githubusercontent.com/u/646609?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuchi",
      "html_url": "https://github.com/yuchi",
      "followers_url": "https://api.github.com/users/yuchi/followers",
      "following_url": "https://api.github.com/users/yuchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuchi/subscriptions",
      "organizations_url": "https://api.github.com/users/yuchi/orgs",
      "repos_url": "https://api.github.com/users/yuchi/repos",
      "events_url": "https://api.github.com/users/yuchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-06-01T10:25:06Z",
    "updated_at": "2011-07-05T13:31:08Z",
    "closed_at": "2011-07-05T13:31:08Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/387",
      "html_url": "https://github.com/jashkenas/backbone/pull/387",
      "diff_url": "https://github.com/jashkenas/backbone/pull/387.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/387.patch"
    },
    "body": "Added Backbone.History::matchUrl to only test if a url matches any routes. Useful when testing a url before sending it to Router::setLocation.\r\nModified annotation on ::loadUrl."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/374",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/374/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/374/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/374/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/374",
    "id": 964802,
    "number": 374,
    "title": "Give Spine.js a Good Read-through.",
    "user": {
      "login": "jashkenas",
      "id": 4732,
      "avatar_url": "https://avatars.githubusercontent.com/u/4732?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jashkenas",
      "html_url": "https://github.com/jashkenas",
      "followers_url": "https://api.github.com/users/jashkenas/followers",
      "following_url": "https://api.github.com/users/jashkenas/following{/other_user}",
      "gists_url": "https://api.github.com/users/jashkenas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jashkenas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jashkenas/subscriptions",
      "organizations_url": "https://api.github.com/users/jashkenas/orgs",
      "repos_url": "https://api.github.com/users/jashkenas/repos",
      "events_url": "https://api.github.com/users/jashkenas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jashkenas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2011-05-27T14:37:45Z",
    "updated_at": "2011-11-09T16:45:22Z",
    "closed_at": "2011-07-05T13:21:46Z",
    "body": "As @maccman and I have discussed, it would be great for projects like Backbone and Spine to learn from one another. Before 0.5.0 is released, we should give the Spine.js codebase a good read-through for interesting ideas."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/363",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/363/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/363/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/363/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/363",
    "id": 934481,
    "number": 363,
    "title": "The call to delegateEvents() in Backbone.View's constructor can introduce unnecessary performance penalty",
    "user": {
      "login": "edruder",
      "id": 3007,
      "avatar_url": "https://avatars.githubusercontent.com/u/3007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/edruder",
      "html_url": "https://github.com/edruder",
      "followers_url": "https://api.github.com/users/edruder/followers",
      "following_url": "https://api.github.com/users/edruder/following{/other_user}",
      "gists_url": "https://api.github.com/users/edruder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/edruder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/edruder/subscriptions",
      "organizations_url": "https://api.github.com/users/edruder/orgs",
      "repos_url": "https://api.github.com/users/edruder/repos",
      "events_url": "https://api.github.com/users/edruder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/edruder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2011-05-21T00:24:26Z",
    "updated_at": "2011-05-29T14:30:33Z",
    "closed_at": "2011-05-23T14:33:58Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/363",
      "html_url": "https://github.com/jashkenas/backbone/pull/363",
      "diff_url": "https://github.com/jashkenas/backbone/pull/363.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/363.patch"
    },
    "body": "TWIMC:\r\n\r\nWhile investigating performance problems in our Backbone views, the profiler showed us that the call to `delegateEvents()` in the `Backbone.View` constructor was responsible for several seconds of the time to render the view.\r\n\r\nWe attach 6 events to each of 75 views (in the case that we profiled). The `Backbone.View` constructor ends up calling the guts of `delegateEvents()` 450 times on the default DOM element that Backbone creates to back the view. Later, we attach the view to an actual, dynamically-created DOM element and call `delegateEvents()`, making the same 450 calls hooking up the events to the correct element. The first `delegateEvents()` is wasted time.\r\n\r\nOur solution is simple, if heavy-handed--we added a boolean option (`skipDelegateEvents`) to the constructor to skip the call to `delegateEvents()`. If you are attaching a number of events to a large number of views, and you're late-binding `this.el`, you'd set the option to `true`.\r\n\r\nWe included tests covering the feature. Let us know if you have any questions about this patch!\r\n\r\nThanks!\r\n\r\nEd Ruder"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/362",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/362/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/362/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/362/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/362",
    "id": 928355,
    "number": 362,
    "title": "before_save, after_save events for models",
    "user": {
      "login": "janmonschke",
      "id": 68591,
      "avatar_url": "https://avatars.githubusercontent.com/u/68591?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/janmonschke",
      "html_url": "https://github.com/janmonschke",
      "followers_url": "https://api.github.com/users/janmonschke/followers",
      "following_url": "https://api.github.com/users/janmonschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/janmonschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/janmonschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/janmonschke/subscriptions",
      "organizations_url": "https://api.github.com/users/janmonschke/orgs",
      "repos_url": "https://api.github.com/users/janmonschke/repos",
      "events_url": "https://api.github.com/users/janmonschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/janmonschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-05-19T18:17:15Z",
    "updated_at": "2011-05-26T17:56:26Z",
    "closed_at": "2011-05-26T17:56:26Z",
    "body": "Is it planned (or already implemented) to provide the models with \"before_save\" and \"after_save\" events?\r\nI'm aware of the validation functions but they don't fit my needs.\r\nIf there's nothing like that, would you accept pull requests with that functionality?\r\n\r\n/Jan"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/337",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/337/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/337/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/337/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/337",
    "id": 813919,
    "number": 337,
    "title": "Throw an exception when server response is clearly wrong",
    "user": {
      "login": "norm2782",
      "id": 19933,
      "avatar_url": "https://avatars.githubusercontent.com/u/19933?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/norm2782",
      "html_url": "https://github.com/norm2782",
      "followers_url": "https://api.github.com/users/norm2782/followers",
      "following_url": "https://api.github.com/users/norm2782/following{/other_user}",
      "gists_url": "https://api.github.com/users/norm2782/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/norm2782/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/norm2782/subscriptions",
      "organizations_url": "https://api.github.com/users/norm2782/orgs",
      "repos_url": "https://api.github.com/users/norm2782/repos",
      "events_url": "https://api.github.com/users/norm2782/events{/privacy}",
      "received_events_url": "https://api.github.com/users/norm2782/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-04-26T09:52:15Z",
    "updated_at": "2011-05-26T19:37:52Z",
    "closed_at": "2011-05-26T19:15:44Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/337",
      "html_url": "https://github.com/jashkenas/backbone/pull/337",
      "diff_url": "https://github.com/jashkenas/backbone/pull/337.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/337.patch"
    },
    "body": "This patch throws an exception when the response from the server cannot be processed correctly. It affects Model.save() and Model.fetch().\r\nThese functions grab the server response and pass it to the model (by default) directly. If the response is not an object, the code in Model.set() will crash with an obscure error and without a very helpful stacktrace. Since in this case the application will crash one way or another, this patch opts to throw an exception with meaningful information instead, making it significantly easier for the developer to identify and resolve the issue."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/325",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/325/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/325/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/325/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/325",
    "id": 786363,
    "number": 325,
    "title": "Preprocessing model attributes on set()",
    "user": {
      "login": "tauren",
      "id": 282084,
      "avatar_url": "https://avatars.githubusercontent.com/u/282084?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tauren",
      "html_url": "https://github.com/tauren",
      "followers_url": "https://api.github.com/users/tauren/followers",
      "following_url": "https://api.github.com/users/tauren/following{/other_user}",
      "gists_url": "https://api.github.com/users/tauren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tauren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tauren/subscriptions",
      "organizations_url": "https://api.github.com/users/tauren/orgs",
      "repos_url": "https://api.github.com/users/tauren/repos",
      "events_url": "https://api.github.com/users/tauren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tauren/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-04-18T22:27:41Z",
    "updated_at": "2011-04-19T20:24:17Z",
    "closed_at": "2011-04-19T14:07:09Z",
    "body": "I've found that there are some common things I often need to do to attributes that are entered by a user before saving them to a Model. For instance, if an attribute is a string, I trim() whitespace around it.\n\nCurrently, I'm doing this before calling model.set(). But doing so adds clutter to my view code. So I've thought about creating a BaseModel that overrides set(). This would obviously work, but it means that my BaseModel.set() will loop through all attributes being set, and then Model.set() will loop through them again.\n\nIt occurs to me that Backbone models could quite easily preprocess values before setting an attribute. A preprocessor function could be added to the model or to the options passed to set().  So for instance:\n\n    var UserModel = Backbone.Model.extend({\n      preprocessAttribute: function(attr) {\n        return _.isString(attr) ? $.trim(attr) : attr;\n      }\n    });\n\nAlternatively, the preprocess function could be passed in the options to set():\n\n    user.set({name: \"   nameWithWhitespace   \"},{preprocessAttribute: function(attr) {return attr;}});\n\nThis could be accomplished with very little change to backbone.js. A simple change to line 211 (as of 4/18/2011) is all that it would take:  \nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L211\n\n    set : function(attrs, options) {\n\n      // ...\n\n          // Line 211 currently is: \n          // now[attr] = val;\n\n          // Change line 211 to:\n          now[attr] = options.preprocessAttribute ? options.preprocessAttribute(val) : \n            (this.preprocessAttribute ? this.preprocessAttribute(val) : val);\n\n      // ...\n\n    },\n\nThe function name `preprocessAttribute` is a bit long and cumbersome, so some other name might be better. I'm sure there are many more uses for this than just trimming whitespace. \n\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/322",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/322/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/322/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/322/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/322",
    "id": 774972,
    "number": 322,
    "title": "support for ender.js",
    "user": {
      "login": "dvv",
      "id": 211335,
      "avatar_url": "https://avatars.githubusercontent.com/u/211335?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvv",
      "html_url": "https://github.com/dvv",
      "followers_url": "https://api.github.com/users/dvv/followers",
      "following_url": "https://api.github.com/users/dvv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvv/subscriptions",
      "organizations_url": "https://api.github.com/users/dvv/orgs",
      "repos_url": "https://api.github.com/users/dvv/repos",
      "events_url": "https://api.github.com/users/dvv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 12,
    "created_at": "2011-04-15T17:25:50Z",
    "updated_at": "2012-01-06T00:26:05Z",
    "closed_at": "2011-04-18T13:35:03Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/322",
      "html_url": "https://github.com/jashkenas/backbone/pull/322",
      "diff_url": "https://github.com/jashkenas/backbone/pull/322.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/322.patch"
    },
    "body": "Please, consider applying.\r\nTIA,\r\n--Vladimir"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/318",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/318/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/318/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/318/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/318",
    "id": 767648,
    "number": 318,
    "title": "Convenient syntax for binding to key events",
    "user": {
      "login": "nealstewart",
      "id": 167763,
      "avatar_url": "https://avatars.githubusercontent.com/u/167763?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nealstewart",
      "html_url": "https://github.com/nealstewart",
      "followers_url": "https://api.github.com/users/nealstewart/followers",
      "following_url": "https://api.github.com/users/nealstewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/nealstewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nealstewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nealstewart/subscriptions",
      "organizations_url": "https://api.github.com/users/nealstewart/orgs",
      "repos_url": "https://api.github.com/users/nealstewart/repos",
      "events_url": "https://api.github.com/users/nealstewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nealstewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-04-14T05:41:16Z",
    "updated_at": "2011-04-18T15:13:00Z",
    "closed_at": "2011-04-18T15:13:00Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/318",
      "html_url": "https://github.com/jashkenas/backbone/pull/318",
      "diff_url": "https://github.com/jashkenas/backbone/pull/318.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/318.patch"
    },
    "body": "I believe this syntax will make tracking and maintaining key events much easier."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/317",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/317/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/317/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/317/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/317",
    "id": 764702,
    "number": 317,
    "title": "triggering location change in controllers",
    "user": {
      "login": "kof",
      "id": 52824,
      "avatar_url": "https://avatars.githubusercontent.com/u/52824?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kof",
      "html_url": "https://github.com/kof",
      "followers_url": "https://api.github.com/users/kof/followers",
      "following_url": "https://api.github.com/users/kof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kof/subscriptions",
      "organizations_url": "https://api.github.com/users/kof/orgs",
      "repos_url": "https://api.github.com/users/kof/repos",
      "events_url": "https://api.github.com/users/kof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kof/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/jashkenas/backbone/milestones/2",
      "labels_url": "https://api.github.com/repos/jashkenas/backbone/milestones/2/labels",
      "id": 4073,
      "number": 2,
      "title": "pushState, replaceState support.",
      "description": "",
      "creator": {
        "login": "jashkenas",
        "id": 4732,
        "avatar_url": "https://avatars.githubusercontent.com/u/4732?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jashkenas",
        "html_url": "https://github.com/jashkenas",
        "followers_url": "https://api.github.com/users/jashkenas/followers",
        "following_url": "https://api.github.com/users/jashkenas/following{/other_user}",
        "gists_url": "https://api.github.com/users/jashkenas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jashkenas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jashkenas/subscriptions",
        "organizations_url": "https://api.github.com/users/jashkenas/orgs",
        "repos_url": "https://api.github.com/users/jashkenas/repos",
        "events_url": "https://api.github.com/users/jashkenas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jashkenas/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 2,
      "state": "closed",
      "created_at": "2011-04-18T15:27:03Z",
      "updated_at": "2013-02-14T23:18:34Z",
      "due_on": null,
      "closed_at": "2011-05-26T18:12:09Z"
    },
    "comments": 2,
    "created_at": "2011-04-13T15:54:04Z",
    "updated_at": "2011-05-26T18:12:09Z",
    "closed_at": "2011-05-26T18:12:09Z",
    "body": "Hi,\n\nI want to be able to trigger a location change without to use location.hash directly. Because I don't want to stuck in hash bangs when pushstate support is done #173.\n\nTo clarify what I mean here an example:\n\n\n\t\n\t<button class=\"action\">Do it</button>\n\t\n\tvar Controller = Backbone.Controller.extend({\n\t\troutes: {\n\t\t\t'/action/:name': 'action'    \n\t\t},\n\t\t\n\t\taction: function() {\n\t\t\talert('done');\n\t\t}\n\t})\n\t\n\tvar controller = new Controller();\n\t\n\tvar View = Backbone.View.extend({\n\t\tevents: {\n\t\t\t'click .action': 'action'\n\t\t},\n\t\t\n\t\taction: function() {\n\t\t\tcontroller.changeLocation('/action/done');\t\n\t\t}\n\t})\n\n\ncontroller.changeLocation is something what I am missing right now, it should change the url using location.hash or pushState, call a propper controller action and trigger the route event.\n\nOleg"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/307",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/307/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/307/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/307/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/307",
    "id": 734021,
    "number": 307,
    "title": "Backbone.baseUrl and Backbone.JSONP added.",
    "user": {
      "login": "japetheape",
      "id": 20259,
      "avatar_url": "https://avatars.githubusercontent.com/u/20259?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/japetheape",
      "html_url": "https://github.com/japetheape",
      "followers_url": "https://api.github.com/users/japetheape/followers",
      "following_url": "https://api.github.com/users/japetheape/following{/other_user}",
      "gists_url": "https://api.github.com/users/japetheape/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/japetheape/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/japetheape/subscriptions",
      "organizations_url": "https://api.github.com/users/japetheape/orgs",
      "repos_url": "https://api.github.com/users/japetheape/repos",
      "events_url": "https://api.github.com/users/japetheape/events{/privacy}",
      "received_events_url": "https://api.github.com/users/japetheape/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-04-05T13:13:22Z",
    "updated_at": "2011-07-28T19:51:49Z",
    "closed_at": "2011-04-18T18:11:21Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/307",
      "html_url": "https://github.com/jashkenas/backbone/pull/307",
      "diff_url": "https://github.com/jashkenas/backbone/pull/307.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/307.patch"
    },
    "body": "Backbone.baseUrl\r\nI added a Backbone.baseUrl option. This let's a user set relative urls on their models and use the baseUrl to set the baseUrl. Use it like this: Backbone.baseUrl = 'http://documentcloud.github.com';\r\n\r\nBackbone.JSONP\r\nI also added a Backbone.JSONP option because most of the times loading remote resources requires a JSONP approach. Use it like this: Backbone.useJSONP = true;\r\n\r\nI added tests and added these options in the documentation. Check it out.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/299",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/299/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/299/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/299/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/299",
    "id": 718516,
    "number": 299,
    "title": "Before Filter / After Filter on Backbone.Controller",
    "user": {
      "login": "datapimp",
      "id": 42960,
      "avatar_url": "https://avatars.githubusercontent.com/u/42960?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapimp",
      "html_url": "https://github.com/datapimp",
      "followers_url": "https://api.github.com/users/datapimp/followers",
      "following_url": "https://api.github.com/users/datapimp/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapimp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapimp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapimp/subscriptions",
      "organizations_url": "https://api.github.com/users/datapimp/orgs",
      "repos_url": "https://api.github.com/users/datapimp/repos",
      "events_url": "https://api.github.com/users/datapimp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapimp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 17,
    "created_at": "2011-03-30T17:58:57Z",
    "updated_at": "2014-01-09T06:45:42Z",
    "closed_at": "2011-04-18T18:24:48Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/299",
      "html_url": "https://github.com/jashkenas/backbone/pull/299",
      "diff_url": "https://github.com/jashkenas/backbone/pull/299.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/299.patch"
    },
    "body": "added before filter, after filter, tests, and documentation for Backbone.Controller"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/289",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/289/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/289/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/289/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/289",
    "id": 694492,
    "number": 289,
    "title": "Add support for jQuery.Deferred on ajax calls",
    "user": {
      "login": "PaulUithol",
      "id": 670670,
      "avatar_url": "https://avatars.githubusercontent.com/u/670670?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PaulUithol",
      "html_url": "https://github.com/PaulUithol",
      "followers_url": "https://api.github.com/users/PaulUithol/followers",
      "following_url": "https://api.github.com/users/PaulUithol/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulUithol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PaulUithol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulUithol/subscriptions",
      "organizations_url": "https://api.github.com/users/PaulUithol/orgs",
      "repos_url": "https://api.github.com/users/PaulUithol/repos",
      "events_url": "https://api.github.com/users/PaulUithol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PaulUithol/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2011-03-22T17:00:22Z",
    "updated_at": "2011-04-18T21:11:22Z",
    "closed_at": "2011-04-18T21:11:22Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/289",
      "html_url": "https://github.com/jashkenas/backbone/pull/289",
      "diff_url": "https://github.com/jashkenas/backbone/pull/289.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/289.patch"
    },
    "body": "Deferreds (as of jQuery 1.5, see http://api.jquery.com/category/deferred-object/) can make it much easier to cope with (possibly) async behavior. See for examples http://www.erichynds.com/jquery/using-deferreds-in-jquery/ .\n\nI've tried to incorporate this in Backbone without making any backwards incompatible change (so, didn't touch any return values) by adding a 'promise' attribute to Model and Collection that gets updated when using the Collection.fetch and Model.fetch/save/destroy functions. An alternative would be to make these methods return the XHR object right away.\n\nThis is (at least for me ;) ) very useful in cases where you may (or may not) need to make a number of requests to the server. Example:\n\n    var req = model.save();\n    // or, when using a version where the latest request is exposed as a property:\n    var req = model.save().request;\n\n    // all callbacks are executed whenever the request finishes (or right away if it's finished already)\n    req\n\t\t.done( function( response, textStatus, xhr ) {\n\t\t\t// success callback\n\t\t})\n\t\t.fail( function( response, textStatus, xhr ) {\n\t\t\t// error callback\n\t\t })\n\t\t.then( function( response, textStatus, xhr ) {\n\t\t\t// called on complete\n\t\t});\n\nA more complicated example (where this feature is even nicer to have):\n\n\t// Get a Collection of Tags; one or more may have to be created\n\tvar tags = TagList.getOrCreateByName( ['inbox', 'waiting for', 'work' ] );\n\n\t// Get an array of all the promises\n\tvar promises = tags.map( function( tag ) {\n\t\treturn tag.promise;\n\t});\n\t\n\t// $.when accept one or more promises, but not an array of promises, so use apply here.\n\t// The .then() will execute when all Tags are either found, or created\n\t$.when.apply( null, promises ).then( function() {\n\t\t// Do something that requires all Tags to be created\n\t});\n\nThe change doesn't depend jQuery btw; if the xhr object doesn't have a \"promise\" function, it just assigns the xhr object itself."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/279",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/279/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/279/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/279/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/279",
    "id": 685801,
    "number": 279,
    "title": "Backbone.Model should allow #defaults to be a function",
    "user": {
      "login": "jamesarosen",
      "id": 2406,
      "avatar_url": "https://avatars.githubusercontent.com/u/2406?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesarosen",
      "html_url": "https://github.com/jamesarosen",
      "followers_url": "https://api.github.com/users/jamesarosen/followers",
      "following_url": "https://api.github.com/users/jamesarosen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesarosen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesarosen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesarosen/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesarosen/orgs",
      "repos_url": "https://api.github.com/users/jamesarosen/repos",
      "events_url": "https://api.github.com/users/jamesarosen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesarosen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-03-18T20:44:05Z",
    "updated_at": "2011-03-21T14:19:13Z",
    "closed_at": "2011-03-21T14:19:13Z",
    "body": "For cases where I want a new instance of an object for each instance of a model, I'd like to be able to define my model class like this:\n\n    MyApp.Foo = Backbone.Model.extend({\n      defaults: function() {\n        return { foo: new MyApp.Bar({foo: this }) };\n      }\n    });\n\nAs it stands, each `Foo` would have the *same* `Bar` as its `#bar` on initialization."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/276",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/276/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/276/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/276/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/276",
    "id": 685426,
    "number": 276,
    "title": "Primitive Base Class",
    "user": {
      "login": "jimmydo",
      "id": 7198,
      "avatar_url": "https://avatars.githubusercontent.com/u/7198?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmydo",
      "html_url": "https://github.com/jimmydo",
      "followers_url": "https://api.github.com/users/jimmydo/followers",
      "following_url": "https://api.github.com/users/jimmydo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmydo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmydo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmydo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmydo/orgs",
      "repos_url": "https://api.github.com/users/jimmydo/repos",
      "events_url": "https://api.github.com/users/jimmydo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmydo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 22,
    "created_at": "2011-03-18T18:21:06Z",
    "updated_at": "2014-04-16T02:47:51Z",
    "closed_at": "2012-01-23T20:07:01Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/276",
      "html_url": "https://github.com/jashkenas/backbone/pull/276",
      "diff_url": "https://github.com/jashkenas/backbone/pull/276.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/276.patch"
    },
    "body": "This enhancement comes in two parts:\n\n- The first commit adds a simple `Backbone.Base` class. This is a primitive base class you can use to create custom classes that can take advantage of the handy self-propagating `extend()` function, but do not need the functionality provided by any existing Backbone class (such as `Model` or `View`).\n- The second commit is a little more invasive. It refactors the existing Backbone classes to inherit from `Backbone.Base`. It's pretty nice--at least for me--to have the constructor function of each class grouped along with the instance methods. I had to move `ctor()`, `inherits()`, `extend()`, and `Backbone.Base` further up the file so that they'd be available for use by the rest of the classes.\n\nFeel free to take both, one, or none of the commits. :) I found the functionality useful, so I figured it'd be worth making a standard part of Backbone. Thanks for writing some really useful code."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/265",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/265/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/265/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/265/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/265",
    "id": 653113,
    "number": 265,
    "title": "Collection fetchMore",
    "user": {
      "login": "martindrapeau",
      "id": 104156,
      "avatar_url": "https://avatars.githubusercontent.com/u/104156?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martindrapeau",
      "html_url": "https://github.com/martindrapeau",
      "followers_url": "https://api.github.com/users/martindrapeau/followers",
      "following_url": "https://api.github.com/users/martindrapeau/following{/other_user}",
      "gists_url": "https://api.github.com/users/martindrapeau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martindrapeau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martindrapeau/subscriptions",
      "organizations_url": "https://api.github.com/users/martindrapeau/orgs",
      "repos_url": "https://api.github.com/users/martindrapeau/repos",
      "events_url": "https://api.github.com/users/martindrapeau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martindrapeau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-03-07T16:28:21Z",
    "updated_at": "2011-05-26T20:29:28Z",
    "closed_at": "2011-05-26T20:29:28Z",
    "body": "Sometimes I want to call the server to fetch more models. I'm not sure what the best solution is: to overload the existing `fetch` method, or add a new `fetchMore` method. I implemented the second for now but would like a permanent built-in solution.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/261",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/261/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/261/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/261/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/261",
    "id": 649534,
    "number": 261,
    "title": "Alternative to get and set on Backbone.Model",
    "user": {
      "login": "dataink",
      "id": 625565,
      "avatar_url": "https://avatars.githubusercontent.com/u/625565?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dataink",
      "html_url": "https://github.com/dataink",
      "followers_url": "https://api.github.com/users/dataink/followers",
      "following_url": "https://api.github.com/users/dataink/following{/other_user}",
      "gists_url": "https://api.github.com/users/dataink/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dataink/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dataink/subscriptions",
      "organizations_url": "https://api.github.com/users/dataink/orgs",
      "repos_url": "https://api.github.com/users/dataink/repos",
      "events_url": "https://api.github.com/users/dataink/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dataink/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-03-05T20:52:56Z",
    "updated_at": "2012-04-24T21:02:45Z",
    "closed_at": "2011-05-26T20:48:09Z",
    "body": "I've extended Backbone.Model with the following functions. This lets me use `foo.bar()` instead of `foo.get 'bar'` and `foo.bar(value)` instead of `foo.set 'bar', value`. \n\nI'm curious to know how others have approached this.\n\n    expose: ( obj, props... ) ->    \n      console.assert arguments.length > 1\n      proto = obj.prototype\n      for prop in props\n        console.assert not proto[prop]?, \"Property #{prop}: conflict detected!\"\n        @_expose proto, prop  \n        \n    _expose: ( proto, prop ) ->\n      mutator = ->\n        args = arguments.length\n        if args == 0\n          @.get prop\n        else\n          attrs = {}\n          attrs[prop] = arguments[0]\n          if args == 1\n            @.set attrs\n          else \n            @.set attrs, { silent: arguments[1] }        \n      proto[prop] = mutator"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/251",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/251/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/251/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/251/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/251",
    "id": 632988,
    "number": 251,
    "title": "Ruby-like accessors on Model",
    "user": {
      "login": "HakubJozak",
      "id": 29968,
      "avatar_url": "https://avatars.githubusercontent.com/u/29968?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HakubJozak",
      "html_url": "https://github.com/HakubJozak",
      "followers_url": "https://api.github.com/users/HakubJozak/followers",
      "following_url": "https://api.github.com/users/HakubJozak/following{/other_user}",
      "gists_url": "https://api.github.com/users/HakubJozak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HakubJozak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HakubJozak/subscriptions",
      "organizations_url": "https://api.github.com/users/HakubJozak/orgs",
      "repos_url": "https://api.github.com/users/HakubJozak/repos",
      "events_url": "https://api.github.com/users/HakubJozak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HakubJozak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-02-28T00:04:03Z",
    "updated_at": "2011-05-26T21:07:54Z",
    "closed_at": "2011-05-26T21:07:54Z",
    "body": "What about to add Ruby like accessors to Model class? So that you can \"declare\" some properties to be readable/writable and get rid of those repetetive \r\n\r\n    function (name) { return this.get(name); }"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/242",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/242/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/242/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/242/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/242",
    "id": 619190,
    "number": 242,
    "title": "URL reversing",
    "user": {
      "login": "piranha",
      "id": 6553,
      "avatar_url": "https://avatars.githubusercontent.com/u/6553?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/piranha",
      "html_url": "https://github.com/piranha",
      "followers_url": "https://api.github.com/users/piranha/followers",
      "following_url": "https://api.github.com/users/piranha/following{/other_user}",
      "gists_url": "https://api.github.com/users/piranha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/piranha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piranha/subscriptions",
      "organizations_url": "https://api.github.com/users/piranha/orgs",
      "repos_url": "https://api.github.com/users/piranha/repos",
      "events_url": "https://api.github.com/users/piranha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/piranha/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2011-02-22T22:12:48Z",
    "updated_at": "2011-05-26T19:06:10Z",
    "closed_at": "2011-05-26T19:06:10Z",
    "body": "There is URL parsing in Backbone.History already, but construction of URLs is still mostly string concatenation. This can lead to a possible misprints and sometimes it's hard to determine which URL you are constructing. And this is especially so upon URL refactoring, when you need to find all such URLs to change them and it's simply hard to do.\r\n\r\nWhat I propose as solution is adding a method on History/Controller: `reverse(name, arg1[, argN*])`. This will be self-descriptive (you have an URL name here), and will save you from misprints (in case if URL is not found, you'll get an exception)."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/235",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/235/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/235/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/235/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/235",
    "id": 602967,
    "number": 235,
    "title": "Collection.save()",
    "user": {
      "login": "statico",
      "id": 137158,
      "avatar_url": "https://avatars.githubusercontent.com/u/137158?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/statico",
      "html_url": "https://github.com/statico",
      "followers_url": "https://api.github.com/users/statico/followers",
      "following_url": "https://api.github.com/users/statico/following{/other_user}",
      "gists_url": "https://api.github.com/users/statico/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/statico/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/statico/subscriptions",
      "organizations_url": "https://api.github.com/users/statico/orgs",
      "repos_url": "https://api.github.com/users/statico/repos",
      "events_url": "https://api.github.com/users/statico/events{/privacy}",
      "received_events_url": "https://api.github.com/users/statico/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-02-16T08:51:30Z",
    "updated_at": "2011-05-27T15:08:34Z",
    "closed_at": "2011-05-27T15:08:34Z",
    "body": "It'd be great if collections had a `save()` method which would issue a single `PUT` request for all of the modified objects in a collection."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/229",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/229/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/229/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/229/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/229",
    "id": 593932,
    "number": 229,
    "title": "Event bubbling",
    "user": {
      "login": "omo",
      "id": 20232,
      "avatar_url": "https://avatars.githubusercontent.com/u/20232?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/omo",
      "html_url": "https://github.com/omo",
      "followers_url": "https://api.github.com/users/omo/followers",
      "following_url": "https://api.github.com/users/omo/following{/other_user}",
      "gists_url": "https://api.github.com/users/omo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/omo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/omo/subscriptions",
      "organizations_url": "https://api.github.com/users/omo/orgs",
      "repos_url": "https://api.github.com/users/omo/repos",
      "events_url": "https://api.github.com/users/omo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/omo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-02-12T14:03:20Z",
    "updated_at": "2013-01-12T08:08:07Z",
    "closed_at": "2011-05-27T15:39:30Z",
    "body": "Want an event bubbling mechanism for Backbone.Event.\r\nI often create a hierarchy of views. and delete event on the child to its parent.\r\nI also want to centralize the change handling on models to its owner collection\r\nbecause per-model closure is somewhat wasteful.\r\n\r\nFor both cases, event bubbling will help.\r\nFor views, we can introduce \"parent\" optional property to bubbling.\r\nFor collections, we can think a collection of the parent of its holding models.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/224",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/224/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/224/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/224/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/224",
    "id": 588911,
    "number": 224,
    "title": "Documentation enhancements",
    "user": {
      "login": "jzaefferer",
      "id": 52585,
      "avatar_url": "https://avatars.githubusercontent.com/u/52585?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzaefferer",
      "html_url": "https://github.com/jzaefferer",
      "followers_url": "https://api.github.com/users/jzaefferer/followers",
      "following_url": "https://api.github.com/users/jzaefferer/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzaefferer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzaefferer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzaefferer/subscriptions",
      "organizations_url": "https://api.github.com/users/jzaefferer/orgs",
      "repos_url": "https://api.github.com/users/jzaefferer/repos",
      "events_url": "https://api.github.com/users/jzaefferer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzaefferer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-02-10T11:49:12Z",
    "updated_at": "2011-02-14T22:59:20Z",
    "closed_at": "2011-02-15T06:01:28Z",
    "body": "In general, would be nice if the Backbone site would format links properly, not just underline on hover. Currently links can be spotted only by hovering everything with the mouse.\r\n\r\nCollection.add says that the collection needs the model attribute to work with raw data, the example works without one.\r\n\r\nDocs on Backbone.Model.extend mention subclassing, but there's nothing on how do actually do that. Should add an example that shows SubModel.extend({}) usage."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/220",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/220/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/220/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/220/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/220",
    "id": 581372,
    "number": 220,
    "title": "Allow a prefix for controller routes/history in general?",
    "user": {
      "login": "Sidnicious",
      "id": 111870,
      "avatar_url": "https://avatars.githubusercontent.com/u/111870?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sidnicious",
      "html_url": "https://github.com/Sidnicious",
      "followers_url": "https://api.github.com/users/Sidnicious/followers",
      "following_url": "https://api.github.com/users/Sidnicious/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sidnicious/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sidnicious/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sidnicious/subscriptions",
      "organizations_url": "https://api.github.com/users/Sidnicious/orgs",
      "repos_url": "https://api.github.com/users/Sidnicious/repos",
      "events_url": "https://api.github.com/users/Sidnicious/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sidnicious/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-02-07T19:50:23Z",
    "updated_at": "2011-05-27T16:06:54Z",
    "closed_at": "2011-05-27T16:06:54Z",
    "body": "As far as I can tell, Backbone doesn't provide a way to prefix routes. So, if my URLs look like\r\n\r\n    http://example.com/#/page/sub\r\n\r\nor like\r\n\r\n    http://example.com/#!/page/sub\r\n\r\n…I have to make sure to prepend the prefix to all my routes, and calls to `Backbone.history.saveLocation`. Is there a way that this could be baked into Backbone?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/218",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/218/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/218/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/218/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/218",
    "id": 579185,
    "number": 218,
    "title": "Add URL Attributes and Loading/Finished Events",
    "user": {
      "login": "Rodeoclash",
      "id": 63807,
      "avatar_url": "https://avatars.githubusercontent.com/u/63807?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rodeoclash",
      "html_url": "https://github.com/Rodeoclash",
      "followers_url": "https://api.github.com/users/Rodeoclash/followers",
      "following_url": "https://api.github.com/users/Rodeoclash/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rodeoclash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rodeoclash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rodeoclash/subscriptions",
      "organizations_url": "https://api.github.com/users/Rodeoclash/orgs",
      "repos_url": "https://api.github.com/users/Rodeoclash/repos",
      "events_url": "https://api.github.com/users/Rodeoclash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rodeoclash/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-02-06T21:59:42Z",
    "updated_at": "2011-05-27T16:12:00Z",
    "closed_at": "2011-05-27T16:12:00Z",
    "body": "Hi,\r\n\r\nI've scanned through some of the existing tickets and found a few which seem to be along the lines of what I'd like implemented, so I thought I'd add this as a use case. In both cases I've managed to hack this functionality in but it would be great to have a correct way of handling it.\r\n\r\nFirst is events/callbacks for collections/models fetching content from the server. Simply, they should just broadcast\r\na loading/finished callback when they go to fetch content from the sever. This will facilitate UI feedback to indicate AJAX events are happening.\r\n\r\nSecondly is a way of storing a hash inside models/collections which is translated to URL attributes when making a fetch on the server. At the moment I've overwritten the URL method (which I'm actually quite happy with doing) but it would be great to have a hash getter/setter. E.g:\r\n\r\ncollection.setURLAttributes({\r\n\tper_page: \"5\",\r\n\tpage: \"2\"\r\n});\r\n\r\nThis set would then be translated into:\r\n\r\nhttp://localhost?per_page=5&page=2\r\n\r\nsetURLAttributes could also have a callback event associated with it.\r\n\r\nSam"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/210",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/210/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/210/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/210/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/210",
    "id": 571954,
    "number": 210,
    "title": "Allow overriding model id attribute",
    "user": {
      "login": "jdknezek",
      "id": 1338,
      "avatar_url": "https://avatars.githubusercontent.com/u/1338?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdknezek",
      "html_url": "https://github.com/jdknezek",
      "followers_url": "https://api.github.com/users/jdknezek/followers",
      "following_url": "https://api.github.com/users/jdknezek/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdknezek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdknezek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdknezek/subscriptions",
      "organizations_url": "https://api.github.com/users/jdknezek/orgs",
      "repos_url": "https://api.github.com/users/jdknezek/repos",
      "events_url": "https://api.github.com/users/jdknezek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdknezek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 10,
    "created_at": "2011-02-03T06:35:29Z",
    "updated_at": "2012-04-11T18:50:52Z",
    "closed_at": "2011-02-08T03:05:25Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/210",
      "html_url": "https://github.com/jashkenas/backbone/pull/210",
      "diff_url": "https://github.com/jashkenas/backbone/pull/210.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/210.patch"
    },
    "body": "Gives Backbone.Model an idAttribute member so custom id attribute names can be used (i.e. \"ID\" from a PascalCased language or \"_id\" from CouchDB)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/207",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/207/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/207/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/207/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/207",
    "id": 567623,
    "number": 207,
    "title": "Add index.js",
    "user": {
      "login": "yhahn",
      "id": 83384,
      "avatar_url": "https://avatars.githubusercontent.com/u/83384?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhahn",
      "html_url": "https://github.com/yhahn",
      "followers_url": "https://api.github.com/users/yhahn/followers",
      "following_url": "https://api.github.com/users/yhahn/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhahn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhahn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhahn/subscriptions",
      "organizations_url": "https://api.github.com/users/yhahn/orgs",
      "repos_url": "https://api.github.com/users/yhahn/repos",
      "events_url": "https://api.github.com/users/yhahn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhahn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-02-01T18:30:43Z",
    "updated_at": "2011-02-06T14:28:10Z",
    "closed_at": "2011-02-06T14:28:10Z",
    "body": "An `index.js` for using backbone in a server-side node.js context would be great:\r\n\r\n    module.exports = require('./backbone.js');"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/205",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/205/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/205/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/205/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/205",
    "id": 565500,
    "number": 205,
    "title": "Change event for collection.length?",
    "user": {
      "login": "HenrikJoreteg",
      "id": 67925,
      "avatar_url": "https://avatars.githubusercontent.com/u/67925?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HenrikJoreteg",
      "html_url": "https://github.com/HenrikJoreteg",
      "followers_url": "https://api.github.com/users/HenrikJoreteg/followers",
      "following_url": "https://api.github.com/users/HenrikJoreteg/following{/other_user}",
      "gists_url": "https://api.github.com/users/HenrikJoreteg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HenrikJoreteg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HenrikJoreteg/subscriptions",
      "organizations_url": "https://api.github.com/users/HenrikJoreteg/orgs",
      "repos_url": "https://api.github.com/users/HenrikJoreteg/repos",
      "events_url": "https://api.github.com/users/HenrikJoreteg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HenrikJoreteg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-01-31T21:55:07Z",
    "updated_at": "2014-06-05T10:21:50Z",
    "closed_at": "2011-02-07T19:53:48Z",
    "body": "Not sure if this is within scope of what you want to do with backbone. But I've noticed that it would be handy in several of my backbone projects.\r\n\r\nIt'd be great to be able to do.\r\n\r\n    collection.bind('change:length', this.something);\r\n\r\nJust an idea, \r\n\r\nCheers!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/196",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/196/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/196/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/196/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/196",
    "id": 543285,
    "number": 196,
    "title": "Add 'previousSavedAttributes' to the model",
    "user": {
      "login": "davehamptonusa",
      "id": 117977,
      "avatar_url": "https://avatars.githubusercontent.com/u/117977?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davehamptonusa",
      "html_url": "https://github.com/davehamptonusa",
      "followers_url": "https://api.github.com/users/davehamptonusa/followers",
      "following_url": "https://api.github.com/users/davehamptonusa/following{/other_user}",
      "gists_url": "https://api.github.com/users/davehamptonusa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davehamptonusa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davehamptonusa/subscriptions",
      "organizations_url": "https://api.github.com/users/davehamptonusa/orgs",
      "repos_url": "https://api.github.com/users/davehamptonusa/repos",
      "events_url": "https://api.github.com/users/davehamptonusa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davehamptonusa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2011-01-22T07:10:12Z",
    "updated_at": "2011-05-27T16:27:38Z",
    "closed_at": "2011-05-27T16:27:38Z",
    "body": "changedAttributes and previousAttributes refer to set.  'previousSavedAttributes' refers to create (when each attribute is created and set to null), Read (for the initial load) and the return from an update.\r\n\r\nThis enables Backbone to easily keep track of what it thinks is on the server.  This is helpful for when the ui wants to indicate when something has changed from what is on the server and that it needs to be saved.\r\n\r\nUsing the code as is, this is accomplished in the view by simply adding the line:\r\n\r\n    view.model.previousSavedAttributes = view.model.toJSON();\r\n\r\nIn both the initialize and the success callbacks for updates.\r\nSetting the previousSavedAttributes for a new model is done by simply supplying defaults.\r\n\r\nAs easy as this is to do just using the code, I use it so often, it would be easier to just have in the same two spots in the source code.\r\n\r\nGiven some time, I hope to fork it and get it to you, but if not...  at least you have the idea,\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/194",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/194/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/194/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/194/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/194",
    "id": 539782,
    "number": 194,
    "title": "FEAT: Backbone.Model.merge() - extend attributes",
    "user": {
      "login": "timesselens",
      "id": 355826,
      "avatar_url": "https://avatars.githubusercontent.com/u/355826?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timesselens",
      "html_url": "https://github.com/timesselens",
      "followers_url": "https://api.github.com/users/timesselens/followers",
      "following_url": "https://api.github.com/users/timesselens/following{/other_user}",
      "gists_url": "https://api.github.com/users/timesselens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timesselens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timesselens/subscriptions",
      "organizations_url": "https://api.github.com/users/timesselens/orgs",
      "repos_url": "https://api.github.com/users/timesselens/repos",
      "events_url": "https://api.github.com/users/timesselens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timesselens/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-01-20T19:11:48Z",
    "updated_at": "2011-05-27T16:29:58Z",
    "closed_at": "2011-05-27T16:29:58Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/194",
      "html_url": "https://github.com/jashkenas/backbone/pull/194",
      "diff_url": "https://github.com/jashkenas/backbone/pull/194.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/194.patch"
    },
    "body": "Allow the model attributes to be extended.\r\n    \r\nSYNOPSIS\r\n    \r\n        var x = new Backbone.Model( { foo: {two: 2}, bar: [1,2]} );\r\n    \r\n        x.merge( { foo: {one: 1}, bar: [,,3] } );\r\n    \r\n        x.toJSON === { foo: {one: 1, two: 2}, bar: [1,2,3] };\r\n        x.get('foo').two === 2;\r\n    \r\nNAMING\r\nextend is already in use, took merge()\r\n\r\nTESTS\r\nwrote a couple of test cases, for Arrays and Objects in particular"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/193",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/193/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/193/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/193/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/193",
    "id": 539224,
    "number": 193,
    "title": "Bind / unbind several events at the same time . Enhancement",
    "user": {
      "login": "gsusmonzon",
      "id": 574620,
      "avatar_url": "https://avatars.githubusercontent.com/u/574620?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsusmonzon",
      "html_url": "https://github.com/gsusmonzon",
      "followers_url": "https://api.github.com/users/gsusmonzon/followers",
      "following_url": "https://api.github.com/users/gsusmonzon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsusmonzon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsusmonzon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsusmonzon/subscriptions",
      "organizations_url": "https://api.github.com/users/gsusmonzon/orgs",
      "repos_url": "https://api.github.com/users/gsusmonzon/repos",
      "events_url": "https://api.github.com/users/gsusmonzon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsusmonzon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2011-01-20T14:48:44Z",
    "updated_at": "2011-02-07T20:39:56Z",
    "closed_at": "2011-02-07T20:39:56Z",
    "body": "It would be great allowing bind / unbind methods use the same syntax than jQuery bindings. Specifying several events separated by commas will bind the same callback for any of the events.\r\nie::\r\n            people.bind(\"add\",_.bind(this.on_people_changed,this));\r\n            people.bind(\"remove\",_.bind(this.on_people_changed,this));\r\nbecome\r\n            people.bind(\"add, remove\",_.bind(this.on_people_changed,this));\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/188",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/188/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/188/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/188/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/188",
    "id": 527971,
    "number": 188,
    "title": "Call Backbone.history.start twice",
    "user": {
      "login": "juggy",
      "id": 1108,
      "avatar_url": "https://avatars.githubusercontent.com/u/1108?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juggy",
      "html_url": "https://github.com/juggy",
      "followers_url": "https://api.github.com/users/juggy/followers",
      "following_url": "https://api.github.com/users/juggy/following{/other_user}",
      "gists_url": "https://api.github.com/users/juggy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juggy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juggy/subscriptions",
      "organizations_url": "https://api.github.com/users/juggy/orgs",
      "repos_url": "https://api.github.com/users/juggy/repos",
      "events_url": "https://api.github.com/users/juggy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juggy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2011-01-14T22:27:17Z",
    "updated_at": "2011-02-07T15:29:34Z",
    "closed_at": "2011-02-07T15:29:34Z",
    "body": "Hello,\r\n\r\nYou can call Backbone.history.start() twice and it will have start another interval loop to check the #. I think it would be pretty easy to start a single history per window and avoid this error.\r\n\r\nCall me dumb, but I just spent 1hour debugging that simple error.\r\n\r\nThx\r\nJulien."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/187",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/187/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/187/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/187/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/187",
    "id": 527118,
    "number": 187,
    "title": "Event.bind/unbind",
    "user": {
      "login": "dvv",
      "id": 211335,
      "avatar_url": "https://avatars.githubusercontent.com/u/211335?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvv",
      "html_url": "https://github.com/dvv",
      "followers_url": "https://api.github.com/users/dvv/followers",
      "following_url": "https://api.github.com/users/dvv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvv/subscriptions",
      "organizations_url": "https://api.github.com/users/dvv/orgs",
      "repos_url": "https://api.github.com/users/dvv/repos",
      "events_url": "https://api.github.com/users/dvv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-01-14T15:01:07Z",
    "updated_at": "2011-05-27T16:50:38Z",
    "closed_at": "2011-05-27T16:50:38Z",
    "body": "Hi!\r\n\r\nFeasible to make the subj methods to take _arrays_ of event names also?\r\n\r\nBest regards,\r\n--Vladimir\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/182",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/182/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/182/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/182/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/182",
    "id": 522937,
    "number": 182,
    "title": "Mention __super__ in docs",
    "user": {
      "login": "tauren",
      "id": 282084,
      "avatar_url": "https://avatars.githubusercontent.com/u/282084?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tauren",
      "html_url": "https://github.com/tauren",
      "followers_url": "https://api.github.com/users/tauren/followers",
      "following_url": "https://api.github.com/users/tauren/following{/other_user}",
      "gists_url": "https://api.github.com/users/tauren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tauren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tauren/subscriptions",
      "organizations_url": "https://api.github.com/users/tauren/orgs",
      "repos_url": "https://api.github.com/users/tauren/repos",
      "events_url": "https://api.github.com/users/tauren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tauren/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2011-01-12T20:16:33Z",
    "updated_at": "2013-05-01T19:27:25Z",
    "closed_at": "2011-02-06T21:58:14Z",
    "body": "Looking over the source, I see the extend() method defines __super__. The docs mention that javascript doesn't have super and gives an example workaround:\r\n\r\n    var Note = Backbone.Model.extend({\r\n      set: function(attributes, options) {\r\n        Backbone.Model.prototype.set.call(this, attributes, options);\r\n        ...\r\n      }\r\n    });\r\n\r\nPerhaps that example should be changed to use __super__ instead?\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/180",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/180/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/180/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/180/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/180",
    "id": 520569,
    "number": 180,
    "title": "Events for save/destroy/create",
    "user": {
      "login": "juggy",
      "id": 1108,
      "avatar_url": "https://avatars.githubusercontent.com/u/1108?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juggy",
      "html_url": "https://github.com/juggy",
      "followers_url": "https://api.github.com/users/juggy/followers",
      "following_url": "https://api.github.com/users/juggy/following{/other_user}",
      "gists_url": "https://api.github.com/users/juggy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juggy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juggy/subscriptions",
      "organizations_url": "https://api.github.com/users/juggy/orgs",
      "repos_url": "https://api.github.com/users/juggy/repos",
      "events_url": "https://api.github.com/users/juggy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juggy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 23,
    "created_at": "2011-01-11T21:17:04Z",
    "updated_at": "2013-12-20T01:57:40Z",
    "closed_at": "2012-01-24T15:55:39Z",
    "body": "Hello,\r\n\r\nThis is how I do this right now\r\n\r\n    this.EventedModel = Backbone.Model.extend\r\n      save : (attrs, options)->\r\n        self = this\r\n        options || (options = {})\r\n        success = options.success\r\n        options.success = (resp) ->\r\n          self.trigger(\"save:success\", self)\r\n          success(self, resp) if (success)\r\n       error = options.error\r\n       options.error = (resp) ->\r\n         self.trigger(\"save:error\", self)\r\n         error(self, resp) if (error)\r\n      value = Backbone.Model.prototype.save.call(this, attrs, options)\r\n      @trigger(\"save\", this)\r\n      return value\r\n\r\nIt would be much easier if this was already triggered by backbone\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/179",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/179/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/179/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/179/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/179",
    "id": 519027,
    "number": 179,
    "title": "Add ability to define View's element attributes",
    "user": {
      "login": "hippich",
      "id": 361630,
      "avatar_url": "https://avatars.githubusercontent.com/u/361630?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hippich",
      "html_url": "https://github.com/hippich",
      "followers_url": "https://api.github.com/users/hippich/followers",
      "following_url": "https://api.github.com/users/hippich/following{/other_user}",
      "gists_url": "https://api.github.com/users/hippich/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hippich/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hippich/subscriptions",
      "organizations_url": "https://api.github.com/users/hippich/orgs",
      "repos_url": "https://api.github.com/users/hippich/repos",
      "events_url": "https://api.github.com/users/hippich/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hippich/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2011-01-11T05:08:20Z",
    "updated_at": "2011-02-07T21:15:44Z",
    "closed_at": "2011-02-08T05:11:06Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/179",
      "html_url": "https://github.com/jashkenas/backbone/pull/179",
      "diff_url": "https://github.com/jashkenas/backbone/pull/179.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/179.patch"
    },
    "body": "This is simple feature and nice to have for Views to be able better control produced html markup."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/174",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/174/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/174/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/174/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/174",
    "id": 513204,
    "number": 174,
    "title": "Nested Models suggestion / idea",
    "user": {
      "login": "nathanstitt",
      "id": 79566,
      "avatar_url": "https://avatars.githubusercontent.com/u/79566?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanstitt",
      "html_url": "https://github.com/nathanstitt",
      "followers_url": "https://api.github.com/users/nathanstitt/followers",
      "following_url": "https://api.github.com/users/nathanstitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanstitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanstitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanstitt/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanstitt/orgs",
      "repos_url": "https://api.github.com/users/nathanstitt/repos",
      "events_url": "https://api.github.com/users/nathanstitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanstitt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2011-01-07T20:30:51Z",
    "updated_at": "2012-01-24T15:58:13Z",
    "closed_at": "2012-01-24T15:58:13Z",
    "body": "I'm writing a point of concept app using Backbone which will be heavily referential with models/collections pointing back and forth at one another.\n\nAt first I used the suggestion in the FAQ for nested models, but that quickly grew cumbersome to maintain.  I finally settled on the following; which I feel is much cleaner to maintain, and allows events to propagate through.\n\n    Item = Backbone.Model.extend({\n        initialize: function(){\n                this.setupAssociations({\n                        'bins': BinList,\n                        'lots': LotList,\n                        'units_of_measure': UnitsOfMeasureList,\n                        'barcodes': BarcodeList\n                });\n        },\n\n        setupAssociations:function(assoc){\n                for ( var key in assoc ) {\n                        this[ key ] = new assoc[key]( this.get( key ),{ memberOf: this } );\n                        this.bind( 'change:' + key , _.bind( this.setAssociated, this, key ) );\n                }\n        },\n        setAssociated: function(name,self,val ){\n                this[ name ].refresh( val );\n        }\n\n     });\n\n\nBy using this method, you can write code like the following and have change events flow through to the associated model/collection.\n\n    item = new Item( { bins: [ { id: 1, name:'foo' ] } ) //bins will be turned into a BinsList and become a property of item\n    item.bins.get(1)  // returns 'foo'\n    item.set('bins', { id: 1, name:'bar' ] }) // fires refresh event on item.bins\n    item.bins.get(1)  // returns 'bar'\n\n\nAny chance of getting the setupAssociations & setAssociated methods added to the Model class?  I'm not at all set on using the name associated if anyone has a better thought.\n\nAlso, if there was a way to determine which event the method was called from, it wouldn't be necessary to _.bind inside of setupAssociations.  It would be nice to have the event name passed to the handler inside backbone's trigger method.\n\nThanks for the great library!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/173",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/173/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/173/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/173/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/173",
    "id": 511837,
    "number": 173,
    "title": "HTML5 PushState etc.",
    "user": {
      "login": "micrypt",
      "id": 169394,
      "avatar_url": "https://avatars.githubusercontent.com/u/169394?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micrypt",
      "html_url": "https://github.com/micrypt",
      "followers_url": "https://api.github.com/users/micrypt/followers",
      "following_url": "https://api.github.com/users/micrypt/following{/other_user}",
      "gists_url": "https://api.github.com/users/micrypt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micrypt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micrypt/subscriptions",
      "organizations_url": "https://api.github.com/users/micrypt/orgs",
      "repos_url": "https://api.github.com/users/micrypt/repos",
      "events_url": "https://api.github.com/users/micrypt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micrypt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 18,
    "created_at": "2011-01-07T04:34:11Z",
    "updated_at": "2011-05-27T17:33:33Z",
    "closed_at": "2011-05-27T17:33:33Z",
    "body": "Are there any plans for http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/157",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/157/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/157/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/157/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/157",
    "id": 498014,
    "number": 157,
    "title": "It would be nice if Backbone.history.loadUrl took a url parameter",
    "user": {
      "login": "bnolan",
      "id": 17499,
      "avatar_url": "https://avatars.githubusercontent.com/u/17499?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnolan",
      "html_url": "https://github.com/bnolan",
      "followers_url": "https://api.github.com/users/bnolan/followers",
      "following_url": "https://api.github.com/users/bnolan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnolan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnolan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnolan/subscriptions",
      "organizations_url": "https://api.github.com/users/bnolan/orgs",
      "repos_url": "https://api.github.com/users/bnolan/repos",
      "events_url": "https://api.github.com/users/bnolan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnolan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-12-30T00:02:40Z",
    "updated_at": "2010-12-30T22:29:41Z",
    "closed_at": "2010-12-30T22:29:41Z",
    "body": "So you can test routes without having to change the location hash."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/156",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/156/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/156/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/156/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/156",
    "id": 495417,
    "number": 156,
    "title": "one event bind",
    "user": {
      "login": "martindrapeau",
      "id": 104156,
      "avatar_url": "https://avatars.githubusercontent.com/u/104156?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martindrapeau",
      "html_url": "https://github.com/martindrapeau",
      "followers_url": "https://api.github.com/users/martindrapeau/followers",
      "following_url": "https://api.github.com/users/martindrapeau/following{/other_user}",
      "gists_url": "https://api.github.com/users/martindrapeau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martindrapeau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martindrapeau/subscriptions",
      "organizations_url": "https://api.github.com/users/martindrapeau/orgs",
      "repos_url": "https://api.github.com/users/martindrapeau/repos",
      "events_url": "https://api.github.com/users/martindrapeau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martindrapeau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 24,
    "created_at": "2010-12-28T18:02:06Z",
    "updated_at": "2012-11-19T17:44:49Z",
    "closed_at": "2011-10-29T19:15:14Z",
    "body": "I've added a new Events method `one` to bind an event and trigger it only once. Here is the code on my end. Would be nice to integrate that into Backbone.\r\n\r\n\t@@ -61,6 +61,15 @@\r\n\t\t   list.push(callback);\r\n\t\t   return this;\r\n\t\t },\r\n\t+\t\r\n\t+\t// Binds an event to be called only once.\r\n\t+\tone : function(ev, callback) {\r\n\t+\t  this.bind(ev, callback);\r\n\t+      var calls = this._callones || (this._callones = {});\r\n\t+      var list  = this._callones[ev] || (this._callones[ev] = []);\r\n\t+      list.push(callback);\r\n\t+      return this;\r\n\t+\t},\r\n\t \r\n\t\t // Remove one or many callbacks. If `callback` is null, removes all\r\n\t\t // callbacks for the event. If `ev` is null, removes all bound callbacks\r\n\t@@ -69,15 +78,21 @@\r\n\t\t   var calls;\r\n\t\t   if (!ev) {\r\n\t\t\t this._callbacks = {};\r\n\t+\t\tif (this._callones) this._callones = {};\r\n\t\t   } else if (calls = this._callbacks) {\r\n\t\t\t if (!callback) {\r\n\t\t\t   calls[ev] = [];\r\n\t+\t\t  if (this._callones && this._callones[ev]) this._callones[ev] = [];\r\n\t\t\t } else {\r\n\t\t\t   var list = calls[ev];\r\n\t\t\t   if (!list) return this;\r\n\t\t\t   for (var i = 0, l = list.length; i < l; i++) {\r\n\t\t\t\t if (callback === list[i]) {\r\n\t\t\t\t   list.splice(i, 1);\r\n\t+\t\t\t  if (this._callones && this._callones[ev]) {\r\n\t+\t\t\t\tj = _.indexOf(this._callones[ev], callback);\r\n\t+\t\t\t\tif (j >= 0) this._callones[ev].splice(j, 1);\r\n\t+\t\t\t  }\r\n\t\t\t\t   break;\r\n\t\t\t\t }\r\n\t\t\t   }\r\n\t@@ -96,12 +111,30 @@\r\n\t\t\t list = calls[ev].slice(0);\r\n\t\t\t for (i = 0, l = list.length; i < l; i++) {\r\n\t\t\t   list[i].apply(this, Array.prototype.slice.call(arguments, 1));\r\n\t+\t\t  if (this._callones && this._callones[ev]) {\r\n\t+\t\t\tvar callback = list[i];\r\n\t+\t\t\tj = _.indexOf(this._callones[ev], callback);\r\n\t+\t\t\tif (j >= 0) {\r\n\t+\t\t\t\tthis._callones[ev].splice(j, 1);\r\n\t+\t\t\t\tj = _.indexOf(this._callbacks[ev], callback);\r\n\t+\t\t\t\tif (j >= 0) this._callbacks[ev].splice(j, 1);\r\n\t+\t\t\t}\r\n\t+\t\t  }\r\n\t\t\t }\r\n\t\t   }\r\n\t\t   if (calls['all']) {\r\n\t\t\t list = calls['all'].slice(0);\r\n\t\t\t for (i = 0, l = list.length; i < l; i++) {\r\n\t\t\t   list[i].apply(this, arguments);\r\n\t+\t\t  if (this._callones && this._callones['all']) {\r\n\t+\t\t\tvar callback = list[i];\r\n\t+\t\t\tj = _.indexOf(this._callones['all'], callback);\r\n\t+\t\t\tif (j >= 0) {\r\n\t+\t\t\t\tthis._callones['all'].splice(j, 1);\r\n\t+\t\t\t\tj = _.indexOf(this._callbacks['all'], callback);\r\n\t+\t\t\t\tif (j >= 0) this._callbacks['all'].splice(j, 1);\r\n\t+\t\t\t}\r\n\t+\t\t  }\r\n\t\t\t }\r\n\t\t   }\r\n\t\t   return this;\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/149",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/149/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/149/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/149/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/149",
    "id": 480621,
    "number": 149,
    "title": "View#el can be a string",
    "user": {
      "login": "sstephenson",
      "id": 2603,
      "avatar_url": "https://avatars.githubusercontent.com/u/2603?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sstephenson",
      "html_url": "https://github.com/sstephenson",
      "followers_url": "https://api.github.com/users/sstephenson/followers",
      "following_url": "https://api.github.com/users/sstephenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/sstephenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sstephenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sstephenson/subscriptions",
      "organizations_url": "https://api.github.com/users/sstephenson/orgs",
      "repos_url": "https://api.github.com/users/sstephenson/repos",
      "events_url": "https://api.github.com/users/sstephenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sstephenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-12-17T18:39:13Z",
    "updated_at": "2010-12-17T18:57:51Z",
    "closed_at": "2010-12-18T02:56:26Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/149",
      "html_url": "https://github.com/jashkenas/backbone/pull/149",
      "diff_url": "https://github.com/jashkenas/backbone/pull/149.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/149.patch"
    },
    "body": "This patch adds support for specifying `el` as a string in `Backbone.View` subclasses, so that you can more easily defer element querying to the time of instantiation rather than delcaration.\r\n\r\nIf an element can't be found from the given string, `_ensureElement` falls back to calling `make`. Not sure if that's the right thing to do here. It might be better to raise an exception instead."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/147",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/147/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/147/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/147/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/147",
    "id": 479416,
    "number": 147,
    "title": "Adding the same model instance to multiple collections",
    "user": {
      "login": "josh",
      "id": 137,
      "avatar_url": "https://avatars.githubusercontent.com/u/137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josh",
      "html_url": "https://github.com/josh",
      "followers_url": "https://api.github.com/users/josh/followers",
      "following_url": "https://api.github.com/users/josh/following{/other_user}",
      "gists_url": "https://api.github.com/users/josh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josh/subscriptions",
      "organizations_url": "https://api.github.com/users/josh/orgs",
      "repos_url": "https://api.github.com/users/josh/repos",
      "events_url": "https://api.github.com/users/josh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josh/received_events",
      "type": "User",
      "site_admin": true
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2010-12-17T03:02:45Z",
    "updated_at": "2011-01-22T16:51:53Z",
    "closed_at": "2011-01-22T16:51:53Z",
    "body": "I found a few useful patterns for having a single model instance be part of multiple collections.\n\nSay you have multiple TodoItems collections that belong to many TodoLists. It maybe useful to maintain a collection for all the TodoItems to perform bulk operations.\n\nWhen you add a model to a collection, the models collection will be reassigned. Theres no easy way to avoid this behavior without reimplementing the internal `_add` method.\n\nThis patch adds a simple `preserveCollection` option to prevent it.\n\njosh/backbone@9c6f5b223c3c2ac65869eb44af1770b7c1df29c5\n\nJust wanted to get some feedback. Not sure if its a good idea or violates backbones current collection model. Maybe allowing model.collection to be an array pointing to multiple collections would be a better change."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/141",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/141/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/141/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/141/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/141",
    "id": 474087,
    "number": 141,
    "title": "Model save method should pass request object to parse",
    "user": {
      "login": "bmihelac",
      "id": 13813,
      "avatar_url": "https://avatars.githubusercontent.com/u/13813?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bmihelac",
      "html_url": "https://github.com/bmihelac",
      "followers_url": "https://api.github.com/users/bmihelac/followers",
      "following_url": "https://api.github.com/users/bmihelac/following{/other_user}",
      "gists_url": "https://api.github.com/users/bmihelac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bmihelac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bmihelac/subscriptions",
      "organizations_url": "https://api.github.com/users/bmihelac/orgs",
      "repos_url": "https://api.github.com/users/bmihelac/repos",
      "events_url": "https://api.github.com/users/bmihelac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bmihelac/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2010-12-14T16:17:10Z",
    "updated_at": "2012-01-24T16:24:39Z",
    "closed_at": "2012-01-24T16:24:39Z",
    "body": "When new resource is created, backbone excepts server to return a hash of changed attributes that it would update object with. Notable part is 'id' attribute which would make backbone to see resource as persisted and use 'update' method instead of 'create' on subsequent save() calls. \r\n\r\nSome API frameworks returns empty response and set Location in response header to URI of created resource. To be able to utilize this response, parse method should receive request object."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/137",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/137/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/137/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/137/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/137",
    "id": 471691,
    "number": 137,
    "title": "Collection addOrUpdate",
    "user": {
      "login": "martindrapeau",
      "id": 104156,
      "avatar_url": "https://avatars.githubusercontent.com/u/104156?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martindrapeau",
      "html_url": "https://github.com/martindrapeau",
      "followers_url": "https://api.github.com/users/martindrapeau/followers",
      "following_url": "https://api.github.com/users/martindrapeau/following{/other_user}",
      "gists_url": "https://api.github.com/users/martindrapeau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martindrapeau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martindrapeau/subscriptions",
      "organizations_url": "https://api.github.com/users/martindrapeau/orgs",
      "repos_url": "https://api.github.com/users/martindrapeau/repos",
      "events_url": "https://api.github.com/users/martindrapeau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martindrapeau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 16,
    "created_at": "2010-12-13T13:36:42Z",
    "updated_at": "2012-01-24T16:27:48Z",
    "closed_at": "2012-01-24T16:27:48Z",
    "body": "Would be nice to have an addOrUpdate() method on the collection. It would look at the id attribute to decide whether to trigger a set on the existing model, or an add on the collection."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/136",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/136/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/136/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/136/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/136",
    "id": 471185,
    "number": 136,
    "title": "Collection next and prev",
    "user": {
      "login": "martindrapeau",
      "id": 104156,
      "avatar_url": "https://avatars.githubusercontent.com/u/104156?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martindrapeau",
      "html_url": "https://github.com/martindrapeau",
      "followers_url": "https://api.github.com/users/martindrapeau/followers",
      "following_url": "https://api.github.com/users/martindrapeau/following{/other_user}",
      "gists_url": "https://api.github.com/users/martindrapeau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martindrapeau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martindrapeau/subscriptions",
      "organizations_url": "https://api.github.com/users/martindrapeau/orgs",
      "repos_url": "https://api.github.com/users/martindrapeau/repos",
      "events_url": "https://api.github.com/users/martindrapeau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martindrapeau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2010-12-13T04:20:42Z",
    "updated_at": "2012-01-24T16:32:02Z",
    "closed_at": "2012-01-24T16:32:02Z",
    "body": "I'd like to know the next or previous model in a collection. How can I do that?\r\nWould be nice to have methods next() and prev() on a collection. For example:\r\ncollection.next(model) or collection.prev(model)\r\nAnd if there wasn't a new or previous, return undefined."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/135",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/135/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/135/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/135/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/135",
    "id": 470032,
    "number": 135,
    "title": "Multiple views per element",
    "user": {
      "login": "sstephenson",
      "id": 2603,
      "avatar_url": "https://avatars.githubusercontent.com/u/2603?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sstephenson",
      "html_url": "https://github.com/sstephenson",
      "followers_url": "https://api.github.com/users/sstephenson/followers",
      "following_url": "https://api.github.com/users/sstephenson/following{/other_user}",
      "gists_url": "https://api.github.com/users/sstephenson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sstephenson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sstephenson/subscriptions",
      "organizations_url": "https://api.github.com/users/sstephenson/orgs",
      "repos_url": "https://api.github.com/users/sstephenson/repos",
      "events_url": "https://api.github.com/users/sstephenson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sstephenson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-12-12T06:00:02Z",
    "updated_at": "2010-12-13T14:42:16Z",
    "closed_at": "2010-12-13T22:41:01Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/135",
      "html_url": "https://github.com/jashkenas/backbone/pull/135",
      "diff_url": "https://github.com/jashkenas/backbone/pull/135.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/135.patch"
    },
    "body": "This patch makes it possible to have more than one view listening for events on the same element. For example, you may want to have separate view classes for different behaviors whose events delegate to listeners on `document.body`."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/123",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/123/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/123/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/123/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/123",
    "id": 460069,
    "number": 123,
    "title": "Implement model.is() attr test",
    "user": {
      "login": "mtodd",
      "id": 182,
      "avatar_url": "https://avatars.githubusercontent.com/u/182?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mtodd",
      "html_url": "https://github.com/mtodd",
      "followers_url": "https://api.github.com/users/mtodd/followers",
      "following_url": "https://api.github.com/users/mtodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/mtodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mtodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mtodd/subscriptions",
      "organizations_url": "https://api.github.com/users/mtodd/orgs",
      "repos_url": "https://api.github.com/users/mtodd/repos",
      "events_url": "https://api.github.com/users/mtodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mtodd/received_events",
      "type": "User",
      "site_admin": true
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-12-07T07:50:14Z",
    "updated_at": "2010-12-08T17:27:47Z",
    "closed_at": "2010-12-09T01:23:39Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/123",
      "html_url": "https://github.com/jashkenas/backbone/pull/123",
      "diff_url": "https://github.com/jashkenas/backbone/pull/123.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/123.patch"
    },
    "body": "Adds an attribute tester (similar to Ruby's `model.foo?` methods).\r\n\r\nFor example:\r\n\r\n    modelset({'foo': ''})\r\n    model.is(\"foo\") === false\r\n    \r\n    modelset({'foo': 'Yes'})\r\n    model.is(\"foo\") === true\r\n\r\nIncludes tests, docs.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/118",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/118/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/118/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/118/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/118",
    "id": 458117,
    "number": 118,
    "title": "Form serialization for Railsy mass assignment",
    "user": {
      "login": "andyferra",
      "id": 11319,
      "avatar_url": "https://avatars.githubusercontent.com/u/11319?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andyferra",
      "html_url": "https://github.com/andyferra",
      "followers_url": "https://api.github.com/users/andyferra/followers",
      "following_url": "https://api.github.com/users/andyferra/following{/other_user}",
      "gists_url": "https://api.github.com/users/andyferra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andyferra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andyferra/subscriptions",
      "organizations_url": "https://api.github.com/users/andyferra/orgs",
      "repos_url": "https://api.github.com/users/andyferra/repos",
      "events_url": "https://api.github.com/users/andyferra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andyferra/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2010-12-06T11:27:45Z",
    "updated_at": "2011-03-13T18:42:53Z",
    "closed_at": "2010-12-09T01:34:51Z",
    "body": "In practice this may prove to be YAGNI, but I'm thinking I want to write a little something that would serialize a form to an object suitable for passing directly to Model.set().\r\n\r\nI figure since that since in Rails, forms so often map directly to models, why not make it easy to do the same with the models on our front end as well.\r\n\r\nI know this doesn't belong in backbone per se, but I figured I'd post it here since it's related to it's implementation.\r\n\r\nFrankly, I'd love to have some thing like form_for, but backbone-flavored.  The form could could automatically map to an instance of a model for validation, errors, data/event binding, etc.  Not sure if if the potential DRYness is worth the potential headaches form the magic, but it's tempting.\r\n\r\nHaving said that, the phrase \"backbone flavored\" just sounds gross. :)\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/117",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/117/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/117/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/117/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/117",
    "id": 454297,
    "number": 117,
    "title": "Namespacing outgoing requests w/ Rails convention",
    "user": {
      "login": "jordan-brough",
      "id": 23050,
      "avatar_url": "https://avatars.githubusercontent.com/u/23050?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jordan-brough",
      "html_url": "https://github.com/jordan-brough",
      "followers_url": "https://api.github.com/users/jordan-brough/followers",
      "following_url": "https://api.github.com/users/jordan-brough/following{/other_user}",
      "gists_url": "https://api.github.com/users/jordan-brough/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jordan-brough/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jordan-brough/subscriptions",
      "organizations_url": "https://api.github.com/users/jordan-brough/orgs",
      "repos_url": "https://api.github.com/users/jordan-brough/repos",
      "events_url": "https://api.github.com/users/jordan-brough/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jordan-brough/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 9,
    "created_at": "2010-12-03T16:59:34Z",
    "updated_at": "2012-01-24T17:23:09Z",
    "closed_at": "2012-01-24T17:23:09Z",
    "body": "(note: this is different than the \"include_root_in_json\" question)\r\n\r\nIs there a way to namespace attributes on the outgoing PUT/POST requsts that backbone makes?  e.g. to follow the Rails convention of:\r\n\r\n    account.update_attributes params[:account]\r\n\r\nrather than\r\n\r\n    account.update_attributes params\r\n\r\n?\r\n\r\nWe're integrating backbone into our existing app which has a bunch of endpoints following the former convention.  If there's not a way right now would you be willing to accept a patch for it?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/116",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/116/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/116/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/116/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/116",
    "id": 454133,
    "number": 116,
    "title": "Appending when fetching collections",
    "user": {
      "login": "ckorhonen",
      "id": 39121,
      "avatar_url": "https://avatars.githubusercontent.com/u/39121?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckorhonen",
      "html_url": "https://github.com/ckorhonen",
      "followers_url": "https://api.github.com/users/ckorhonen/followers",
      "following_url": "https://api.github.com/users/ckorhonen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckorhonen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckorhonen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckorhonen/subscriptions",
      "organizations_url": "https://api.github.com/users/ckorhonen/orgs",
      "repos_url": "https://api.github.com/users/ckorhonen/repos",
      "events_url": "https://api.github.com/users/ckorhonen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckorhonen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2010-12-03T15:49:33Z",
    "updated_at": "2011-04-21T14:19:21Z",
    "closed_at": "2010-12-09T02:14:16Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/116",
      "html_url": "https://github.com/jashkenas/backbone/pull/116",
      "diff_url": "https://github.com/jashkenas/backbone/pull/116.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/116.patch"
    },
    "body": "I've added an append option flag to the Collection.fetch() method. \r\n\r\nWhen set, rather than doing a Collection.refresh() with the server's response, it will do a Collection.add().\r\n\r\nThis fits a use case I have been working on where I'm lazy loading a data set as a user scrolls (like NewTwitter).\r\n\r\nCurrently I'm keeping track of the number of items loaded vs. the total, in my application code and updating the Collection.url with a URL parameter corresponding to the page number. I'm not sure if it makes sense to move some of this into backbone since server implementations may vary.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/114",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/114/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/114/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/114/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/114",
    "id": 452928,
    "number": 114,
    "title": "Add a urlBase option to model to allow specifying restful url without using a collection",
    "user": {
      "login": "mkelly12",
      "id": 8383,
      "avatar_url": "https://avatars.githubusercontent.com/u/8383?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mkelly12",
      "html_url": "https://github.com/mkelly12",
      "followers_url": "https://api.github.com/users/mkelly12/followers",
      "following_url": "https://api.github.com/users/mkelly12/following{/other_user}",
      "gists_url": "https://api.github.com/users/mkelly12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mkelly12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mkelly12/subscriptions",
      "organizations_url": "https://api.github.com/users/mkelly12/orgs",
      "repos_url": "https://api.github.com/users/mkelly12/repos",
      "events_url": "https://api.github.com/users/mkelly12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mkelly12/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2010-12-02T22:27:17Z",
    "updated_at": "2010-12-10T18:35:08Z",
    "closed_at": "2010-12-10T23:32:58Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/114",
      "html_url": "https://github.com/jashkenas/backbone/pull/114",
      "diff_url": "https://github.com/jashkenas/backbone/pull/114.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/114.patch"
    },
    "body": "When not using a collection there is currently no way to utilize the existing url() method. Add a urlBase to your model let's you specify the base path without having to copy paste the entire url() method from Backbone.Model."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/113",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/113/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/113/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/113/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/113",
    "id": 452508,
    "number": 113,
    "title": "bind() enhancements",
    "user": {
      "login": "HenrikJoreteg",
      "id": 67925,
      "avatar_url": "https://avatars.githubusercontent.com/u/67925?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HenrikJoreteg",
      "html_url": "https://github.com/HenrikJoreteg",
      "followers_url": "https://api.github.com/users/HenrikJoreteg/followers",
      "following_url": "https://api.github.com/users/HenrikJoreteg/following{/other_user}",
      "gists_url": "https://api.github.com/users/HenrikJoreteg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HenrikJoreteg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HenrikJoreteg/subscriptions",
      "organizations_url": "https://api.github.com/users/HenrikJoreteg/orgs",
      "repos_url": "https://api.github.com/users/HenrikJoreteg/repos",
      "events_url": "https://api.github.com/users/HenrikJoreteg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HenrikJoreteg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2010-12-02T18:54:06Z",
    "updated_at": "2010-12-08T22:45:33Z",
    "closed_at": "2010-12-08T22:45:33Z",
    "body": "Rather than this:\r\n\r\n    this.collection.bind('add', _(this.refresh).bind(this));\r\n    this.collection.bind('remove', _(this.refresh).bind(this));\r\n    this.collection.bind('refresh', _(this.refresh).bind(this));\r\n\r\nIt'd be nice to be able to do this:\r\n\r\n    this.collection.bind('add remove refresh', _(this.refresh).bind(this));\r\n\r\nI know there's an `all` event, but sometimes I want to do add/remove/refresh without doing `change`. Supporting multiple events seems like a fairly simple, handy enhancement. \r\n\r\nAlso, since we so often end up binding an event handler to `this`, perhaps the `bind` function could take a third argument that sets the context:\r\n\r\n    this.collection.bind('add remove refresh', this.refresh, this);\r\n\r\nJust an idea. Thanks!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/106",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/106/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/106/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/106/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/106",
    "id": 445817,
    "number": 106,
    "title": "How to prevent a View from receiving a change event it triggered itself",
    "user": {
      "login": "martindrapeau",
      "id": 104156,
      "avatar_url": "https://avatars.githubusercontent.com/u/104156?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martindrapeau",
      "html_url": "https://github.com/martindrapeau",
      "followers_url": "https://api.github.com/users/martindrapeau/followers",
      "following_url": "https://api.github.com/users/martindrapeau/following{/other_user}",
      "gists_url": "https://api.github.com/users/martindrapeau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martindrapeau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martindrapeau/subscriptions",
      "organizations_url": "https://api.github.com/users/martindrapeau/orgs",
      "repos_url": "https://api.github.com/users/martindrapeau/repos",
      "events_url": "https://api.github.com/users/martindrapeau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martindrapeau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2010-11-30T04:58:39Z",
    "updated_at": "2010-11-30T21:05:46Z",
    "closed_at": "2010-11-30T23:10:16Z",
    "body": "Say you have one Model and two Views attached to it. One View makes a change and wants the change event triggered for the other but not itself. It wants to avoid having to render itself again. What is the best way to achieve that?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/104",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/104/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/104/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/104/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/104",
    "id": 445781,
    "number": 104,
    "title": "Fixing Javascript case sorting in comparators ...",
    "user": {
      "login": "beseku",
      "id": 4986,
      "avatar_url": "https://avatars.githubusercontent.com/u/4986?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beseku",
      "html_url": "https://github.com/beseku",
      "followers_url": "https://api.github.com/users/beseku/followers",
      "following_url": "https://api.github.com/users/beseku/following{/other_user}",
      "gists_url": "https://api.github.com/users/beseku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beseku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beseku/subscriptions",
      "organizations_url": "https://api.github.com/users/beseku/orgs",
      "repos_url": "https://api.github.com/users/beseku/repos",
      "events_url": "https://api.github.com/users/beseku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beseku/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-11-30T04:27:19Z",
    "updated_at": "2010-11-30T17:08:29Z",
    "closed_at": "2010-11-30T17:08:29Z",
    "body": "This might be an issue in the Underscore rather than Backbone library, but I found that Javascript, (OS X Safari 5.03) sorts uppercase then lowercase, (ABCabc) when using the collection comparator functions to return the name of the model. This seems wrong, and was simply fixed by appending .toUpperCase() to the comparator functions. You might want to bake this in to fix unexpected behaviour?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/100",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/100/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/100/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/100/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/100",
    "id": 441152,
    "number": 100,
    "title": "Implementation of issue 99: auto triggering of error event",
    "user": {
      "login": "tonydewan",
      "id": 54316,
      "avatar_url": "https://avatars.githubusercontent.com/u/54316?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonydewan",
      "html_url": "https://github.com/tonydewan",
      "followers_url": "https://api.github.com/users/tonydewan/followers",
      "following_url": "https://api.github.com/users/tonydewan/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonydewan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonydewan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonydewan/subscriptions",
      "organizations_url": "https://api.github.com/users/tonydewan/orgs",
      "repos_url": "https://api.github.com/users/tonydewan/repos",
      "events_url": "https://api.github.com/users/tonydewan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonydewan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-11-26T23:18:59Z",
    "updated_at": "2010-11-29T18:34:47Z",
    "closed_at": "2010-11-29T18:34:47Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/100",
      "html_url": "https://github.com/jashkenas/backbone/pull/100",
      "diff_url": "https://github.com/jashkenas/backbone/pull/100.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/100.patch"
    },
    "body": "Adds automatic triggering of `error` events on collection and model calls to Backbone.sync"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/93",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/93/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/93/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/93/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/93",
    "id": 437115,
    "number": 93,
    "title": "Allow query params to be passed through Model.fetch",
    "user": {
      "login": "ianmcdaniel",
      "id": 60611,
      "avatar_url": "https://avatars.githubusercontent.com/u/60611?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianmcdaniel",
      "html_url": "https://github.com/ianmcdaniel",
      "followers_url": "https://api.github.com/users/ianmcdaniel/followers",
      "following_url": "https://api.github.com/users/ianmcdaniel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianmcdaniel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianmcdaniel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianmcdaniel/subscriptions",
      "organizations_url": "https://api.github.com/users/ianmcdaniel/orgs",
      "repos_url": "https://api.github.com/users/ianmcdaniel/repos",
      "events_url": "https://api.github.com/users/ianmcdaniel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianmcdaniel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2010-11-24T17:39:19Z",
    "updated_at": "2011-10-08T14:29:35Z",
    "closed_at": "2010-12-13T23:16:59Z",
    "body": "This is a bit similar to issue #78\n\nIt would be great to have a way to pass url params in the fetch method. Many APIs allow you to pass in extra params to get more data. For instance, twitter lets you pass in the `include_entities` param to get more metadata about hashtags and user mentions.\n\n    http://api.twitter.com/version/users/show.json?include_entities=true\n\nIdeally I could add url params to the options object passed into the fetch method\n\n    var User = Backbone.Model.extend({\n      url:'http://api.twitter.com/version/users/show.json',\n    });\n    \n    twitter_user = new User;\n    twitter_user.fetch({\n      data:{\n        user_id:'12345',\n        include_entities:true\n      },\n      success:function(){ //do something }\n    })\n\ninstead of overwriting the url property and stringing up a bunch of query params\n    "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/92",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/92/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/92/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/92/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/92",
    "id": 435765,
    "number": 92,
    "title": "Bit more helpful error messages in rake tasks",
    "user": {
      "login": "zmack",
      "id": 1037,
      "avatar_url": "https://avatars.githubusercontent.com/u/1037?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zmack",
      "html_url": "https://github.com/zmack",
      "followers_url": "https://api.github.com/users/zmack/followers",
      "following_url": "https://api.github.com/users/zmack/following{/other_user}",
      "gists_url": "https://api.github.com/users/zmack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zmack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zmack/subscriptions",
      "organizations_url": "https://api.github.com/users/zmack/orgs",
      "repos_url": "https://api.github.com/users/zmack/repos",
      "events_url": "https://api.github.com/users/zmack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zmack/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-11-24T00:34:47Z",
    "updated_at": "2010-11-27T18:35:12Z",
    "closed_at": "2010-11-28T02:24:46Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/92",
      "html_url": "https://github.com/jashkenas/backbone/pull/92",
      "diff_url": "https://github.com/jashkenas/backbone/pull/92.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/92.patch"
    },
    "body": "Hey hey,\r\n\r\nI started messing around with backbone and I was looking for the rake task and the thing just bailed on me, given that i didn't have closure-compiler installed.\r\n\r\nAs such, I moved the require for closure-compiler on the build task, which was the only one that needed it, and added some error messages when prerequisites are not present.\r\n\r\nHope this helps"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/87",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/87/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/87/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/87/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/87",
    "id": 431329,
    "number": 87,
    "title": "Allow Backbone.sync to be overwritten for individual models",
    "user": {
      "login": "ianmcdaniel",
      "id": 60611,
      "avatar_url": "https://avatars.githubusercontent.com/u/60611?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianmcdaniel",
      "html_url": "https://github.com/ianmcdaniel",
      "followers_url": "https://api.github.com/users/ianmcdaniel/followers",
      "following_url": "https://api.github.com/users/ianmcdaniel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianmcdaniel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianmcdaniel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianmcdaniel/subscriptions",
      "organizations_url": "https://api.github.com/users/ianmcdaniel/orgs",
      "repos_url": "https://api.github.com/users/ianmcdaniel/repos",
      "events_url": "https://api.github.com/users/ianmcdaniel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianmcdaniel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2010-11-21T18:35:39Z",
    "updated_at": "2010-11-22T20:04:58Z",
    "closed_at": "2010-11-23T03:52:38Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/87",
      "html_url": "https://github.com/jashkenas/backbone/pull/87",
      "diff_url": "https://github.com/jashkenas/backbone/pull/87.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/87.patch"
    },
    "body": "It's not unusual to want some data stored locally and some stored on the server, but it seems that backbone only allows one or the other. If we copy Backbone.sync onto a 'sync' method in the models and collections then we can overwrite it per model/collection.\n\n    Backbone.localSync = function(){\n        // do local storage\n    }\n    \n    Backbone.Model.extend({ \n        sync:Backbone.localSync\n    });\n\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/84",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/84/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/84/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/84/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/84",
    "id": 423029,
    "number": 84,
    "title": "Add Backbone.Model#escape, for HTML-escaping attributes",
    "user": {
      "login": "jashkenas",
      "id": 4732,
      "avatar_url": "https://avatars.githubusercontent.com/u/4732?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jashkenas",
      "html_url": "https://github.com/jashkenas",
      "followers_url": "https://api.github.com/users/jashkenas/followers",
      "following_url": "https://api.github.com/users/jashkenas/following{/other_user}",
      "gists_url": "https://api.github.com/users/jashkenas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jashkenas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jashkenas/subscriptions",
      "organizations_url": "https://api.github.com/users/jashkenas/orgs",
      "repos_url": "https://api.github.com/users/jashkenas/repos",
      "events_url": "https://api.github.com/users/jashkenas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jashkenas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2010-11-16T22:50:04Z",
    "updated_at": "2011-08-10T07:49:01Z",
    "closed_at": "2010-11-29T18:37:53Z",
    "body": "There was a bit of discussion this afternoon in `#documentcloud` about different techniques for escaping user-generated content against XSS attacks. Some folks prefer to escape once, on the way in to the database, and other folks to have their template interpolation tags escape text by default, right as the HTML is being rendered. Some pros and cons:\n\n  * If you escape on the way in to the database, your content can never be escaped for other formats later.\n  * Escaping at the template layer is notoriously inefficient ... the same piece of data may be HTML-escaped hundreds of times for a single view.\n  * Using template escaping is also incorrect for (arguably) the majority of interpolations, which don't originate from user-supplied content.\n\nI think that because there's more information available with Backbone, we can do a better job here. Your user-generated data is always going to be an attribute on a Model, and we know that we're escaping for HTML, because we're in a browser... I'm proposing that we add an `escape` method to Backbone.Model, as an alternative to `get`, which instead returns the HTML-escaped value of any attribute. You could use it from a View's template like this:\n\n    <div class=\"account\">\n      <%= account.escape('name') %>\n    </div>\n\nWe could be smart about it, and lazily cache the attributes you're escaping, so that a given attribute need never be escaped more than one time, even if it's rendered in hundreds of places in the UI.\n\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/82",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/82/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/82/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/82/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/82",
    "id": 422937,
    "number": 82,
    "title": "Appending items to a collection",
    "user": {
      "login": "ckorhonen",
      "id": 39121,
      "avatar_url": "https://avatars.githubusercontent.com/u/39121?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ckorhonen",
      "html_url": "https://github.com/ckorhonen",
      "followers_url": "https://api.github.com/users/ckorhonen/followers",
      "following_url": "https://api.github.com/users/ckorhonen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ckorhonen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ckorhonen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ckorhonen/subscriptions",
      "organizations_url": "https://api.github.com/users/ckorhonen/orgs",
      "repos_url": "https://api.github.com/users/ckorhonen/repos",
      "events_url": "https://api.github.com/users/ckorhonen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ckorhonen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2010-11-16T22:05:59Z",
    "updated_at": "2010-12-08T19:47:17Z",
    "closed_at": "2010-12-08T19:47:17Z",
    "body": "I'm trying to manage performance in my application and was wondering what the best way to append items to a collection would be? I don't see any inbuilt method for handling this.\r\n\r\nCurrently I'm bootstrapping my app with a 100-item collection, upon page load, using .refresh() to add all the models at once. In my database, a user may have a lot more items which I'm wanting to lazy load on demand as a user scrolls, keeping the previously loaded items on the page.\r\n\r\nOn the Rails side, I'm just treating this as pagination based on a URL parameter.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/80",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/80/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/80/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/80/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/80",
    "id": 422751,
    "number": 80,
    "title": "Ability to declare a set of default attributes to a model",
    "user": {
      "login": "joonas",
      "id": 19793,
      "avatar_url": "https://avatars.githubusercontent.com/u/19793?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joonas",
      "html_url": "https://github.com/joonas",
      "followers_url": "https://api.github.com/users/joonas/followers",
      "following_url": "https://api.github.com/users/joonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/joonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joonas/subscriptions",
      "organizations_url": "https://api.github.com/users/joonas/orgs",
      "repos_url": "https://api.github.com/users/joonas/repos",
      "events_url": "https://api.github.com/users/joonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-11-16T20:39:44Z",
    "updated_at": "2010-11-22T19:23:32Z",
    "closed_at": "2010-11-22T19:23:32Z",
    "body": "As we were discussing on the IRC, I think it would be nice if you could somehow declare a set of default attributes for a model that would get automatically set to their associated values when a model is initialized.\n\nI think the implementation could be something along the lines of what you suggested:\n\n    Backbone.Model.extend({ \n        defaultAttributes: {\n            key: 'value',\n            anotherKey: 'Its value'\n        }\n    });\n    \nor even simpler:\n    \n    Backbone.Model.extend({\n        defaults: {\n            key: 'value',\n            anotherKey: 'Its value'\n        }\n    });"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/78",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/78/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/78/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/78/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/78",
    "id": 419804,
    "number": 78,
    "title": "API suggestions regarding fetching models. (Model.find)",
    "user": {
      "login": "michael",
      "id": 2931,
      "avatar_url": "https://avatars.githubusercontent.com/u/2931?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michael",
      "html_url": "https://github.com/michael",
      "followers_url": "https://api.github.com/users/michael/followers",
      "following_url": "https://api.github.com/users/michael/following{/other_user}",
      "gists_url": "https://api.github.com/users/michael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michael/subscriptions",
      "organizations_url": "https://api.github.com/users/michael/orgs",
      "repos_url": "https://api.github.com/users/michael/repos",
      "events_url": "https://api.github.com/users/michael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michael/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2010-11-15T16:40:15Z",
    "updated_at": "2012-01-06T20:12:21Z",
    "closed_at": "2012-01-06T20:12:21Z",
    "body": "Thanks for fixing Issue #77 that fast!\n\nJust an idea regarding Model#fetch:\n\nWhy not adding a `Model.get` class method that takes an id and fetches the model right away. \n\nInstead of writing:\n\n    this.model = new Document({id: id});\n    this.model.fetch({\n      success: function() {\n        // init doc\n      }\n    });\n\nOne could write:\n\n    this.model = Document.get('doc-id', {\n       success: function() {\n         // init doc\n       }\n    })\n\nThat being said, an `Model.all` class method could load a whole Collection of Documents in the same fashion.\n\n    var documents = Document.all({\n      success: function() { ...}\n    });\n\n\nWhat's your current strategy regarding the supply of query-params when fetching a Collection of items from the server, so that the server can deliver a reduced set of resources (according to the specified query-params)\n\nI could imagine supplying them along with Model#all (Collection#fetch resp.):\n\n    var documents = Document.all({\n      'author': 'john',\n      'wordcount>=': 100 // greater than or equal to 100\n    }, {\n      success: function() { ...}\n    });\n\nI totally like the JSON based syntax of MQL (the query language used by freebase.com) http://wiki.freebase.com/images/e/e0/MQLcheatsheet-081208.pdf . Perhaps this could be a strategy to be used along with Backbone.js.\n\nI'm not sure if this fits into the current design, though (esp. regarding the separation of Models and Collections). This is just an idea inspired by the API of DataMapper.\n\n-- Michael"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/69",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/69/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/69/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/69/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/69",
    "id": 414553,
    "number": 69,
    "title": "Segments of URL as History object property",
    "user": {
      "login": "beseku",
      "id": 4986,
      "avatar_url": "https://avatars.githubusercontent.com/u/4986?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/beseku",
      "html_url": "https://github.com/beseku",
      "followers_url": "https://api.github.com/users/beseku/followers",
      "following_url": "https://api.github.com/users/beseku/following{/other_user}",
      "gists_url": "https://api.github.com/users/beseku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/beseku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/beseku/subscriptions",
      "organizations_url": "https://api.github.com/users/beseku/orgs",
      "repos_url": "https://api.github.com/users/beseku/repos",
      "events_url": "https://api.github.com/users/beseku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/beseku/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-11-12T07:56:11Z",
    "updated_at": "2010-11-12T15:20:50Z",
    "closed_at": "2010-11-12T15:20:50Z",
    "body": "I've been working with Backbone for an internal project and one thing I have found I often need is the segments of the URL as seen by the router. It's easy to do this, (assign the segments when a route gets executed), but it would be handy if this was processed automatically when the controller routes a request, and exposed through some global Backbone variable, (maybe in the history object)..."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/57",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/57/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/57/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/57/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/57",
    "id": 399450,
    "number": 57,
    "title": "Optional protoProps hash for subclasses?",
    "user": {
      "login": "ghost",
      "id": 10137,
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-11-04T01:54:21Z",
    "updated_at": "2010-11-06T13:50:03Z",
    "closed_at": "2010-11-06T13:50:03Z",
    "body": "I had the idea that protoProps should be an optional argument for a couple of reasons:\r\n\r\na) eliminates the resulting error if it's omitted\r\nb) means that instanceof can be accurate for subclasses that exist to be descriptive only\r\nc) more consistency, considering classProps is optional\r\n\r\nI've studied the inheritance code and I can't see a reason why protoProps should have to be required to create a subclass (especially if it's just a conceptual one).\r\n\r\nAnyone have any comments on this?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/54",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/54/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/54/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/54/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/54",
    "id": 398392,
    "number": 54,
    "title": "add options argument to Backbone.Model initialize function",
    "user": {
      "login": "rsim",
      "id": 4736,
      "avatar_url": "https://avatars.githubusercontent.com/u/4736?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rsim",
      "html_url": "https://github.com/rsim",
      "followers_url": "https://api.github.com/users/rsim/followers",
      "following_url": "https://api.github.com/users/rsim/following{/other_user}",
      "gists_url": "https://api.github.com/users/rsim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rsim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rsim/subscriptions",
      "organizations_url": "https://api.github.com/users/rsim/orgs",
      "repos_url": "https://api.github.com/users/rsim/repos",
      "events_url": "https://api.github.com/users/rsim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rsim/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-11-03T16:45:58Z",
    "updated_at": "2010-11-04T00:33:02Z",
    "closed_at": "2010-11-04T07:32:50Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/54",
      "html_url": "https://github.com/jashkenas/backbone/pull/54",
      "diff_url": "https://github.com/jashkenas/backbone/pull/54.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/54.patch"
    },
    "body": "It would be useful to have additional options argument in Backbone.Model initialize function in similar way as in Backbone.Collection initialize function. Options could be used to pass reference to other models that should not be stored in attributes (but could be stored in initializer as property). It could be useful to model has_one / belongs_to relationships, e.g.\r\n\r\n    User = Backbone.Model.extend({\r\n      newProfile: function(attributes) {\r\n        this.profile = new Profile(attributes, {user: this});\r\n      }\r\n    });\r\n    Profile = Backbone.Model.extend({\r\n      initialize: function(attributes, options) {\r\n        this.user = options.user;\r\n      },\r\n      fullDescription: function() {\r\n        return this.user.get(\"name\")+\" has profile desription: \"+this.get(\"description\");\r\n      }\r\n    });\r\n    user = new User({name: \"John\"});\r\n    user.newProfile({description: \"lorem ipsum\"});\r\n    user.profile.fullDescription();\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/53",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/53/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/53/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/53/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/53",
    "id": 397506,
    "number": 53,
    "title": "Updated inherits helper function",
    "user": {
      "login": "ghost",
      "id": 10137,
      "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2010-11-03T10:23:57Z",
    "updated_at": "2010-11-04T01:48:32Z",
    "closed_at": "2010-11-03T23:11:25Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/53",
      "html_url": "https://github.com/jashkenas/backbone/pull/53",
      "diff_url": "https://github.com/jashkenas/backbone/pull/53.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/53.patch"
    },
    "body": "I reformatted and rearranged some of the code in inherits so it's easier to follow, and added some additional comments. It took me a while to figure out exactly what this function was doing so I think this extra content will help others understand as well."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/52",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/52/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/52/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/52/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/52",
    "id": 396978,
    "number": 52,
    "title": "Model force validate",
    "user": {
      "login": "chrislloyd",
      "id": 718,
      "avatar_url": "https://avatars.githubusercontent.com/u/718?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrislloyd",
      "html_url": "https://github.com/chrislloyd",
      "followers_url": "https://api.github.com/users/chrislloyd/followers",
      "following_url": "https://api.github.com/users/chrislloyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrislloyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrislloyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrislloyd/subscriptions",
      "organizations_url": "https://api.github.com/users/chrislloyd/orgs",
      "repos_url": "https://api.github.com/users/chrislloyd/repos",
      "events_url": "https://api.github.com/users/chrislloyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrislloyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2010-11-03T00:16:35Z",
    "updated_at": "2012-12-14T14:53:47Z",
    "closed_at": "2010-11-08T20:22:40Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/52",
      "html_url": "https://github.com/jashkenas/backbone/pull/52",
      "diff_url": "https://github.com/jashkenas/backbone/pull/52.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/52.patch"
    },
    "body": "Lets Models bypass validation if the force option is supplied:\r\n\r\n    foo.set({admin: true}, {force: true})\r\n\r\nHandy when wanting validation to only occur on save."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/50",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/50/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/50/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/50/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/50",
    "id": 394687,
    "number": 50,
    "title": "Todo example: remove model dependency on view",
    "user": {
      "login": "willmoffat",
      "id": 119835,
      "avatar_url": "https://avatars.githubusercontent.com/u/119835?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willmoffat",
      "html_url": "https://github.com/willmoffat",
      "followers_url": "https://api.github.com/users/willmoffat/followers",
      "following_url": "https://api.github.com/users/willmoffat/following{/other_user}",
      "gists_url": "https://api.github.com/users/willmoffat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willmoffat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willmoffat/subscriptions",
      "organizations_url": "https://api.github.com/users/willmoffat/orgs",
      "repos_url": "https://api.github.com/users/willmoffat/repos",
      "events_url": "https://api.github.com/users/willmoffat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willmoffat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-11-01T23:48:06Z",
    "updated_at": "2010-11-02T14:04:39Z",
    "closed_at": "2010-11-02T14:04:39Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/50",
      "html_url": "https://github.com/jashkenas/backbone/pull/50",
      "diff_url": "https://github.com/jashkenas/backbone/pull/50.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/50.patch"
    },
    "body": "As suggested by @frank06"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/49",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/49/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/49/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/49/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/49",
    "id": 394558,
    "number": 49,
    "title": "ToDo example - better separation of model and view",
    "user": {
      "login": "willmoffat",
      "id": 119835,
      "avatar_url": "https://avatars.githubusercontent.com/u/119835?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willmoffat",
      "html_url": "https://github.com/willmoffat",
      "followers_url": "https://api.github.com/users/willmoffat/followers",
      "following_url": "https://api.github.com/users/willmoffat/following{/other_user}",
      "gists_url": "https://api.github.com/users/willmoffat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willmoffat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willmoffat/subscriptions",
      "organizations_url": "https://api.github.com/users/willmoffat/orgs",
      "repos_url": "https://api.github.com/users/willmoffat/repos",
      "events_url": "https://api.github.com/users/willmoffat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willmoffat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-11-01T22:44:09Z",
    "updated_at": "2010-11-01T22:51:09Z",
    "closed_at": "2010-11-02T05:50:30Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/49",
      "html_url": "https://github.com/jashkenas/backbone/pull/49",
      "diff_url": "https://github.com/jashkenas/backbone/pull/49.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/49.patch"
    },
    "body": "Hi, this is a minor nitpick, but it's weird that the Todo Model was manipulating the DOM directly. Here's a suggested fix."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/48",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/48/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/48/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/48/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/48",
    "id": 392705,
    "number": 48,
    "title": "Event#bindOnce",
    "user": {
      "login": "chrislloyd",
      "id": 718,
      "avatar_url": "https://avatars.githubusercontent.com/u/718?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrislloyd",
      "html_url": "https://github.com/chrislloyd",
      "followers_url": "https://api.github.com/users/chrislloyd/followers",
      "following_url": "https://api.github.com/users/chrislloyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrislloyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrislloyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrislloyd/subscriptions",
      "organizations_url": "https://api.github.com/users/chrislloyd/orgs",
      "repos_url": "https://api.github.com/users/chrislloyd/repos",
      "events_url": "https://api.github.com/users/chrislloyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrislloyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2010-10-31T23:51:30Z",
    "updated_at": "2010-11-01T16:40:01Z",
    "closed_at": "2010-11-01T16:40:01Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/48",
      "html_url": "https://github.com/jashkenas/backbone/pull/48",
      "diff_url": "https://github.com/jashkenas/backbone/pull/48.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/48.patch"
    },
    "body": "Binds a callback but only gets triggered the first time the event is called. I've found this pattern to be super handy for instantiating things when an event is called multiple times. For instance (in CoffeeScript) this renders the footer only the first time the user logs in:\r\n\r\n    session.bind 'status:change', =>\r\n      dynamic_content.render(session)\r\n\r\n    session.bindOnce 'status:change', ->\r\n      static_footer.render()\r\n\r\nAlso, when the user hits the \"save\" button, if they arn't signed in it will prompt them to do so and save the form when they do. If they sign out and then back in again, the form wont save as the callback will have been unbound.\r\n\r\n      fn = ->\r\n        @save {...}\r\n  \r\n      if session.logged_in?\r\n        fn()\r\n      else\r\n       session.bindOnce 'signin', fn\r\n       session_controller.signIn()\r\n\r\nI could be barking up the wrong tree with a terrible anti-pattern but it seems pretty sweet to me."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/47",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/47/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/47/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/47/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/47",
    "id": 392612,
    "number": 47,
    "title": "Model#clear",
    "user": {
      "login": "chrislloyd",
      "id": 718,
      "avatar_url": "https://avatars.githubusercontent.com/u/718?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrislloyd",
      "html_url": "https://github.com/chrislloyd",
      "followers_url": "https://api.github.com/users/chrislloyd/followers",
      "following_url": "https://api.github.com/users/chrislloyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrislloyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrislloyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrislloyd/subscriptions",
      "organizations_url": "https://api.github.com/users/chrislloyd/orgs",
      "repos_url": "https://api.github.com/users/chrislloyd/repos",
      "events_url": "https://api.github.com/users/chrislloyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrislloyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-10-31T21:48:51Z",
    "updated_at": "2010-11-01T15:44:10Z",
    "closed_at": "2010-11-01T22:43:11Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/47",
      "html_url": "https://github.com/jashkenas/backbone/pull/47",
      "diff_url": "https://github.com/jashkenas/backbone/pull/47.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/47.patch"
    },
    "body": "Just added a quick method to clear the attributes of a model.\n\n     user.clear()\n\nCheers!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/46",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/46/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/46/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/46/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/46",
    "id": 389353,
    "number": 46,
    "title": "New Sync default behavior - take 2",
    "user": {
      "login": "mrjjwright",
      "id": 4343,
      "avatar_url": "https://avatars.githubusercontent.com/u/4343?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrjjwright",
      "html_url": "https://github.com/mrjjwright",
      "followers_url": "https://api.github.com/users/mrjjwright/followers",
      "following_url": "https://api.github.com/users/mrjjwright/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrjjwright/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrjjwright/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrjjwright/subscriptions",
      "organizations_url": "https://api.github.com/users/mrjjwright/orgs",
      "repos_url": "https://api.github.com/users/mrjjwright/repos",
      "events_url": "https://api.github.com/users/mrjjwright/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrjjwright/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-10-29T17:00:41Z",
    "updated_at": "2010-11-01T17:56:11Z",
    "closed_at": "2010-11-02T00:54:11Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/46",
      "html_url": "https://github.com/jashkenas/backbone/pull/46",
      "diff_url": "https://github.com/jashkenas/backbone/pull/46.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/46.patch"
    },
    "body": "Ignore the first commit, this one is better I think.  After studying how Rals 2.3 and Rails 3 do PUT JSON routing,  and the underlying Rack code mentioned here (https://rails.lighthouseapp.com/projects/8994/tickets/2289-_methodput-ignored-for-xhr-and-xml-requests) and doing some testing, I think the last commit in this pull request is the cleanest and simplest approach for Backbone users.\n\nBy default all data is sent `application/json` encoded.  The model is simply converted to a JSON string and sent in the body.  The HTTP method mapping in the documentation holds, with updates being sent as PUT requests and deletes as DELETE requests.\n\nIn order to support legacy end-points that don't support application/json in the body or PUT requests, or legacy browsers that will not recognize the PUT request, users can turn on `emulateHttp`.   This will do the following\n\n* For PUT and DELETE requests, they will be sent as POST, the right `_method` param will be put in the body, and an appropriate `X-Http-Method-Override` header will be added to the request.  This will guarantee safe routing in Rails 2.3 pre-rack routing.\n* Send the model as a `model` param in the body.\n* Always encode the body as `application/x-www-form-urlencoded`.\n\nI got rid of the `emulateJSON` idea because in cases where it was needed, the flag `emulateHTTP` would also be needed and then questions would arise as to how they interact.  We don't want to cover all the possible uses cases.  We just want to provide one broad clean default option and one broad legacy option, and let the user override `Backbone.sync` if neither of them work.  Am I right?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/37",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/37/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/37/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/37/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/37",
    "id": 384934,
    "number": 37,
    "title": "Configurable id field name",
    "user": {
      "login": "tchak",
      "id": 12428,
      "avatar_url": "https://avatars.githubusercontent.com/u/12428?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tchak",
      "html_url": "https://github.com/tchak",
      "followers_url": "https://api.github.com/users/tchak/followers",
      "following_url": "https://api.github.com/users/tchak/following{/other_user}",
      "gists_url": "https://api.github.com/users/tchak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tchak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tchak/subscriptions",
      "organizations_url": "https://api.github.com/users/tchak/orgs",
      "repos_url": "https://api.github.com/users/tchak/repos",
      "events_url": "https://api.github.com/users/tchak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tchak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2010-10-27T14:14:08Z",
    "updated_at": "2011-02-07T19:03:06Z",
    "closed_at": "2010-11-09T02:51:44Z",
    "body": "some ORMs (mongoid for example) use _id instead of id. Would you accept a patch to support configurable id field name?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/36",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/36/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/36/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/36/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/36",
    "id": 376495,
    "number": 36,
    "title": "Ability to circumvent the \"models\": [] namespacing requirement in Backbone.Collection.fetch",
    "user": {
      "login": "frekw",
      "id": 43631,
      "avatar_url": "https://avatars.githubusercontent.com/u/43631?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frekw",
      "html_url": "https://github.com/frekw",
      "followers_url": "https://api.github.com/users/frekw/followers",
      "following_url": "https://api.github.com/users/frekw/following{/other_user}",
      "gists_url": "https://api.github.com/users/frekw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frekw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frekw/subscriptions",
      "organizations_url": "https://api.github.com/users/frekw/orgs",
      "repos_url": "https://api.github.com/users/frekw/repos",
      "events_url": "https://api.github.com/users/frekw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frekw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2010-10-22T13:55:28Z",
    "updated_at": "2010-10-25T15:33:05Z",
    "closed_at": "2010-10-25T21:31:29Z",
    "body": "Hi!\r\n\r\nWhile I like the idea to use models as a namespace, you sometimes will want to integrate against an existing JSON API that either uses another key, or a plain array. It would be nice to have the ability to somehow specify this with a property/function in the collection you're creating, e.g by declaring a responseKey property/function which is used to determine where in the response the model data is (much like the current url-property).\r\n\r\nThe only current solution is to monkey-patch the fetch-method (specifically the success-callback) itself, which isn't very pretty.\r\n\r\nExample:\r\n\r\nvar c = Backbone.Collection.extend({\r\n  // ...\r\n  responseKey: \"data\"\r\n  // ...\r\n});\r\n\r\nvar c2 = Backbone.Collection.extend({\r\n  responseKey: function(response){ return response; } // if it's just an array.\r\n  // you could also go deeper, eg response.data.documents\r\n});\r\n\r\nShould be a very simple fix to implement, so what do you guys think?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/34",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/34/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/34/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/34/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/34",
    "id": 373246,
    "number": 34,
    "title": "Backbone.Collection.toJSON()",
    "user": {
      "login": "bunchesofdonald",
      "id": 354286,
      "avatar_url": "https://avatars.githubusercontent.com/u/354286?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bunchesofdonald",
      "html_url": "https://github.com/bunchesofdonald",
      "followers_url": "https://api.github.com/users/bunchesofdonald/followers",
      "following_url": "https://api.github.com/users/bunchesofdonald/following{/other_user}",
      "gists_url": "https://api.github.com/users/bunchesofdonald/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bunchesofdonald/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bunchesofdonald/subscriptions",
      "organizations_url": "https://api.github.com/users/bunchesofdonald/orgs",
      "repos_url": "https://api.github.com/users/bunchesofdonald/repos",
      "events_url": "https://api.github.com/users/bunchesofdonald/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bunchesofdonald/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-10-20T19:39:46Z",
    "updated_at": "2010-10-20T20:06:56Z",
    "closed_at": "2010-10-21T03:02:00Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/34",
      "html_url": "https://github.com/jashkenas/backbone/pull/34",
      "diff_url": "https://github.com/jashkenas/backbone/pull/34.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/34.patch"
    },
    "body": "When using simple javascript templating solutions that expect just a JSON object and wanting to dump an entire collection into the template, this makes a lot of sense."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/31",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/31/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/31/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/31/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/31",
    "id": 371008,
    "number": 31,
    "title": "Add underscore's chain() method to Collection",
    "user": {
      "login": "fitzgen",
      "id": 74571,
      "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fitzgen",
      "html_url": "https://github.com/fitzgen",
      "followers_url": "https://api.github.com/users/fitzgen/followers",
      "following_url": "https://api.github.com/users/fitzgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions",
      "organizations_url": "https://api.github.com/users/fitzgen/orgs",
      "repos_url": "https://api.github.com/users/fitzgen/repos",
      "events_url": "https://api.github.com/users/fitzgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fitzgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-10-19T19:41:03Z",
    "updated_at": "2010-10-19T19:55:15Z",
    "closed_at": "2010-10-20T02:50:56Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/31",
      "html_url": "https://github.com/jashkenas/backbone/pull/31",
      "diff_url": "https://github.com/jashkenas/backbone/pull/31.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/31.patch"
    },
    "body": "I found that multiple times I want to chain underscore methods from a collection. Is there any reason why this isn't currently implemented?\r\n\r\nIt's implemented separately from the rest of the underscore methods because it relies on underscore's constructor. Couldn't think of a better way to do it other than just make it a special case compared to the rest of the proxied underscore methods."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/29",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/29/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/29/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/29/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/29",
    "id": 370916,
    "number": 29,
    "title": "Added another demo app",
    "user": {
      "login": "fitzgen",
      "id": 74571,
      "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fitzgen",
      "html_url": "https://github.com/fitzgen",
      "followers_url": "https://api.github.com/users/fitzgen/followers",
      "following_url": "https://api.github.com/users/fitzgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions",
      "organizations_url": "https://api.github.com/users/fitzgen/orgs",
      "repos_url": "https://api.github.com/users/fitzgen/repos",
      "events_url": "https://api.github.com/users/fitzgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fitzgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2010-10-19T18:43:56Z",
    "updated_at": "2010-10-19T19:12:02Z",
    "closed_at": "2010-10-20T02:03:36Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/29",
      "html_url": "https://github.com/jashkenas/backbone/pull/29",
      "diff_url": "https://github.com/jashkenas/backbone/pull/29.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/29.patch"
    },
    "body": "Hey everyone,\r\n\r\nI've added another demo app to the demos branch. It is a simple task manager, and I have tried to document the source fairly well so that someone new to Backbone would be able to pick it up pretty quickly.\r\n\r\nOf course, I am new to Backbone as well, so if I haven't used \"The Backbone Way\", I would appreciate feedback. I'll continue iterating on it until it provides a good example for newcomers.\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/28",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/28/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/28/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/28/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/28",
    "id": 370861,
    "number": 28,
    "title": "Why isn't this.handleEvents() called in Backbone.View.prototype.initialize?",
    "user": {
      "login": "fitzgen",
      "id": 74571,
      "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fitzgen",
      "html_url": "https://github.com/fitzgen",
      "followers_url": "https://api.github.com/users/fitzgen/followers",
      "following_url": "https://api.github.com/users/fitzgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions",
      "organizations_url": "https://api.github.com/users/fitzgen/orgs",
      "repos_url": "https://api.github.com/users/fitzgen/repos",
      "events_url": "https://api.github.com/users/fitzgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fitzgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2010-10-19T18:18:25Z",
    "updated_at": "2010-10-25T16:34:51Z",
    "closed_at": "2010-10-25T21:53:55Z",
    "body": "Or even in the constructor or render? I can't think of a use case for when I wouldn't want to bind the event handlers on creation or render; I feel like I'm being forced to write little stubs that look like this all the time:\r\n\r\n    ...\r\n    initialize: function () {\r\n        this.handleEvents();\r\n    },\r\n    ...\r\n\r\nWhen I have nothing else to do in initialize."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/19",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/19/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/19/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/19/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/19",
    "id": 366512,
    "number": 19,
    "title": "Backbone is awesome.",
    "user": {
      "login": "tmpvar",
      "id": 46673,
      "avatar_url": "https://avatars.githubusercontent.com/u/46673?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tmpvar",
      "html_url": "https://github.com/tmpvar",
      "followers_url": "https://api.github.com/users/tmpvar/followers",
      "following_url": "https://api.github.com/users/tmpvar/following{/other_user}",
      "gists_url": "https://api.github.com/users/tmpvar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tmpvar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tmpvar/subscriptions",
      "organizations_url": "https://api.github.com/users/tmpvar/orgs",
      "repos_url": "https://api.github.com/users/tmpvar/repos",
      "events_url": "https://api.github.com/users/tmpvar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tmpvar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-10-17T07:23:57Z",
    "updated_at": "2010-11-23T19:08:35Z",
    "closed_at": "2010-10-17T21:10:26Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/19",
      "html_url": "https://github.com/jashkenas/backbone/pull/19",
      "diff_url": "https://github.com/jashkenas/backbone/pull/19.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/19.patch"
    },
    "body": "Perhaps it's time for some npm love? I added a package.json to kick off the process!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/13",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/13/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/13/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/13/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/13",
    "id": 363720,
    "number": 13,
    "title": "Brace",
    "user": {
      "login": "willbailey",
      "id": 4264,
      "avatar_url": "https://avatars.githubusercontent.com/u/4264?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willbailey",
      "html_url": "https://github.com/willbailey",
      "followers_url": "https://api.github.com/users/willbailey/followers",
      "following_url": "https://api.github.com/users/willbailey/following{/other_user}",
      "gists_url": "https://api.github.com/users/willbailey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willbailey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willbailey/subscriptions",
      "organizations_url": "https://api.github.com/users/willbailey/orgs",
      "repos_url": "https://api.github.com/users/willbailey/repos",
      "events_url": "https://api.github.com/users/willbailey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willbailey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2010-10-15T08:31:48Z",
    "updated_at": "2010-10-15T15:03:23Z",
    "closed_at": "2010-10-15T15:03:23Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/13",
      "html_url": "https://github.com/jashkenas/backbone/pull/13",
      "diff_url": "https://github.com/jashkenas/backbone/pull/13.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/13.patch"
    },
    "body": "Backbone.Brace -- a second pass at declarative event routing.\r\n\r\nBased on feedback from bgrins and jashkenas I've improved the approach with declarative bindings to be more flexible and configurable, while still providing a conventional approach if desired.\r\n\r\nThe idea here is that Brace provides a default routing scheme that can be overridden with a router function and or a routing table. Brace maintains a registry of these routes so that the bindings can be released easily. The design of this is now orthogonal to Backbone.View. Brace could be mixed in directly to any object by the user such as a controller or custom view just as easily as it can be used inside Backbone.View.\r\n\r\nThe name choice is probably a little too cute, but I thought I'd throw it out there.\r\n\r\nLet me know if you think this is an improvement? Thanks for your feedback."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/12",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/12/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/12/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/12/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/12",
    "id": 363586,
    "number": 12,
    "title": "Automatic creation of getter/setter accessor functions",
    "user": {
      "login": "fitzgen",
      "id": 74571,
      "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fitzgen",
      "html_url": "https://github.com/fitzgen",
      "followers_url": "https://api.github.com/users/fitzgen/followers",
      "following_url": "https://api.github.com/users/fitzgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions",
      "organizations_url": "https://api.github.com/users/fitzgen/orgs",
      "repos_url": "https://api.github.com/users/fitzgen/repos",
      "events_url": "https://api.github.com/users/fitzgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fitzgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2010-10-15T06:05:47Z",
    "updated_at": "2010-10-19T00:03:15Z",
    "closed_at": "2010-10-19T00:03:15Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/12",
      "html_url": "https://github.com/jashkenas/backbone/pull/12",
      "diff_url": "https://github.com/jashkenas/backbone/pull/12.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/12.patch"
    },
    "body": "I think that `foo.get(\"something\")` and `foo.set({ something : another })` could be knocked up a notch with read/write accessors:\n\n    var Fruit = Backbone.Model.extend({\n      getSet  : [\"condition\", \"kind\"],\n      inspect : function () {\n        var cond = this.condition(),\n            kind = this.kind();\n        return _.template(\"a <%= cond %> <%= kind %>\", { cond : cond, kind : kind });\n      }\n    });\n    var banana = new Fruit({ kind : \"banana\" });\n    banana.condition(\"ripe\");\n    console.log(banana.inspect());\n    // Logs: \"a ripe banana\"\n\nI think explicitly named getters and setters are much cleaner and more explicit than calling \"get\" or \"set\" all the time, so we might as well provide them out of the box if they are explicitly asked for via `getSet`.\n\nYou could even take this approach further and iterate over the keys in `protoProps`, find every member that is not a function, and create named accessors automatically for all of them.\n\nJust a note: I used `getSet` because it was the first thing that came to mind, but I think `accessors` would work just as well (or even better).\n\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/11",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/11/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/11/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/11/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/11",
    "id": 363338,
    "number": 11,
    "title": "_method work-around",
    "user": {
      "login": "hansoksendahl",
      "id": 17028,
      "avatar_url": "https://avatars.githubusercontent.com/u/17028?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hansoksendahl",
      "html_url": "https://github.com/hansoksendahl",
      "followers_url": "https://api.github.com/users/hansoksendahl/followers",
      "following_url": "https://api.github.com/users/hansoksendahl/following{/other_user}",
      "gists_url": "https://api.github.com/users/hansoksendahl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hansoksendahl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hansoksendahl/subscriptions",
      "organizations_url": "https://api.github.com/users/hansoksendahl/orgs",
      "repos_url": "https://api.github.com/users/hansoksendahl/repos",
      "events_url": "https://api.github.com/users/hansoksendahl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hansoksendahl/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2010-10-15T00:39:21Z",
    "updated_at": "2010-10-17T14:58:45Z",
    "closed_at": "2010-10-17T21:53:50Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/11",
      "html_url": "https://github.com/jashkenas/backbone/pull/11",
      "diff_url": "https://github.com/jashkenas/backbone/pull/11.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/11.patch"
    },
    "body": "Howdy folks.\r\n\r\nI added support for the Sinatra style _method hack.  It's disabled by default but if needed it turns HTTP PUT and DELETE requests into POST requests and sends an additional data value for \"_method\".\r\n\r\nThis makes backbone.js a bit more useful on the client side.  My friend was having problems getting the body of PUT requests on PHP that's when the need for the work-around became apparent.\r\n\r\nNote:\r\nI added the variable USE_METHOD_HACK directly to the Backbone object I couldn't think of another place to put the setting."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/9",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/9/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/9/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/9/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/9",
    "id": 362182,
    "number": 9,
    "title": "Make the comparator method behave like Array.sort()",
    "user": {
      "login": "fbuchinger",
      "id": 287434,
      "avatar_url": "https://avatars.githubusercontent.com/u/287434?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fbuchinger",
      "html_url": "https://github.com/fbuchinger",
      "followers_url": "https://api.github.com/users/fbuchinger/followers",
      "following_url": "https://api.github.com/users/fbuchinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/fbuchinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fbuchinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fbuchinger/subscriptions",
      "organizations_url": "https://api.github.com/users/fbuchinger/orgs",
      "repos_url": "https://api.github.com/users/fbuchinger/repos",
      "events_url": "https://api.github.com/users/fbuchinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fbuchinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2010-10-14T11:57:22Z",
    "updated_at": "2012-01-06T19:55:42Z",
    "closed_at": "2012-01-06T19:53:48Z",
    "body": "congrats to backbone.js, looks very promising.\r\n\r\nOne point of critism tough: the Backbone.Collection.Comparator method looks a bit weird to me. I would appreciate a comparator method defined in Backbone.Model that works like Javascript's array sort: it gets 2 model instances a and b for comparison and returns -1 if a > b, 0 if a == b or 1 if a < b.\r\n\r\nThis would allow more elaborate comparison functions that e.g. take multiple properties into account."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/7",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/7/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/7/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/7/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/7",
    "id": 361884,
    "number": 7,
    "title": "A simple example app would be very helpful",
    "user": {
      "login": "ericflo",
      "id": 1228,
      "avatar_url": "https://avatars.githubusercontent.com/u/1228?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericflo",
      "html_url": "https://github.com/ericflo",
      "followers_url": "https://api.github.com/users/ericflo/followers",
      "following_url": "https://api.github.com/users/ericflo/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericflo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericflo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericflo/subscriptions",
      "organizations_url": "https://api.github.com/users/ericflo/orgs",
      "repos_url": "https://api.github.com/users/ericflo/repos",
      "events_url": "https://api.github.com/users/ericflo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericflo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 16,
    "created_at": "2010-10-14T07:41:25Z",
    "updated_at": "2010-12-06T17:34:02Z",
    "closed_at": "2010-10-26T22:46:55Z",
    "body": "I realize this exposes my stupidity when it comes to client-side programming, but I'm having a bit of a hard time figuring out how to fit all these pieces together.  I think that shipping a small example showing how one might put the pieces together would help quite a few people out.\r\n\r\nFor example, is it good practice to create a global instance of a Collection, and then have models reference that collection instance (seems bad)? Or is it better to pass that collection as a parameter to every model method (seems tedious)?  What's the recommended way of kicking off the whole process and populating those initial collections?\r\n\r\nI have a bunch of questions like this that seeing a simple example would probably quickly answer."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/6",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/6/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/6/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/6/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/6",
    "id": 361864,
    "number": 6,
    "title": "declarative event handling in views",
    "user": {
      "login": "willbailey",
      "id": 4264,
      "avatar_url": "https://avatars.githubusercontent.com/u/4264?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willbailey",
      "html_url": "https://github.com/willbailey",
      "followers_url": "https://api.github.com/users/willbailey/followers",
      "following_url": "https://api.github.com/users/willbailey/following{/other_user}",
      "gists_url": "https://api.github.com/users/willbailey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willbailey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willbailey/subscriptions",
      "organizations_url": "https://api.github.com/users/willbailey/orgs",
      "repos_url": "https://api.github.com/users/willbailey/repos",
      "events_url": "https://api.github.com/users/willbailey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willbailey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 31,
    "created_at": "2010-10-14T07:14:56Z",
    "updated_at": "2010-11-16T15:06:33Z",
    "closed_at": "2010-11-16T15:06:33Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/6",
      "html_url": "https://github.com/jashkenas/backbone/pull/6",
      "diff_url": "https://github.com/jashkenas/backbone/pull/6.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/6.patch"
    },
    "body": "I started playing around with this tonight. So far I'm really liking it. One concept I'd like to see added is declarative event handling in the views. Rather than manually binding each callback to the model when you instantiate a new view instance I like the idea of there being a well defined convention through which views can automatically handle events from the model. The patch I'm proposing does this with the convention onEvent[Property]. This turns out to be really useful when your views become more complex and need to handle multiple types of model events in sometimes subtle ways."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/5",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/5/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/5/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/5/events",
    "html_url": "https://github.com/jashkenas/backbone/pull/5",
    "id": 361669,
    "number": 5,
    "title": "Guard against missing `new` keywords with a TypeError",
    "user": {
      "login": "fitzgen",
      "id": 74571,
      "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fitzgen",
      "html_url": "https://github.com/fitzgen",
      "followers_url": "https://api.github.com/users/fitzgen/followers",
      "following_url": "https://api.github.com/users/fitzgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions",
      "organizations_url": "https://api.github.com/users/fitzgen/orgs",
      "repos_url": "https://api.github.com/users/fitzgen/repos",
      "events_url": "https://api.github.com/users/fitzgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fitzgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2010-10-14T03:20:27Z",
    "updated_at": "2010-10-14T14:42:46Z",
    "closed_at": "2010-10-14T18:28:23Z",
    "pull_request": {
      "url": "https://api.github.com/repos/jashkenas/backbone/pulls/5",
      "html_url": "https://github.com/jashkenas/backbone/pull/5",
      "diff_url": "https://github.com/jashkenas/backbone/pull/5.diff",
      "patch_url": "https://github.com/jashkenas/backbone/pull/5.patch"
    },
    "body": "I know this is a little bit of a philosophical decision, but I think that it is safest to let people know right up front when they are forgetting the `new` keyword for a constructor. It is going to cause bugs anyways, might as well throw a TypeError immediately and not waste anyone's time.\r\n\r\nThoughts?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3",
    "labels_url": "https://api.github.com/repos/jashkenas/backbone/issues/3/labels{/name}",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3/comments",
    "events_url": "https://api.github.com/repos/jashkenas/backbone/issues/3/events",
    "html_url": "https://github.com/jashkenas/backbone/issues/3",
    "id": 361225,
    "number": 3,
    "title": "Have Backbone.View call 'init' method if it exists?",
    "user": {
      "login": "bgrins",
      "id": 95570,
      "avatar_url": "https://avatars.githubusercontent.com/u/95570?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bgrins",
      "html_url": "https://github.com/bgrins",
      "followers_url": "https://api.github.com/users/bgrins/followers",
      "following_url": "https://api.github.com/users/bgrins/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgrins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bgrins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgrins/subscriptions",
      "organizations_url": "https://api.github.com/users/bgrins/orgs",
      "repos_url": "https://api.github.com/users/bgrins/repos",
      "events_url": "https://api.github.com/users/bgrins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bgrins/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/enhancement",
        "name": "enhancement",
        "color": "61b1e6"
      },
      {
        "url": "https://api.github.com/repos/jashkenas/backbone/labels/fixed",
        "name": "fixed",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2010-10-13T20:33:54Z",
    "updated_at": "2010-10-13T22:21:03Z",
    "closed_at": "2010-10-14T04:43:04Z",
    "body": "Hi,\r\nBy adding this line:\r\n<pre>this.init && this.init.apply(this);</pre>\r\nto the end of the Backbone.View (http://github.com/documentcloud/backbone/blob/master/backbone.js#L496)\r\n\r\nI am able to declare and run an init function on the template like this: \r\n\r\n<pre>\r\nvar TaskView = Backbone.View.extend({\r\n\ttagName: 'li',\r\n\tclassName: 'task',\r\n\trender: function() {    \t\r\n\t\t\r\n\t\t$(this.dom.text).text(this.model.get(\"text\"));\r\n\t\t\r\n\t\tif (this.model.get(\"isFinished\")) {\r\n\t\t\t$(this.dom.completeLink).hide();\r\n\t\t\t$(this.dom.incompleteLink).show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$(this.dom.completeLink).show();\r\n\t\t\t$(this.dom.incompleteLink).hide();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n    \t        return this;\r\n  \t},\r\n  \tinit: function() {\r\n  \t\tthis.dom = {\r\n  \t\t\tcompleteLink: this.make(\"a\", {className: \"complete\", href:'#'}, \"Complete\"),\r\n  \t\t\tincompleteLink: this.make(\"a\", {className: \"incomplete\", href:'#'}, \"Not Complete\"),\r\n  \t\t\tremoveLink: this.make(\"a\", {className: \"remove\", href:'#'}, \"Remove\"),\r\n  \t\t\ttext: this.make(\"span\", {className: 'tasktext' })\r\n  \t\t};\r\n  \t\t\r\n\t\t$(this.el).\r\n\t\t\tappend(this.dom.text).\r\n\t\t\tappend(this.dom.completeLink).\r\n\t\t\tappend(this.dom.incompleteLink).\r\n\t\t\tappend(this.dom.removeLink);\r\n\t\t\t\r\n\t\tthis.handleEvents();\r\n  \t},\r\n  \t\r\n\tevents: {\r\n\t\t'click .complete': 'setFinished',\r\n\t\t'click .incomplete': 'setUnfinished',\r\n\t\t'click .remove': 'remove'\r\n\t},  \r\n  \tsetFinished: function() { \r\n  \t\tthis.model.set({isFinished: true});\r\n  \t\treturn false;\r\n  \t},\r\n  \tsetUnfinished: function() { \r\n  \t\tthis.model.set({isFinished: false});\r\n  \t\treturn false;\r\n  \t},\r\n  \tremove: function() {\r\n  \t\treturn false;\r\n  \t}\r\n});\r\n</pre>\r\n\r\nThat way I don't need to have all the DOM creation in the render function (which could be called multiple times).  I guess I could use a templating framework instead of this.make, but it would still be useful to have a function callback to have a place to run logic that only needs to run once.  What do you think?  Just an idea...\r\n\r\nBrian"
  }
]